import:
	java.util.ArrayList
	java.util.HashMap
	me.libraryaddict.disguise.DisguiseAPI
	me.libraryaddict.disguise.disguisetypes.DisguiseType
	me.libraryaddict.disguise.disguisetypes.MiscDisguise
	me.libraryaddict.disguise.disguisetypes.watchers.DroppedItemWatcher
	net.minecraft.server.v1_12_R1.PathfinderGoalFloat
	net.minecraft.server.v1_12_R1.PathfinderGoalRandomStroll
	net.minecraft.server.v1_12_R1.PathfinderGoalSelector
	org.bukkit.Color as BukkitColor
	org.bukkit.entity.EntityType
	org.bukkit.inventory.ItemStack
	org.bukkit.Material
	org.bukkit.util.Vector

every 5 seconds:
	loop all players:
		attemptAnimalSpawn(loop-player)
		wait 5 ticks

function attemptAnimalSpawn(ply: player):
	chance of 0.4
	set {_loc} to location of {_ply}
	{_loc}.add(a random number between -22 and 22, a random number between -16 and 16, a random number between -22 and 22)
	if y-coordinate of {_ply} > 50:
		set {_loc} to location of highest solid block at {_loc}
		{_loc}.add(0, 1, 0)
	else if y-coordinate of {_loc} < 0:
		stop trigger
	if "%world of {_loc}%" is "world_nether":
		if chance of 0.8:
			set {_spawnType} to "Lavafly"
		else:
			set {_spawnType} to "MagmaSnail"
	else if (world of {_loc}).getTime() is between 13500 and 22500:
		if chance of 0.6:
			set {_spawnType} to "Firefly"
		else if chance of 0.15:
			set {_spawnType} to "GroundNight"
		else:
			set {_spawnType} to "Ground"
	else:
		if chance of 0.3:
			set {_spawnType} to "Bird"
		else if chance of 0.4:
			set {_spawnType} to "Butterfly"
		else:
			set {_spawnType} to "Ground"
	if {_spawnType} is not "Ground" or "Bird":
		{_loc}.add(0, a random number between 6 and 20, 0)
	if block at {_loc} is not air:
		stop trigger
	set {_biome} to getBiome({_loc})
	if "%{_biome}%" is "hallow":
		(world of {_loc}).getTime() is between 13500 and 18000
		y-coordinate of {_loc} is between 60 and 150
		chance of 0.05
		set {_animalName} to "七彩草蛉"
	if {_animalName} is not set:
		#get all applicable animal types according to biome, altitude etc.
		set {_motherNode} to yml value "subTypes.%{_spawnType}%" from file "plugins/Data/animals.yml"
		set {_animalMap} to new HashMap(16)
		set {_randomMax} to 0
		loop ...({_motherNode}.getKeys(false)):
			set {_name} to loop-value
			set {_animalBiome} to {_motherNode}.get("%{_name}%.biome")
			if {_animalBiome} is set:
				{_animalBiome}.contains({_biome}) is not true
				continue
			set {_depthMax} to {_motherNode}.get("%{_name}%.yMax")
			set {_depthMin} to {_motherNode}.get("%{_name}%.yMin")
			if {_depthMax} is set:
				y-coordinate of {_loc} is not between {_depthMin} and {_depthMax}
				continue
			set {_animalWeight} to {_motherNode}.get("%{_name}%.weight")
			add {_animalWeight} to {_randomMax}
			{_animalMap}.put({_name}, {_animalWeight})
			wait 3 ticks
		#determine which animal to spawn according to weights
		{_randomMax} > 0
		set {_random} to a random number between 0 and {_randomMax}
		loop ...{_animalMap}.keySet():
			if {_animalMap}.get(loop-value) >= {_random}:
				set {_animalName} to loop-value
				stop loop
			subtract {_animalMap}.get(loop-value) from {_random}
	{_animalName} is set
	spawnAnimal({_animalName}, {_loc})

function spawnAnimal(animalName: text, loc: location):
	set {_animal} to (world of {_loc}).spawnEntity({_loc}, EntityType.SILVERFISH)
	add "isAnimal" to scoreboard tags of {_animal}
	set {_itemAnimal} to getItem({_animalName})
	{_animal}.setCustomName(name of {_itemAnimal})
	
	set {_spawnType} to yml value "animalType.%{_animalName}%" from file "plugins/Data/animals.yml"
	animalAI({_animal}, {_spawnType})
	
	wait 1 tick
	health of {_animal} > 0
	set max health of {_animal} to 5
	set health of {_animal} to 5
	

#AI
function animalAI(animal: entity, type: text):
	set {_nmsAnimal} to {_animal}.getHandle()
	set {_nmsAnimal}.goalSelector to new PathfinderGoalSelector({_nmsAnimal}.getWorld().methodProfiler)
	
	set {_moveDir} to vector(a random number between -1 and 1, 0.1, a random number between -1 and 1)
	{_nmsAnimal}.goalSelector.a(0f, new PathfinderGoalFloat({_nmsAnimal}))
	if {_type} is "Bird" or "Butterfly" or "Firefly" or "Lavafly":
		set gravity of {_animal} to off
	else:
		{_nmsAnimal}.goalSelector.a(1f, new PathfinderGoalRandomStroll({_nmsAnimal}, 1.0d))
	
	{_animal}.setSilent(true)
	set {_animalName} to trimText({_animal}.getCustomName())
	
	set {_disguiseItem} to getItem({_animalName})
	set {_disguise} to new MiscDisguise(DisguiseType.DROPPED_ITEM, 0)
	{_disguise}.getWatcher().setItemStack({_disguiseItem})
	DisguiseAPI.disguiseEntity({_animal}, {_disguise})
	
	if {_type} is "Lavafly" or "MagmaSnail":
		apply potion of fire resistance without particles to {_animal} for 10 days
	
	set {_indexAI} to 0
	set {_idleSound} to yml value "idleSounds.%{_animalName}%" from file "plugins/Data/animals.yml"
	set {_particle} to yml value "particleColor.%{_animalName}%" from file "plugins/Data/animals.yml"
	while health of {_animal} > 0:
		add 1 to {_indexAI}
		{_animal}.setFallDistance(0)
		if {_type} is "Bird" or "Butterfly" or "Firefly" or "Lavafly":
			if {_animalName} is "七彩草蛉":
				if getBiome(location of {_animal}) is not "hallow":
					{_animal}.remove()
			if {_type} is "Bird":
				loop all players in radius 8 of {_animal}:
					gamemode of loop-player is not spectator
					set {_moveDir} to vector(a random number between -1 and 1, 0.5, a random number between -1 and 1)
					set {_indexAI} to -10
					stop loop
			if mod({_indexAI}, 5) = 0:
				if {_indexAI} < 0:
					set {_moveDir} to vector(a random number between -1 and 1, 0.5, a random number between -1 and 1)
				else:
					if {_type} is "Lavafly":
						if the block 10 below {_animal} is air:
							set {_y} to 0
						else:
							set {_y} to 127
					else:
						set {_y} to y-coordinate of (highest solid block at location of {_animal})
					set {_xOffset} to a random number between -1 and 1
					set {_zOffset} to 1 - abs({_xOffset})
					if chance of 0.5:
						set {_zOffset} to {_zOffset} * -1
					if ({_y} + 10) > (y-coordinate of {_animal}):
						set {_moveDir} to vector({_xOffset}, 0.1, {_zOffset})
					else:
						set {_moveDir} to vector({_xOffset}, -0.35, {_zOffset})
			set {_v} to velocity of {_animal}
			if vector length of {_v} > 0:
				set vector length of {_v} to (vector length of {_moveDir}) * 0.75
				{_v}.add({_moveDir})
			else:
				set {_v} to {_moveDir}.clone()
			if {_type} is "Bird":
				set vector length of {_v} to 0.2
			else:
				set vector length of {_v} to 0.125
			set velocity of {_animal} to {_v}
		else:
			if {_animalName} is "蚱蜢" or "金蚱蜢":
				if (the block 1 below {_animal}).getType().isSolid() is true:
					mod({_indexAI}, 6) = 0
					set {_pushVec} to (vector(a random number between -0.5 and 0.5, 0.75, a random number between -0.5 and 0.5))
					push {_animal} {_pushVec}
		if mod({_indexAI}, 20) = 0:
			{_idleSound} is set
			play sound "entity.%{_idleSound}%.idle" with volume 3 and pitch 1 at location of {_animal}
		if {_particle} is set:
			if {_particle}.size() > 1:
				set {_p} to new ArrayList()
				{_p}.add({_particle}.get(a random integer between 0 and ({_particle}.size() - 1)))
				handleParticleLine(vector(0, 1, 0), 0.5, 0.5, (location of {_animal}), {_p})
			else:
				handleParticleLine(vector(0, 1, 0), 0.5, 0.5, (location of {_animal}), {_particle})
		wait 14 ticks
		if {_indexAI} > 125:
			{_animal}.remove()