import:
	java.util.ArrayList
	java.util.HashMap
	java.util.HashSet
	lk.vexview.gui.components.VexButton
	lk.vexview.gui.components.VexScrollingList
	lk.vexview.gui.components.VexSlot
	lk.vexview.gui.VexGui
	net.minecraft.server.v1_12_R1.EntityInsentient
	
	org.bukkit.block.Biome

on inventory click:
	set {_currInv} to (event-player).getOpenInventory().getTopInventory()
	set {_plyInv} to (event-player).getOpenInventory().getBottomInventory()
	set {_eventInv} to event.getClickedInventory()
	if trimText({_currInv}.getTitle()) starts with "全物品一览":
		cancel event
		set {_pageNum} to {_currInv}.getTitle().split("【")[1]
		replace all "】" in {_pageNum} with ""
		set {_pageNum} to {_pageNum} parsed as integer
		set {_items::*} to ...{Items}.values()
		if trimText(name of event-slot) is "上一页":
			set {_pageNum} to max({_pageNum} - 1, 1)
		else if trimText(name of event-slot) is "下一页":
			set {_pageNum} to min({_pageNum} + 1, ceil((size of {_items::*}) / 45))
		else:
			give 1 of event-slot to event-player
			stop trigger
		set {_inspectionInv} to a new chest inventory with 6 rows named "&r全物品一览【%{_pageNum}%】"
		set slot 45 of {_inspectionInv} to a glass named "&r上一页"
		set slot 53 of {_inspectionInv} to a glass named "&r下一页"
		set {_index} to {_pageNum} * 45 - 45
		set {_i} to 0
		loop 45 times:
			add 1 to {_index}
			set slot {_i} of {_inspectionInv} to {_items::%{_index}%}
			add 1 to {_i}
		open {_inspectionInv} for event-player

command /testParticleColor [<text>]:
	trigger:
		command sender is op
		handleParticleCircle(eye location of command sender, 5, 0.25, 0, 0, arg-1)
command /generatePrefixRarity:
	trigger:
		command sender is op
		set {_prefixes::*} to yml nodes "prefixInfo" from file "plugins/Data/prefixOriginal.yml"
		set yml value "prefixList" from file "plugins/Data/prefix.yml" to yml value "prefixList" from file "plugins/Data/prefixOriginal.yml"
		set yml value "prefixInfo" from file "plugins/Data/prefix.yml" to yml value "prefixInfo" from file "plugins/Data/prefixOriginal.yml"
		broadcast "%{_prefixes::*}%"
		loop {_prefixes::*}:
			set {_prefix} to loop-value
			set {_color} to the character at index 2 of (yml value "prefixInfo.%{_prefix}%.name" from file "plugins/Data/prefixOriginal.yml")
			set {_rarity} to 1
			if {_color} is "8":
				set {_rarity} to -2
			if {_color} is "7":
				set {_rarity} to -1
			if {_color} is "6" or "4":
				set {_rarity} to 2
			if {_color} is "a":
				set {_rarity} to 1
			broadcast "%{_prefix}%|%{_color}%|%{_rarity}%"
			clear yml value "prefixInfo.%{_prefix}%.name" from file "plugins/Data/prefix.yml"
			set yml value "prefixInfo.%{_prefix}%.rarity" from file "plugins/Data/prefix.yml" to {_rarity}
command /generateItemRarity:
	trigger:
		command sender is op
		set {_items::*} to yml nodes "" from file "plugins/Data/itemsOriginal.yml"
		broadcast "%{_items::*}%"
		loop {_items::*}:
			set {_item} to loop-value
			set {_color} to the character at index 2 of (yml value "%{_item}%.name" from file "plugins/Data/itemsOriginal.yml")
			set {_rarity} to 0
			set {_idx} to -2
			loop 14 times:
				set {_colorCodeInfo} to yml value "rarity.%{_idx}%" from file "plugins/Data/setting.yml"
				if "%{_colorCodeInfo}%" is {_color}:
					set {_rarity} to {_idx}
					stop loop
				add 1 to {_idx}
			broadcast "%{_item}%|%{_color}%|%{_rarity}%"
			set yml value "%{_item}%" from file "plugins/Data/items.yml" to yml value "%{_item}%" from file "plugins/Data/itemsOriginal.yml"
			clear yml value "%{_item}%.name" from file "plugins/Data/items.yml"
			set yml value "%{_item}%.rarity" from file "plugins/Data/items.yml" to {_rarity}
command /regulateRecipeIndex:
	trigger:
		command sender is op
		set {_stations::*} to yml nodes "" from file "plugins/Data/recipes.yml"
		broadcast "%{_stations::*}%"
		loop {_stations::*}:
			set {_block} to loop-value
			set {_nodes::*} to yml nodes "%{_block}%" from file "plugins/Data/recipes.yml"
			broadcast "%{_block}%|%{_nodes::*}%"
			set {_index} to 1
			loop {_nodes::*}:
				set {_section} to yml value "%{_block}%.%loop-value-2%" from file "plugins/Data/recipes.yml"
				set yml value "%{_block}%.%{_index}%" from file "plugins/Data/recipesRegulated.yml" to {_section}
				add 1 to {_index}
command /inspectAllItems:
	trigger:
		command sender is op
		set {_inspectionInv} to a new chest inventory with 6 rows named "&r全物品一览【1】"
		set {_items::*} to ...{Items}.values()
		set slot 45 of {_inspectionInv} to a glass named "&r上一页"
		set slot 53 of {_inspectionInv} to a glass named "&r下一页"
		loop 45 times:
			set slot (loop-number) - 1 of {_inspectionInv} to {_items::%loop-number%}
		open {_inspectionInv} for command sender
command /getInfo:
	trigger:
		command sender is op
		send "%metadata ""attrMap"" of command sender%" to command sender
command /reforge:
	trigger:
		command sender is op
		set command sender's tool to randomPrefix(command sender's tool)
command /getItem <text> [<integer>]:
	trigger:
		command sender is op
		set {_ply} to command sender
		set {_item} to getItem(arg-1)
		if arg-2 is set:
			arg-2 > 0
			set {_item} to arg-2 of {_item}
		give {_item} to {_ply}
command /spawnMob [<text>] <integer> <player>:
	trigger:
		command sender is op
		set {_amount} to 1
		set {_amount} to arg-2
		set {_ply} to command sender
		set {_ply} to arg-3
		set {_timeT} to unix timestamp of now * 1000
		loop {_amount} times:
			spawnMob(arg-1, {_ply}.getLocation(), {_ply})
		set {_timeT} to unix timestamp of now * 1000 - {_timeT}
		broadcast "Total time elapsed: %{_timeT}%"
command /information:
	trigger:
		command sender is op
		send "%nl%Material of your tool: %(1 of command sender's tool).getType()%" to command sender
		send "Biome you are at: %(command sender).getWorld().getBiome((x-coordinate of command sender), (z-coordinate of command sender))%" to command sender
command /reloadItemRecipe [<boolean>] [<boolean>]:
	trigger:
		command sender is op
		if arg-1 is true:
			set {_items::*} to yml nodes "" from file "plugins/Data/items.yml"
			set {_craftStations::*} to yml nodes "" from file "plugins/Data/recipes.yml"
			set {Items} to new HashMap(size of {_items::*} * 3)
			loop {_items::*}:
				set {_item} to getRawItemFromYML(loop-value)
				set {_item} to 1 of {_item}
				if "%{_item}.getType()%" is "ARROW" or "SLIME_BALL" or "BLAZE_POWDER" or "FLINT":
					clear {_lore}
					set {_lore} to {_item}.getItemMeta().getLore()
					if {_lore} is set:
						set {_lore1} to trimText(line 1 of lore of {_item})
						if {_lore1} is "[装备]" or "[饰品]":
							{_lore}.add(1, "&r[弹药]")
						else:
							{_lore}.add(0, "&r[弹药]")
						set lore of {_item} to ...{_lore}
					else:
						set line 1 of lore of {_item} to "&r[弹药]"
				sendInfo("&areloading item %loop-value%")
				{Items}.put((loop-value), {_item})
			set {_materials} to new HashSet()
			loop {_craftStations::*}:
				set {_block} to loop-value
				set {_nodes::*} to yml nodes "%{_block}%" from file "plugins/Data/recipes.yml"
				loop {_nodes::*}:
					set {_currMaterials} to yml value "%{_block}%.%loop-value-2%.requireItem" from file "plugins/Data/recipes.yml"
					loop ...{_currMaterials}:
						set {_itemInfo} to loop-value-3
						if {_itemInfo} contains ":":
							set {_itemInfo} to {_itemInfo}.split(":")[0]
						{_materials}.add({_itemInfo})
			loop ...{_materials}:
				set {_mat} to loop-value
				set {_item} to air
				set {_item} to {Items}.get({_mat})
				set {_item} to 1 of {_item}
				clear {_lore}
				set {_lore} to {_item}.getItemMeta().getLore()
				if {_lore} is set:
					set {_lore1} to trimText(line 1 of lore of {_item})
					if {_lore1} is "[装备]" or "[饰品]":
						{_lore}.add(1, "&r[材料]")
					else:
						{_lore}.add(0, "&r[材料]")
					set lore of {_item} to ...{_lore}
				else:
					set line 1 of lore of {_item} to "&r[材料]"
				{Items}.put({_mat}, {_item})
		if arg-2 is true:
			set {CraftingGUI} to new HashMap()
			set {_stations::*} to yml nodes "" from file "plugins/Data/recipes.yml"
			loop {_stations::*}:
				set {_level} to 1
				set {_levelMax} to 1
				while {_level} <= {_levelMax}:
					set {_gui} to new VexGui("https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", 0, 0, 200, 150)
					set {_block} to loop-value
					set {_btns} to new ArrayList()
					set {_nodes::*} to yml nodes "%{_block}%" from file "plugins/Data/recipes.yml"
					set {_index} to 1
					loop {_nodes::*}:
						if yml value "%{_block}%.%loop-index-2%.requireLevel" from file "plugins/Data/recipes.yml" <= {_level}:
							set {_itemStack} to yml value "%{_block}%.%loop-index-2%.resultItem" from file "plugins/Data/recipes.yml"
							set {_itemStack} to getRawItem({_itemStack})
							set {_comp} to new VexSlot({_index}, 5, (({_index} * 20) - 20), {_itemStack})
							{_btns}.add({_comp})
							add 1 to {_index}
						else:
							set {_levelMax} to yml value "%{_block}%.%loop-index-2%.requireLevel" from file "plugins/Data/recipes.yml"
					set {_SL} to new VexScrollingList(({_gui}.getWidth() * 0.75), 17, 22, ({_gui}.getHeight() - 34), ({_btns}.size() * 20))
					set {_iterator} to {_btns}.iterator()
					while {_iterator}.hasNext() is true:
						{_SL}.addComponent({_iterator}.next())
					{_gui}.addComponent({_SL})
					{_gui}.addComponent(new VexButton("CRAFT", "选择配方", "https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", "https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", {_gui}.getWidth() - 75, {_gui}.getHeight() - 50, 35, 17 + {_level}))
					{CraftingGUI}.put("%{_block}%_%{_level}%", {_gui})
					{CraftingGUI}.put("%{_block}%_%{_level}%_slot", {_index})
					add 1 to {_level}

command /testPotions:
	trigger:
		command sender is op
		set {_ply} to command sender
		set {_potions::*} to yml nodes "effects" from file "plugins/Data/setting.yml"
		sendInfo("%{_potions::*}%")
		loop {_potions::*}:
			applyEffect({_ply}, loop-value, 50)
			wait 1 second


command /trimWeapons:
	trigger:
		command sender is op
		set {_items::*} to yml nodes "" from file "plugins/Data/weapons.yml"
		loop {_items::*}:
			yml value loop-value from file "plugins/Data/items.yml" is not set
			yml value "%loop-value%.type" from file "plugins/Data/weapons.yml" is set
			sendInfo("deleting config %loop-value% from file plugins/Data/weapons.yml")
			clear yml value loop-value from file "plugins/Data/weapons.yml"

command /combineFile [<text>] [<boolean>]:
	trigger:
		command sender is op
		set {_items::*} to yml nodes "" from file "plugins/DataNew/%arg-1%.yml"
		if {_items::1} is not set:
			send "/combineFile [<fileName>] [<replace existing>]" to command sender
		if arg-2 is not true:
			remove (yml nodes "" from file "plugins/Data/%arg-1%.yml") from {_items::*}
		loop {_items::*}:
			sendInfo("cloneing config %loop-value% from file plugins/Data/%arg-1%.yml")
			set (yml value loop-value from file "plugins/Data/%arg-1%.yml") to (yml value loop-value from file "plugins/DataNew/%arg-1%.yml")