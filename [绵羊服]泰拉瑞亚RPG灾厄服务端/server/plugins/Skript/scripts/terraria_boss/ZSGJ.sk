import:
	java.util.ArrayList
	java.util.HashMap
	net.minecraft.server.v1_11_R1.BossBattle
	net.minecraft.server.v1_11_R1.BossBattle$BarColor
	net.minecraft.server.v1_11_R1.BossBattle$BarStyle
	net.minecraft.server.v1_11_R1.BossBattleServer
	net.minecraft.server.v1_11_R1.PacketPlayOutBoss$Action
	org.bukkit.craftbukkit.v1_11_R1.util.CraftChatMessage
	org.bukkit.entity.EntityType
	org.bukkit.util.BlockIterator


function handleDukeFishron(ply: player, loc: location):
	{BOSS}.containsKey("猪鲨公爵") is false
	spawn a slime at {_loc}
	set {_zsgj} to spawned entity
	
	broadcast "&d&l猪鲨公爵 苏醒了！"
	play sound "entity.enderdragon.growl" with volume 10 and pitch 1 at location of {_zsgj}
	set {_attrMap} to new HashMap()
	{_attrMap}.put("crit", 0.04)
	{_attrMap}.put("damage", 280)
	{_attrMap}.put("damageMeleeMulti", 1)
	{_attrMap}.put("damageMulti", 1)
	{_attrMap}.put("damageType", "Melee")
	{_attrMap}.put("defence", 100)
	{_attrMap}.put("defenceMulti", 1)
	{_attrMap}.put("knockback", 4)
	{_attrMap}.put("knockbackResistance", 1)
	{_attrMap}.put("knockbackMeleeMulti", 1)
	{_attrMap}.put("knockbackMulti", 1)
	set metadata "attrMap" of {_zsgj} to {_attrMap}
	
	set {_bossbar} to new BossBattleServer(CraftChatMessage.fromString("猪鲨公爵", true)[0], BarColor.GREEN, BarStyle.PROGRESS)
	{_bossbar}.setVisible(true)
	set metadata "bossbar" of {_zsgj} to {_bossbar}
	
	set {_targets} to setupBossTarget({_zsgj}, 4, {_ply}, true, {_bossbar})
	set metadata "targets" of {_zsgj} to {_targets}
	set {_healthMulti} to getBossHealthMulti({_targets}.size())
	{_zsgj}.setInvulnerable(true)
	{_zsgj}.setCustomName("猪鲨公爵&1")
	play sound "entity.enderdragon.growl" with volume 10 and pitch 1 at location of {_zsgj}
	add "isMonster" to scoreboard tags of {_zsgj}
	add "isBOSS" to scoreboard tags of {_zsgj}
	{_zsgj}.setCustomNameVisible(true)
	
	{_zsgj}.setGravity(false)
	{_zsgj}.setRemoveWhenFarAway(false)
	{_zsgj}.setSize(5)
	set {_zsgj}.getHandle().noclip to true
	
	{BOSS}.put("猪鲨公爵", {_zsgj})
	
	wait 1 tick
	{_zsgj}.setInvulnerable(false)
	set max health of {_zsgj} to round(120000 * {_healthMulti})
	set health of {_zsgj} to round(120000 * {_healthMulti})
	
	set {_rage} to -1
	set {_index} to 0
	set {_indexAI} to 0
	set {_typeAI} to "CHARGE"
	set {_target} to {_ply}
	set metadata "target" of {_zsgj} to {_target}
	set {_healthRatio} to 1
	
	renderSingleBossbar({_zsgj}, {_bossbar})
	
	set velocity of {_zsgj} to vector(0, 0.35, 0)
	wait 2 seconds
	
	while health of {_zsgj} > 0:
		set {_delayTime} to 3 ticks
		set {_lastHealthRatio} to {_healthRatio}
		set {_healthRatio} to (health of {_zsgj}) / (max health of {_zsgj})
		if getBiome(location of {_zsgj}) is "ocean":
			if {_healthRatio} > 0.5:
				{_attrMap}.put("damageMeleeMulti", 1)
			else if {_healthRatio} > 0.15:
				{_attrMap}.put("damageMeleeMulti", 1.5)
			else:
				{_attrMap}.put("damageMeleeMulti", 1.35)
		else:
			{_attrMap}.put("damageMeleeMulti", 2)
		#clear invalid targets
		if {_target} is set:
			checkBossTarget({_target}, {_zsgj}, false) is false
			clear {_target}
			clear metadata "target" of {_zsgj}
		
		if {_target} is not set:
			loop toSkList {_targets}.keySet():
				set {_ply} to "%loop-value%" parsed as player
				checkBossTarget({_ply}, {_zsgj}, false) is true
				set {_target} to {_ply}
				set metadata "target" of {_zsgj} to {_target}
				makeTarget({_zsgj}, {_target})
				stop loop
			#find new target if avaliable, otherwise flee
		if {_target} is not set:
			set velocity of {_zsgj} to vector(0, -2.5, 0)
			if y-coordinate of {_zsgj} < 0:
				set max health of {_zsgj} to 1
				{_zsgj}.remove()
				stop loop
		else:
			#AI part starting here
			if {_lastHealthRatio} > 0.5:
				{_healthRatio} < 0.5
				set velocity of {_zsgj} to vector(0, 0, 0)
				wait 2 seconds
				set {_bossbar}.color to BarColor.YELLOW
				{_bossbar}.sendUpdate(Action.UPDATE_STYLE)
				set {_typeAI} to "CHARGE"
				set {_indexAI} to 0
				{_zsgj}.setCustomName("猪鲨公爵&2")
			else if {_lastHealthRatio} > 0.15:
				{_healthRatio} < 0.15
				set velocity of {_zsgj} to vector(0, 0, 0)
				wait 2 seconds
				set {_bossbar}.color to BarColor.RED
				{_bossbar}.sendUpdate(Action.UPDATE_STYLE)
				set {_typeAI} to "CHARGE1"
				set {_indexAI} to 0
				{_zsgj}.setCustomName("猪鲨公爵&3")
				set {_v} to vector(0, 0, 0)
			
			if {_healthRatio} > 0.5:
				if {_typeAI} is "CHARGE":
					if {_indexAI} >= 45:
						if chance of 0.5:
							set {_typeAI} to "BUBBLE"
						else:
							set {_typeAI} to "SHARK"
						set {_indexAI} to 0
					else if mod({_indexAI}, 9) = 0:
						set {_targetLoc} to (eye location of {_target})
						if chance of 0.6:
							set {_lastLoc} to location of {_target}
							wait 1 tick
							set {_dV} to (location of {_target}).subtract({_lastLoc}).toVector()
							set {_targetLoc} to {_targetLoc}.add({_dV}.multiply(12))
						set {_v} to {_targetLoc}.subtract(eye location of {_zsgj}).toVector()
						if vector length of {_v} > 0:
							set vector length of {_v} to max(1.25, (vector length of {_v}) / 12)
						set velocity of {_zsgj} to {_v}
					else if mod({_indexAI}, 9) <= 6:
						set velocity of {_zsgj} to {_v}
					else if mod({_indexAI}, 9) = 7:
						set {_v} to vector((a random number between -1 and 1), (a random number between -1 and 1), (a random number between -1 and 1))
						if vector length of {_v} > 0:
							set vector length of {_v} to 0.35
						set velocity of {_zsgj} to {_v}
				else if {_typeAI} is "BUBBLE":
					if {_indexAI} >= 20:
						set {_typeAI} to "CHARGE"
						set {_indexAI} to -1
					else if {_indexAI} < 15:
						if {_indexAI} <= 1:
							set {_dV} to (location of {_zsgj}).subtract(location of {_target}).toVector()
							set y component of {_dV} to 0
							set vector length of {_dV} to 5
							set y component of {_dV} to 10
						set {_v} to (location of {_target}).add({_dV}).subtract(location of {_zsgj}).toVector()
						if vector length of {_v} > 0:
							set vector length of {_v} to min(1.5, (vector length of {_v}) / 6)
						set velocity of {_zsgj} to {_v}
						handleDukeFishronPerk(1, (location of {_target}), {_zsgj})
				else:
					if {_indexAI} >= 10:
						set {_typeAI} to "CHARGE"
						set {_indexAI} to -1
					else if {_indexAI} = 3:
						handleDukeFishronPerk(3, (location of {_zsgj}).add(-1, 0, 0), {_zsgj})
						handleDukeFishronPerk(3, (location of {_zsgj}).add(1, 0, 0), {_zsgj})
						handleDukeFishronPerk(3, (location of {_zsgj}).add(0, 0, -1), {_zsgj})
						handleDukeFishronPerk(3, (location of {_zsgj}).add(0, 0, 1), {_zsgj})
					else if {_indexAI} < 7:
						if mod({_indexAI}, 5) = 0:
							set {_v} to (eye location of {_target}).subtract(eye location of {_zsgj}).toVector()
							if vector length of {_v} > 0:
								set vector length of {_v} to 0.25
						set velocity of {_zsgj} to {_v}
			else if {_healthRatio} > 0.15:
				if {_typeAI} is "CHARGE":
					if {_indexAI} >= 21:
						if chance of 0.5:
							set {_typeAI} to "BUBBLE"
							set {_dV} to (location of {_target}).subtract(location of {_zsgj}).toVector()
							set vector length of {_dV} to 8
							set {_pivot} to (location of {_zsgj}).subtract({_dV})
							set {_swirlYaw} to vector yaw of {_dV}
							set {_swirlPitch} to vector pitch of {_dV}
						else:
							set {_typeAI} to "SHARK"
						set {_indexAI} to 0
					else if mod({_indexAI}, 7) = 0:
						set {_targetLoc} to (eye location of {_target})
						if chance of 0.7:
							set {_lastLoc} to location of {_target}
							wait 1 tick
							set {_dV} to (location of {_target}).subtract({_lastLoc}).toVector()
							set {_targetLoc} to {_targetLoc}.add({_dV}.multiply(12))
						set {_v} to {_targetLoc}.subtract(eye location of {_zsgj}).toVector()
						if vector length of {_v} > 0:
							set vector length of {_v} to max(1.4, (vector length of {_v}) / 12)
						set velocity of {_zsgj} to {_v}
					else if mod({_indexAI}, 7) <= 5:
						set velocity of {_zsgj} to {_v}
					else if mod({_indexAI}, 7) = 6:
						set {_v} to (eye location of {_target}).subtract(eye location of {_zsgj}).toVector()
						if vector length of {_v} > 0:
							set vector length of {_v} to 0.1
						set velocity of {_zsgj} to {_v}
				else if {_typeAI} is "BUBBLE":
					if {_indexAI} >= 35:
						set {_typeAI} to "CHARGE"
						set {_indexAI} to -1
					else if {_indexAI} < 30:
						set {_delayTime} to 1 tick
						set {_dV} to new vector with yaw {_swirlYaw} and pitch {_swirlPitch}
						set vector length of {_dV} to 8
						add 12 to {_swirlYaw}
						set velocity of {_zsgj} to vector(0, 0, 0)
						teleport {_zsgj} to {_pivot}.clone().add({_dV})
						handleDukeFishronPerk(1, (eye location of {_target}), {_zsgj})
					else:
						set {_v} to (eye location of {_target}).subtract(eye location of {_zsgj}).toVector()
						if vector length of {_v} > 0:
							set vector length of {_v} to min(0.5, (vector length of {_v}) / 6)
						set velocity of {_zsgj} to {_v}
				else:
					if {_indexAI} >= 10:
						set {_typeAI} to "CHARGE"
						set {_indexAI} to -1
					else if {_indexAI} = 3:
						handleDukeFishronPerk(3, (location of {_zsgj}), {_zsgj})
					else if {_indexAI} < 7:
						set {_v} to (location of {_target}).subtract(location of {_zsgj}).toVector()
						if vector length of {_v} > 0:
							set vector length of {_v} to 0.25
						set velocity of {_zsgj} to {_v}
			else:
				if {_typeAI} is "CHARGE1":
					set {_loopTime} to 1
				else if {_typeAI} is "CHARGE2":
					set {_loopTime} to 2
				else if {_typeAI} is "CHARGE3":
					set {_loopTime} to 3
				if {_indexAI} >= (8 * {_loopTime}):
					if {_typeAI} is "CHARGE1":
						set {_typeAI} to "CHARGE2"
					else if {_typeAI} is "CHARGE2":
						set {_typeAI} to "CHARGE3"
					else if {_typeAI} is "CHARGE3":
						set {_typeAI} to "CHARGE1"
					set {_indexAI} to 0
					set {_xOffset} to a random number between 25 and -25
					set {_zOffset} to 25 - abs({_xOffset})
					if chance of 0.5:
						set {_zOffset} to {_zOffset} * -1
					teleport {_zsgj} to (location of {_target}).add({_xOffset}, (a random number between 5 and 10), {_zOffset})
				else:
					if mod({_indexAI}, 8) is between 2 and 5:
						if mod({_indexAI}, 8) = 2:
							remove "noDamage" from scoreboard tags of {_zsgj}
							{_zsgj}.setCustomName("猪鲨公爵&2")
							set {_targetLoc} to (eye location of {_target})
							if chance of 0.8:
								set {_lastLoc} to location of {_target}
								wait 1 tick
								set {_dV} to (location of {_target}).subtract({_lastLoc}).toVector()
								set {_targetLoc} to {_targetLoc}.add({_dV}.multiply(12))
							set {_v} to {_targetLoc}.subtract(eye location of {_zsgj}).toVector()
							if vector length of {_v} > 0:
								set vector length of {_v} to max(1.5, (vector length of {_v}) / 8)
					else:
						add "noDamage" to scoreboard tags of {_zsgj}
						{_zsgj}.setCustomName("猪鲨公爵&3")
						set {_dV} to vector(0, 0.25, 0)
						if vector length of {_v} > 0:
							set vector length of {_v} to 0.2
						{_v}.add({_dV})
					set velocity of {_zsgj} to {_v}
					
			add 1 to {_indexAI}
			add 1 to {_index}
		wait {_delayTime}
	{_bossbar}.setVisible(false)
	{BOSS}.remove("猪鲨公爵")
	#drop
	set {_maxHealth} to max health of {_zsgj}
	{_maxHealth} is not 1
	broadcast "&d&l猪鲨公爵 被击败了."
	set {_targets} to metadata "targets" of {_zsgj}
	set {_killers} to {_targets}.keySet().iterator()
	set {_drop} to a leather named "&r专家模式福袋" with lore "&7猪鲨公爵"
	while {_killers}.hasNext():
		set {_ply} to {_killers}.next()
		set {_player} to {_ply} parsed as player
		name of {_player} is {_ply}
		if {_targets}.get({_ply}) * 5 > ({_maxHealth}) / ({_targets}.size()):
			if {_player} can hold {_drop}:
				send "&a恭喜你击败了BOSS[&r猪鲨公爵&a]!您的战利品已经放在背包里了。" to {_player}
				give {_drop} to {_player}
			else:
				send "&a恭喜你击败了BOSS[&r猪鲨公爵&a]!您的背包空间不足以容纳战利品，请迅速拾起脚下的战利品袋，以免丢失。" to {_player}
				drop {_drop} at {_player}.getEyeLocation() without velocity
		else:
			send "&aBOSS 猪鲨公爵 已经被击败。很遗憾，您的输出不足以获得一份战利品。" to {_player}

function handleDukeFishronPerk(index: number, loc: location, zsgj: entity):
	set {_target} to metadata "target" of {_zsgj}
	{_target} is set
	set {_healthRatio} to (health of {_zsgj}) / (max health of {_zsgj})
	if {_index} = 1:
		#bubble
		spawn 1 slime at location of {_zsgj}
		set {_entity} to spawned entity
		slimeResize({_entity}, 2)
		set {_entity}.getHandle().noclip to true
		set {_attrMap} to (metadata "attrMap" of {_zsgj}).clone()
		{_attrMap}.put("damageMulti", 1.1)
		set max health of {_entity} to 1
		set health of {_entity} to 1
		set metadata "attrMap" of {_entity} to {_attrMap}
		set gravity of {_entity} to off
		add "destroyOnDamage" to scoreboard tags of {_entity}
		{_entity}.setCustomName("猪鲨泡泡")
		set {_v} to {_loc}.subtract(location of {_zsgj}).toVector()
		if vector length of {_v} > 0:
			set vector length of {_v} to min(1.5, (vector length of {_v}) / 27)
		loop 100 times:
			if health of {_entity} <= 0:
				stop loop
			clear {_target}
			set {_target} to metadata "target" of {_zsgj}
			if (block at {_entity}).getType().isSolid() is true:
				stop loop
			if {_target} is set:
				set {_dV} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
				if vector length of {_dV} > 0:
					set vector length of {_dV} to vector length of {_v} / 5
				set {_speed} to vector length of {_v}
				{_v}.add({_dV})
				if vector length of {_v} > 0:
					set vector length of {_v} to {_speed} * 0.99
				set velocity of {_entity} to {_v}
			wait 2 ticks
		{_entity}.remove()
	else if {_index} = 2:
		#sharkron
		spawn 1 slime at {_loc}
		set {_entity} to spawned entity
		slimeResize({_entity}, 3)
		set {_entity}.getHandle().noclip to true
		set {_attrMap} to (metadata "attrMap" of {_zsgj}).clone()
		if {_healthRatio} > 0.5:
			{_attrMap}.put("damage", 300)
			{_attrMap}.put("damageMulti", 1)
		else:
			{_attrMap}.put("damage", 360)
			{_attrMap}.put("damageMulti", 1)
		{_attrMap}.put("defence", 200)
		{_attrMap}.put("defenceMulti", 1)
		set max health of {_entity} to 300
		set health of {_entity} to 300
		set metadata "attrMap" of {_entity} to {_attrMap}
		add "isMonster" to scoreboard tags of {_entity}
		{_entity}.setCustomName("龙卷鲨")
		set {_v} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
		if vector length of {_v} < 0.1:
			set {_v} to vector(0, 1, 0)
		set vector length of {_v} to 2.25
		set velocity of {_entity} to {_v}
		set gravity of {_entity} to off
		loop 75 times:
			if health of {_entity} <= 0:
				stop trigger
			if {_entity}.isDead() is true:
				stop trigger
			set {_entityLoc} to location of {_entity}
			set {_v} to velocity of {_entity}
			set {_subtractV} to {_v}.clone()
			set vector length of {_subtractV} to 7
			set {_bi} to new BlockIterator((world of {_entity}), {_entityLoc}.subtract({_subtractV}).toVector(), {_v}, 0, 8)
			while {_bi}.hasNext():
				set {_bNext} to {_bi}.next()
				if {_bNext}.getType().isSolid() is true:
					set health of {_entity} to 0
					stop trigger
			
			if loop-number is 10:
				set gravity of {_entity} to on
			else if loop-number > 15:
				subtract 0.15 from y component of {_v}
			set vector length of {_v} to 1.5
			set velocity of {_entity} to {_v}
			wait 3 ticks
		health of {_entity} > 0
		set health of {_entity} to 0
	else if {_index} = 3:
		#sharknado swirl
		spawn 1 slime at location of {_zsgj}
		set {_entity} to spawned entity
		{_entity}.setSize(2)
		set {_entity}.getHandle().noclip to true
		set {_attrMap} to (metadata "attrMap" of {_zsgj}).clone()
		{_attrMap}.put("damageMulti", 1.1)
		set metadata "attrMap" of {_entity} to {_attrMap}
		if {_healthRatio} < 0.5:
			add "isMonster" to scoreboard tags of {_entity}
			set gravity of {_entity} to off
			set {_loopTime} to 100
		else:
			add "isNPC" to scoreboard tags of {_entity}
			set {_loopTime} to 12
		add "noDamage" to scoreboard tags of {_entity}
		{_entity}.setCustomName("水螺旋")
		set {_v} to {_loc}.subtract(location of {_zsgj}).toVector()
		if vector length of {_v} < 0.1:
			set {_v} to vector(0, 1, 0)
		set vector length of {_v} to 0.35
		set velocity of {_entity} to {_v}
		loop {_loopTime} times:
			if health of {_entity} <= 0:
				stop trigger
			if {_entity}.isDead() is true:
				stop trigger
			clear {_target}
			set {_target} to metadata "target" of {_zsgj}
			
			if {_healthRatio} >= 0.5:
				set {_v} to velocity of {_entity}
			set {_entityLoc} to location of {_entity}
			set {_subtractV} to {_v}.clone().multiply(2)
			if {_healthRatio} < 0.5:
				set vector length of {_subtractV} to 1.5
				set {_bi} to new BlockIterator((world of {_entity}), {_entityLoc}.subtract({_subtractV}).toVector(), {_v}, 0, 2)
			else:
				set {_bi} to new BlockIterator((world of {_entity}), {_entityLoc}.subtract({_subtractV}).toVector(), {_v}, 0, ceil(vector length of {_v}) * 2 + 1)
			while {_bi}.hasNext():
				set {_bNext} to {_bi}.next()
				if {_bNext} is not air:
					teleport {_entity} to location of {_bNext}
					stop 2 loops
			
			if {_healthRatio} < 0.5:
				if {_target} is set:
					set {_dV} to (location of {_target}).subtract(location of {_entity}).toVector()
					if vector length of {_dV} > 0:
						set vector length of {_dV} to 1
					{_v}.add({_dV})
					if vector length of {_v} > 0:
						set vector length of {_v} to 1
					set velocity of {_entity} to {_v}
			wait 4 ticks
		{_entity}.remove()
		handleDukeFishronPerk(4, (location of {_entity}), {_zsgj})
	else:
		#sharknadoes
		set {_advanced} to new HashMap(2)
		{_advanced}.put("particleInterval", 0.75)
		{_advanced}.put("startLocation", {_loc})
		set {_particleColor} to new ArrayList(1)
		{_particleColor}.add("100|100|255")
		set {_yaw} to a random number between -180 and 180
		if {_healthRatio} < 0.5:
			set {_interval} to 2
		else:
			set {_interval} to 5
		wait 1 second
		loop 50 times:
			add 5 to {_yaw}
			set {_v} to new vector with yaw {_yaw} and pitch -85
			handleParticleLine({_v}, ((loop-number) / 2), 0.75, {_loc}, {_particleColor})
			if mod(loop-number, 5) = 0:
				handleStrikeLine({_zsgj}, {_yaw}, -85, ((loop-number) / 2), (a diamond), {_particleColor}, (new ArrayList()), true, {_advanced})
			if mod(loop-number, {_interval}) = 0:
				set {_dV} to {_v}.clone()
				set vector length of {_dV} to (loop-number) / 2.5
				handleDukeFishronPerk(2, {_loc}.clone().add({_dV}), {_zsgj})
			wait 4 ticks