import:
	java.util.ArrayList
	java.util.HashMap
	java.util.HashSet
	net.minecraft.server.v1_12_R1.BossBattle
	net.minecraft.server.v1_12_R1.BossBattle$BarColor
	net.minecraft.server.v1_12_R1.BossBattle$BarStyle
	net.minecraft.server.v1_12_R1.BossBattleServer
	net.minecraft.server.v1_12_R1.PathfinderGoalSelector
	org.bukkit.attribute.Attribute
	org.bukkit.craftbukkit.v1_11_R1.util.CraftChatMessage
	org.bukkit.entity.EntityType

on skript enable:
	set {versionTimeTicker} to 0
	set {fallenStars} to new ArrayList()
	worldBasicSettings()
on skript disable:
	removeFallenStars()
function worldBasicSettings():
	add 1 to {versionTimeTicker}
	set {_ver} to {versionTimeTicker}
	clear {event}
	clear {eventInfo}
	clear {worlds::*}
	add world("world") to {allWorlds::*}
	add world("world_nether") to {allWorlds::*}
	add world("zy") to {allWorlds::*}
	loop {allWorlds::*}:
		set {_world} to loop-value
		{_world}.setTime[long](0)
		{_world}.setGameRuleValue("doDaylightCycle", "false")
		{_world}.setGameRuleValue("doWeatherCycle", "false")
		{_world}.setKeepSpawnInMemory(false)
		{_world}.setGameRuleValue("doMobSpawning", "false")
		{_world}.setGameRuleValue("maxEntityCramming", "1")
		{_world}.setGameRuleValue("randomTickSpeed", "5")
	set {_world} to world("world")
	set {_wb} to {_world}.getWorldBorder()
	{_wb}.setCenter({_world}.getSpawnLocation())
	{_wb}.setDamageAmount(10)
	{_wb}.setSize(20000)
	set {attrMapFallenStar} to new HashMap()
	{attrMapFallenStar}.put("damage", 1000)
	{attrMapFallenStar}.put("damageType", "Arrow")
every 5 ticks:
	set {_world} to world("world")
	set {_time} to {_world}.getTime() + 3
	subtract mod({_time}, 3) from {_time}
	loop {allWorlds::*}:
		set {_w} to loop-value
		{_w}.setTime[long]({_time})
	if {_time} is between 13500 and 22500:
		loop all players:
			if chance of 0.005:
				set {_ply} to loop-player
				set {_spawnLoc} to (location of {_ply}).add((a random number between -60 and 60), 0, (a random number between -60 and 60))
				set {_spawnLoc} to (location of {_ply}).add((a random number between -6 and 6), 0, (a random number between -6 and 6))
				set y-coordinate of {_spawnLoc} to a random number between 300 and 400
				handleFallenStar({_spawnLoc})
	#ticking event
	if {event} is set:
		if {eventInfo} is not set:
			clear {event}
		else if {eventInfo}.getOrDefault("isInvasion", false) is false:
			{eventInfo}.put("progress", {eventInfo}.get("progress") + 1)
			if {eventInfo}.get("progress") >= {eventInfo}.get("progressMax"):
				if {event} is "史莱姆雨":
					broadcast "&a史莱姆不再从天而降."
				clear {event}
		else if {event} is "冰霜月" or "南瓜月":
			{eventInfo}.put("progress", {eventInfo}.get("progress") + 1)
			if {eventInfo}.get("progress") >= {eventInfo}.get("progressMax"):
				clear {event}
	#creating event
	if {_world}.getTime() is 22500:
		removeFallenStars()
		set {questFish} to a random text out of (yml nodes "questFish" from file "plugins/Data/fishing.yml")
		set {questFishCompleted} to new HashSet()
		#slime rain
		{event} is not set
		if chance of 0.05:
			reserveEvent("史莱姆雨", (a random integer between 0 and 1200), "&d&l史莱姆正在从天而降！")
			set {eventInfo} to new HashMap(5)
			{eventInfo}.put("progress", 0)
			{eventInfo}.put("progressMax", 3000)
			{eventInfo}.put("slimeKill", 0)
		#goblin army
		{event} is not set
		set {_chance} to 0.035
		set {_progress} to 40
		loop all players in {_world}:
			health of loop-player > 200
			add 40 to {_progress}
			metadata "tier" of loop-player >= 1
			set {_completed} to yml value "bossDefeated.GoblinArmy" from file "plugins/PlayerData/%name of loop-player%.yml"
			if {_completed} is not true:
				set {_chance} to 0.33
				stop loop
		if chance of {_chance}:
			broadcast "&d&l一支哥布林军团正在逼近..."
			reserveEvent("哥布林军团", (a random integer between 60 and 120), "&d&l哥布林军团来了！")
			set {eventInfo} to new HashMap(5)
			{eventInfo}.put("invadeProgress", 0)
			{eventInfo}.put("invadeProgressMax", {_progress})
			{eventInfo}.put("isInvasion", true)
		#solar eclipse
		{event} is not set
		if chance of 0.05:
			set {_canOccur} to false
			loop all players in {_world}:
				metadata "tier" of loop-player >= 4
				set {_canOccur} to true
				stop loop
			{_canOccur} is true
			broadcast "&a&l正在发生日食！"
			set {event} to "日食"
			set {eventInfo} to new HashMap(5)
			{eventInfo}.put("progress", 0)
			{eventInfo}.put("progressMax", 5000)
		{event} is not set
	else if {_world}.getTime() is 13500:
		#blood moon
		if chance of 0.05:
			set {_canOccur} to false
			loop all players in {_world}:
				max health of loop-player > 125
				set {_canOccur} to true
				stop loop
			{_canOccur} is true
			getMoonPhase() is not between 3 and 5
			broadcast "&d&l血月正在升起..."
			set {event} to "血月"
			set {eventInfo} to new HashMap(5)
			{eventInfo}.put("progress", 0)
			{eventInfo}.put("progressMax", 3000)
		#meteor shower
		{event} is not set
		set {_chanceMeteorShower} to 0.05
		loop all players:
			if loop-player has scoreboard tag "waitingForMeteorShower":
				set {_chanceMeteorShower} to 0.5
		if chance of {_chanceMeteorShower}:
			broadcast "&d&l正在发生陨石雨..."
			loop all players:
				if loop-player has scoreboard tag "waitingForMeteorShower":
					remove "waitingForMeteorShower" from scoreboard tags of loop-player
			set {event} to "陨石雨"
			set {eventInfo} to new HashMap(5)
			{eventInfo}.put("progress", 0)
			{eventInfo}.put("progressMax", 3000)

function handleFallenStar(spawnLoc: location):
	set {_velocity} to vector((a random number between 0.5 and -0.5), -2, (a random number between 0.5 and -0.5))
	set {_star} to (world of {_spawnLoc}).spawnEntity({_spawnLoc}, EntityType.SPLASH_POTION)
	{_star}.setCustomName("坠星")
	disguiseProjectile({_star})
	set velocity of {_star} to {_velocity}
	set {_collided} to new ArrayList()
	set metadata "collided" of {_star} to {_collided}
	set metadata "penetration" of {_star} to 99
	set metadata "attrMap" of {_star} to {attrMapFallenStar}
	add "isFallenStar" to scoreboard tags of {_star}
	add "ignoreCanDamageCheck" to scoreboard tags of {_star}
	set glowing of {_star} to on
	{fallenStars}.add({_star})
	while {_star}.isDead() is false:
		set velocity of {_star} to {_velocity}
		set {_toLoop} to (world of {_spawnLoc}).getNearbyEntities((location of {_star}), 2, 2, 2)
		loop ...{_toLoop}:
			set {_entity1} to loop-value
			if {_entity1} is not {_star}:
				checkCanDamage({_star}, {_entity1}) is true
				{_collided}.contains({_entity1}) is false
				handleDamage({_entity1}, {_star}, 1000, "Arrow")
				{_collided}.add({_entity1})
		wait 2 ticks
	loop {_starExtra::*}:
		(loop-value).remove()
function removeFallenStars():
	{fallenStars} is instance of ArrayList
	loop ...{fallenStars}:
		(loop-value).remove()
	{fallenStars}.clear()
function reserveEvent(event: text, wait: number, prompt: text):
	set {event} to "RESERVED"
	wait "%{_wait} * 5% ticks" parsed as timespan
	set {event} to {_event}
	broadcast {_prompt}
function tickEvent():
	wait 1 second
	set {_event} to {event}
	{_event} is "南瓜月" or "冰霜月"
	set {_tierMax} to {eventInfo}.getOrDefault("tierMax", 15)
	set {_bossbar} to new BossBattleServer(CraftChatMessage.fromString({_event}, true)[0], BarColor.WHITE, BarStyle.PROGRESS)
	{_bossbar}.setVisible(true)
	{eventInfo}.put("progressBar", {_bossbar})
	loop all players:
		{_bossbar}.addPlayer(loop-player.getHandle())
	set {_index} to 0
	while "%{event}%" is "%{_event}%":
		if {eventInfo}.get("tier") >= {_tierMax}:
			{_bossbar}.setProgress(1f)
		else:
			set {_progress} to ({eventInfo}.get("invadeProgress"))
			set {_progressMax} to ({eventInfo}.get("invadeProgressMax"))
			{_bossbar}.setProgress[float]({_progress} / {_progressMax})
		if mod({_index}, 20) = 0:
			handleEventBoss()
		add 1 to {_index}
		wait 5 ticks
	{_bossbar}.setVisible(false)
on join:
	{event} is "南瓜月" or "冰霜月"
	{eventInfo}.get("progressBar").addPlayer(player.getHandle())


function handleEventBoss():
	{event} is "冰霜月" or "南瓜月"
	set {_tier} to {eventInfo}.getOrDefault("tier", 1)
	set {_bossLimits::*} to ...(yml value "events.%{event}%.bossMax.%{_tier}%" from file "plugins/Data/setting.yml")
	if {eventInfo}.getOrDefault("numBoss1", 0) < {_bossLimits::1}:
		add "Boss1" to {_availableBoss::*}
	if {eventInfo}.getOrDefault("numBoss2", 0) < {_bossLimits::2}:
		add "Boss2" to {_availableBoss::*}
	if {eventInfo}.getOrDefault("numBoss3", 0) < {_bossLimits::3}:
		add "Boss3" to {_availableBoss::*}
	if size of {_availableBoss::*} = 0:
		stop trigger
	set {_bossType} to a random element out of {_availableBoss::*}
	if chance of 0.5:
		set {_world} to world("world")
	else:
		set {_world} to world("zy")
	loop all players in {_world}:
		metadata "tier" of loop-player >= 6
		y-coordinate of loop-player is between 50 and 150
		add loop-player to {_possiblePlayers::*}
	set {_target} to a random player out of {_possiblePlayers::*}
	set {_healthMulti} to (0.35 * ((size of {_possiblePlayers::*}) - 1)) + 1
	if size of {_possiblePlayers::*} >= 10:
		{_healthMulti} = ({_healthMulti} * 2 + 8) / 3
	set {_angle} to a random number between 0 and 360
	if chance of 0.5:
		set {_zOffset} to {_zOffset} * -1
	set {_loc} to (location of {_target}).add(sin({_angle}) * 26, 0, cos({_angle}) * 26)
	set {_loc} to (location of (the block 5 above highest solid block at {_loc}))
	{eventInfo}.put("num%{_bossType}%", {eventInfo}.getOrDefault("num%{_bossType}%", 0) + 1)
	if {event} is "南瓜月":
		if {_bossType} is "Boss1":
			spawn a slime at {_loc}
			set {_boss} to spawned entity
			slimeResize({_boss}, 15)
			{_boss}.setCustomName("哀木")
			set {_attrMap} to new HashMap(8)
			{_attrMap}.put("damage", 360)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("defence", 56)
			{_attrMap}.put("knockback", 4)
			{_attrMap}.put("knockbackResistance", 1)
			set {_attrMapProjectile} to new HashMap(5)
			{_attrMapProjectile}.put("damageType", "Arrow")
			{_attrMapProjectile}.put("knockback", 2)
			add "isMonster" to scoreboard tags of {_boss}
			set metadata "attrMap" of {_boss} to {_attrMap}
			set metadata "spawnEvent" of {_boss} to {event}
			set metadata "killProgress" of {_boss} to 150
			set max health of {_boss} to floor(31200 * {_healthMulti})
			set health of {_boss} to floor(31200 * {_healthMulti})
			{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.35d)
			apply potion of fire resistance without particles to {_boss} for 10 days
			set {_indexAI} to 0
			while health of {_boss} > 0:
				if checkBossTarget({_target}, {_boss}, false) is false:
					clear {_target}
					loop all players in radius 64 of {_boss}:
						metadata "tier" of loop-player >= 6
						y-coordinate of loop-player is between 50 and 150
						checkBossTarget(loop-player, {_boss}, false) is true
						set {_target} to loop-player
						stop loop
				if {_target} is not set:
					set max health of {_boss} to 1
					{_boss}.remove()
					stop loop
				if mod({_indexAI}, 5) = 3:
					{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0d)
				else if mod({_indexAI}, 5) = 4:
					if chance of 0.5:
						if (health of {_boss}) / (max health of {_boss}) > 0.25:
							{_attrMapProjectile}.put("damage", 400)
						else:
							{_attrMapProjectile}.put("damage", 600)
						set {_v} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
						if vector length of {_v} = 0:
							set {_v} to vector(0, 1, 0)
						set vector length of {_v} to 4
						loop 35 times:
							set {_velocity} to {_v}.clone().add(vector((a random number between -1 and 1), (a random number between -1 and 1), (a random number between -1 and 1)))
							set vector length of {_velocity} to 1.25
							set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapProjectile}, "烈焰木")
							set gravity of {_projectile} to off
							set metadata "penetration" of {_projectile} to 9
							add "isGranade" to scoreboard tags of {_projectile}
							projectileAI({_projectile}, "MAGIC")
							wait 3 ticks
							if health of {_boss} <= 0:
								stop loop
					else:
						if (health of {_boss}) / (max health of {_boss}) > 0.25:
							{_attrMapProjectile}.put("damage", 320)
						else:
							{_attrMapProjectile}.put("damage", 400)
						set {_v} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
						if vector length of {_v} = 0:
							set {_v} to vector(0, 1, 0)
						set vector length of {_v} to 4
						loop 20 times:
							set {_velocity} to {_v}.clone().add(vector((a random number between -1 and 1), (a random number between -0.5 and 1.5), (a random number between -1 and 1)))
							set vector length of {_velocity} to 1.75
							set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapProjectile}, "希腊烈火")
							set metadata "penetration" of {_projectile} to 99
							set metadata "Bounce" of {_projectile} to 1
							wait 4 ticks
							if health of {_boss} <= 0:
								stop loop
					{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.35d)
				add 1 to {_indexAI}
				wait 1 second
			if chance of (1 / max(11 - {_tier}, 1)):
				max health of {_boss} > 1
				if chance of 0.33:
					add getItem("阴森钩") to {_drops::*}
				else if chance of 0.5:
					add getItem("尖桩发射器") to {_drops::*}
					add getItem("尖桩:%a random integer between 30 and 60%") to {_drops::*}
				else:
					add getItem("死灵卷轴") to {_drops::*}
				loop {_drops::*}:
					drop loop-value at location of {_boss}
		else if {_bossType} is "Boss2":
			spawn a slime at {_loc}
			set {_boss} to spawned entity
			slimeResize({_boss}, 8)
			spawn a slime at {_loc}
			set {_hand1} to spawned entity
			slimeResize({_hand1}, 4)
			spawn a slime at {_loc}
			set {_hand2} to spawned entity
			slimeResize({_hand2}, 4)
			{_boss}.setCustomName("南瓜王")
			{_hand1}.setCustomName("南瓜王镰刀")
			{_hand2}.setCustomName("南瓜王镰刀&1")
			set {_attrMap} to new HashMap(8)
			{_attrMap}.put("damage", 150)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("defence", 72)
			{_attrMap}.put("knockback", 4)
			{_attrMap}.put("knockbackResistance", 1)
			set {_attrMapHand} to {_attrMap}.clone()
			{_attrMapHand}.put("damage", 260)
			set {_attrMapScythe} to new HashMap(5)
			{_attrMapScythe}.put("damage", 480)
			{_attrMapScythe}.put("damageType", "Melee")
			{_attrMapScythe}.put("knockback", 2)
			set {_attrMapProjectile} to {_attrMapScythe}.clone()
			{_attrMapProjectile}.put("damage", 320)
			add "isMonster" to scoreboard tags of {_boss}
			add "isMonster" to scoreboard tags of {_hand1}
			add "isMonster" to scoreboard tags of {_hand2}
			add "noDamage" to scoreboard tags of {_hand1}
			add "noDamage" to scoreboard tags of {_hand2}
			set metadata "spawnEvent" of {_boss} to {event}
			set metadata "killProgress" of {_boss} to 300
			set metadata "attrMap" of {_boss} to {_attrMap}
			set metadata "attrMap" of {_hand1} to {_attrMapHand}
			set metadata "attrMap" of {_hand2} to {_attrMapHand}
			set max health of {_boss} to floor(57200 * {_healthMulti})
			set health of {_boss} to floor(57200 * {_healthMulti})
			apply potion of fire resistance without particles to {_boss} for 10 days
			set gravity of {_boss} to off
			set gravity of {_hand1} to off
			set gravity of {_hand2} to off
			set {_boss}.getHandle().noclip to true
			set {_hand1}.getHandle().noclip to true
			set {_hand2}.getHandle().noclip to true
			set {_boss}.getHandle().goalSelector to new PathfinderGoalSelector({_boss}.getHandle().getWorld().methodProfiler)
			set {_hand1}.getHandle().goalSelector to new PathfinderGoalSelector({_hand1}.getHandle().getWorld().methodProfiler)
			set {_hand2}.getHandle().goalSelector to new PathfinderGoalSelector({_hand2}.getHandle().getWorld().methodProfiler)
			{_hand1}.setRemoveWhenFarAway(false)
			{_hand2}.setRemoveWhenFarAway(false)
			
			set {_indexAI} to 60
			while health of {_boss} > 0:
				if checkBossTarget({_target}, {_boss}, false) is false:
					clear {_target}
					loop all players in radius 64 of {_boss}:
						metadata "tier" of loop-player >= 6
						y-coordinate of loop-player is between 50 and 150
						checkBossTarget(loop-player, {_boss}, false) is true
						set {_target} to loop-player
						stop loop
				if {_target} is not set:
					set max health of {_boss} to 1
					{_boss}.remove()
					stop loop
				set {_index} to mod({_IndexAI}, 60)
				set {_targetLoc} to (location of {_target}).add(0, 8, 0)
				set {_vHead} to {_targetLoc}.subtract(location of {_boss}).toVector()
				if vector length of {_vHead} = 0:
					set {_vHead} to vector(0, 1, 0)
				if {_index} < 20:
					if {_index} = 0:
						{_boss}.setCustomName("南瓜王")
					set vector length of {_vHead} to min(vector length of {_vHead} / 10, 0.5)
					if mod({_index}, 10) < 5:
						if {_index} is 0 or 10:
							set {_vHand1} to (location of {_target}).subtract(location of {_hand1}).toVector()
							if vector length of {_vHand1} = 0:
								set {_vHand1} to vector(0, 1, 0)
							set vector length of {_vHand1} to 1.6
					else:
						set {_vHand1} to (location of {_target}).add(sin({_indexAI}) * 8, 6, cos({_indexAI}) * 8).subtract(location of {_hand1}).toVector()
						vector length of {_vHand1} > 0
						set vector length of {_vHand1} to min(vector length of {_vHand1} / 10, 0.25)
					if mod({_index} - 3, 10) < 5:
						if {_index} is 3 or 13:
							set {_vHand2} to (location of {_target}).subtract(location of {_hand2}).toVector()
							if vector length of {_vHand2} = 0:
								set {_vHand2} to vector(0, 1, 0)
							set vector length of {_vHand2} to 1.6
					else:
						set {_vHand2} to (location of {_target}).add(sin({_indexAI} + 180) * 8, 6, cos({_indexAI} + 180) * 8).subtract(location of {_hand2}).toVector()
						vector length of {_vHand2} > 0
						set vector length of {_vHand2} to min(vector length of {_vHand2} / 10, 0.25)
				else if {_index} < 40:
					if {_index} = 20:
						{_boss}.setCustomName("南瓜王&1")
					set vector length of {_vHead} to min(vector length of {_vHead} / 10, 0.35)
					set {_vHand1} to (location of {_target}).add(sin({_indexAI}) * 8, 6, cos({_indexAI}) * 8).subtract(location of {_hand1}).toVector()
					if vector length of {_vHand1} > 0:
						set vector length of {_vHand1} to min(vector length of {_vHand1} / 10, 0.25)
					set {_vHand2} to (location of {_target}).add(sin({_indexAI} + 180) * 8, 6, cos({_indexAI} + 180) * 8).subtract(location of {_hand2}).toVector()
					if vector length of {_vHand2} > 0:
						set vector length of {_vHand2} to min(vector length of {_vHand2} / 10, 0.25)
					if mod({_index}, 2) = 0:
						if mod({_index}, 4) = 0:
							spawn a slime at location of {_hand1}
						else:
							spawn a slime at location of {_hand2}
						set {_projectile} to spawned entity
						slimeResize({_projectile}, 4)
						set gravity of {_projectile} to off
						{_projectile}.setCustomName("火焰锄刀")
						set {_projectile}.getHandle().noclip to true
						set metadata "attrMap" of {_projectile} to {_attrMapScythe}
						add "isMonster" to scoreboard tags of {_projectile}
						add "noDamage" to scoreboard tags of {_projectile}
						set {_velocity} to (eye location of {_target}).subtract(eye location of {_projectile}).toVector()
						set vector length of {_velocity} to 0.1
						set velocity of {_projectile} to {_velocity}
						projectileAI({_projectile}, "MAGIC")
				else:
					if {_index} = 40:
						{_boss}.setCustomName("南瓜王&2")
					set vector length of {_vHead} to min(vector length of {_vHead} / 10, 0.15)
					set {_v} to vector(0, 0, 0)
					set {_projectile} to mobProjectile({_boss}, {_v}, {_attrMapProjectile}, "希腊烈火")
					set metadata "penetration" of {_projectile} to 99
					set metadata "Bounce" of {_projectile} to 1
				set velocity of {_boss} to {_vHead}
				set velocity of {_hand1} to {_vHand1}
				set velocity of {_hand2} to {_vHand2}
				add 1 to {_indexAI}
				wait 5 ticks
			set health of {_hand1} to 0
			set health of {_hand2} to 0
			if chance of (1 / max(11 - {_tier}, 1)):
				max health of {_boss} > 1
				if chance of 0.2:
					add getItem("无头骑士剑") to {_drops::*}
				else if chance of 0.25:
					add getItem("玉米糖步枪") to {_drops::*}
					add getItem("玉米糖:%a random integer between 50 and 100%") to {_drops::*}
				else if chance of 0.33:
					add getItem("杰克南瓜灯发射器") to {_drops::*}
					add getItem("爆炸杰克南瓜灯:%a random integer between 25 and 50%") to {_drops::*}
				else if chance of 0.5:
					add getItem("蝙蝠权杖") to {_drops::*}
				else:
					add getItem("死灵卷轴") to {_drops::*}
				loop {_drops::*}:
					drop loop-value at location of {_boss}
		else:
			spawn a slime at {_loc}
			set {_boss} to spawned entity
			slimeResize({_boss}, 6)
			{_boss}.setCustomName("无头骑士")
			set {_attrMap} to new HashMap(8)
			{_attrMap}.put("damage", 390)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("defence", 80)
			{_attrMap}.put("knockback", 3)
			{_attrMap}.put("knockbackResistance", 1)
			add "isMonster" to scoreboard tags of {_boss}
			set metadata "attrMap" of {_boss} to {_attrMap}
			set metadata "spawnEvent" of {_boss} to {event}
			set metadata "killProgress" of {_boss} to 50
			set max health of {_boss} to 30000
			set health of {_boss} to 30000
			{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(1d)
			apply potion of fire resistance without particles to {_boss} for 10 days
			apply potion of jump boost 3 without particles to {_boss} for 10 days
			while health of {_boss} > 0:
				if checkBossTarget({_target}, {_boss}, false) is false:
					clear {_target}
					loop all players in radius 64 of {_boss}:
						metadata "tier" of loop-player >= 6
						y-coordinate of loop-player is between 50 and 150
						checkBossTarget(loop-player, {_boss}, false) is true
						set {_target} to loop-player
						stop loop
				if {_target} is not set:
					set max health of {_boss} to 1
					{_boss}.remove()
					stop loop
				makeTarget({_boss}, {_target})
				wait 1 second
	else:
		if {_bossType} is "Boss1":
			spawn a slime at {_loc}
			set {_boss} to spawned entity
			slimeResize({_boss}, 15)
			{_boss}.setCustomName("常绿尖叫怪")
			set {_attrMap} to new HashMap(8)
			{_attrMap}.put("damage", 330)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("defence", 76)
			{_attrMap}.put("knockback", 4)
			{_attrMap}.put("knockbackResistance", 1)
			set {_attrMapProjectile} to new HashMap(5)
			{_attrMapProjectile}.put("damageType", "Arrow")
			{_attrMapProjectile}.put("knockback", 2)
			add "isMonster" to scoreboard tags of {_boss}
			set metadata "attrMap" of {_boss} to {_attrMap}
			set metadata "spawnEvent" of {_boss} to {event}
			set metadata "killProgress" of {_boss} to 100
			set max health of {_boss} to floor(33800 * {_healthMulti})
			set health of {_boss} to floor(33800 * {_healthMulti})
			{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.35d)
			set {_indexAI} to 0
			while health of {_boss} > 0:
				if checkBossTarget({_target}, {_boss}, false) is false:
					clear {_target}
					loop all players in radius 64 of {_boss}:
						metadata "tier" of loop-player >= 6
						y-coordinate of loop-player is between 50 and 150
						checkBossTarget(loop-player, {_boss}, false) is true
						set {_target} to loop-player
						stop loop
				if {_target} is not set:
					set max health of {_boss} to 1
					{_boss}.remove()
					stop loop
				if {_targetLoc} is set:
					set gravity of {_boss} to off
					set {_boss}.getHandle().noclip to true
					set {_dV} to {_targetLoc}.clone().subtract(location of {_boss}).toVector()
					if vector length of {_dV} > 16:
						set vector length of {_dV} to 1
					else:
						set vector length of {_dV} to vector length of {_dV} / 15
						set gravity of {_boss} to on
						set {_boss}.getHandle().noclip to false
					set velocity of {_boss} to {_dV}
				else:
					if distance between {_target} and {_boss} > 48:
						set {_targetLoc} to eye location of {_target}
					if mod({_indexAI}, 5) = 3:
						{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0d)
					else if mod({_indexAI}, 5) = 4:
						if chance of 0.5:
							{_attrMapProjectile}.put("damage", 344)
							set {_v} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
							if vector length of {_v} = 0:
								set {_v} to vector(0, 1, 0)
							set vector length of {_v} to 3
							loop 60 times:
								set {_velocity} to {_v}.clone().add(vector((a random number between -1 and 1), (a random number between -1 and 1), (a random number between -1 and 1)))
								set vector length of {_velocity} to 1.25
								set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapProjectile}, "松针")
								set gravity of {_projectile} to off
								set metadata "penetration" of {_projectile} to 9
								add "isGranade" to scoreboard tags of {_projectile}
								projectileAI({_projectile}, "MAGIC")
								wait 2 ticks
								if health of {_boss} <= 0:
									stop loop
						else:
							{_attrMapProjectile}.put("damage", 456)
							set {_v} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
							if vector length of {_v} = 0:
								set {_v} to vector(0, 1, 0)
							set vector length of {_v} to 4
							loop 10 times:
								set {_velocity} to {_v}.clone().add(vector((a random number between -1 and 1), (a random number between -0.5 and 1.5), (a random number between -1 and 1)))
								set vector length of {_velocity} to 1.5
								set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapProjectile}, "装饰")
								set metadata "penetration" of {_projectile} to 99
								set metadata "Bounce" of {_projectile} to 3
								wait 8 ticks
								if health of {_boss} <= 0:
									stop loop
						{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.35d)
				add 1 to {_indexAI}
				wait 1 second
			if chance of (1 / (21 - {_tier})):
				max health of {_boss} > 1
				if chance of 0.25:
					add getItem("圣诞树剑") to {_drops::*}
				else if chance of 0.33:
					add getItem("圣诞钩") to {_drops::*}
				else if chance of 0.5:
					add getItem("剃刀松") to {_drops::*}
				else:
					add getItem("喜庆之翼") to {_drops::*}
				loop {_drops::*}:
					drop loop-value at location of {_boss}
		else if {_bossType} is "Boss2":
			spawn a slime at {_loc}
			set {_boss} to spawned entity
			slimeResize({_boss}, 15)
			{_boss}.setCustomName("圣诞坦克")
			set {_attrMap} to new HashMap(8)
			{_attrMap}.put("damage", 360)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("defence", 112)
			{_attrMap}.put("knockback", 4)
			{_attrMap}.put("knockbackResistance", 1)
			set {_attrMapBullet} to new HashMap(5)
			{_attrMapBullet}.put("damage", 288)
			{_attrMapBullet}.put("damageType", "Bullet")
			{_attrMapBullet}.put("knockback", 2)
			set {_attrMapSpike} to {_attrMapBullet}.clone()
			{_attrMapSpike}.put("damage", 640)
			set {_attrMapMissle} to {_attrMapBullet}.clone()
			{_attrMapMissle}.put("damage", 336)
			add "isMonster" to scoreboard tags of {_boss}
			set metadata "attrMap" of {_boss} to {_attrMap}
			set metadata "spawnEvent" of {_boss} to {event}
			set metadata "killProgress" of {_boss} to 200
			set max health of {_boss} to floor(46800 * {_healthMulti})
			set health of {_boss} to floor(46800 * {_healthMulti})
			{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.35d)
			set {_indexBullet} to 0
			set {_indexSpike} to 0
			set {_indexMissle} to 0
			while health of {_boss} > 0:
				if checkBossTarget({_target}, {_boss}, false) is false:
					clear {_target}
					loop all players in radius 64 of {_boss}:
						metadata "tier" of loop-player >= 6
						y-coordinate of loop-player is between 50 and 150
						checkBossTarget(loop-player, {_boss}, false) is true
						set {_target} to loop-player
						stop loop
				if {_target} is not set:
					set max health of {_boss} to 1
					{_boss}.remove()
					stop loop
				if {_indexBullet} > 0:
					set {_velocity} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
					set vector length of {_velocity} to 1.25
					set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapBullet}, "火枪子弹")
					set gravity of {_projectile} to off
					projectileAI({_projectile}, "GUN")
				if {_indexSpike} > 0:
					loop 10 times:
						set {_velocity} to vector((a random number between -4 and 4), 3, (a random number between -4 and 4))
						set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapSpike}, "尖刺球")
						set metadata "Bounce" of {_projectile} to 10
				if {_indexMissle} > 0:
					set {_v} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
					if vector length of {_v} = 0:
						set {_v} to vector(0, 1, 0)
					set vector length of {_v} to 7
					loop 20 times:
						set {_velocity} to {_v}.clone().add(vector((a random number between -1 and 1), (a random number between -1 and 1), (a random number between -1 and 1)))
						set vector length of {_velocity} to 1
						set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapMissle}, "红烟花火箭")
						set gravity of {_projectile} to off
						add "isGranade" to scoreboard tags of {_projectile}
						projectileAI({_projectile}, "MAGIC")
				subtract 1 from {_indexBullet}
				subtract 1 from {_indexSpike}
				subtract 1 from {_indexMissle}
				set {_healthRatio} to (health of {_boss}) / (max health of {_boss})
				if {_healthRatio} > 0.75:
					if {_indexBullet} < -50:
						set {_indexBullet} to 33
					if {_indexSpike} < -66:
						set {_indexSpike} to 1
					if {_indexMissle} < -133:
						set {_indexMissle} to 1
				else if {_healthRatio} > 0.5:
					if {_indexBullet} < -36:
						set {_indexBullet} to 33
					if {_indexSpike} < -50:
						set {_indexSpike} to 1
					if {_indexMissle} < -100:
						set {_indexMissle} to 1
				else if {_healthRatio} > 0.25:
					if {_indexBullet} < -25:
						set {_indexBullet} to 33
					if {_indexSpike} < -35:
						set {_indexSpike} to 1
					if {_indexMissle} < -75:
						set {_indexMissle} to 1
				else:
					if {_indexBullet} < -20:
						set {_indexBullet} to 33
					if {_indexSpike} < -25:
						set {_indexSpike} to 1
					if {_indexMissle} < -50:
						set {_indexMissle} to 1
				wait 3 ticks
			if chance of (1 / (21 - {_tier})):
				max health of {_boss} > 1
				if chance of 0.5:
					add getItem("链式机枪") to {_drops::*}
				else:
					add getItem("精灵熔枪") to {_drops::*}
				loop {_drops::*}:
					drop loop-value at location of {_boss}
		else:
			spawn a slime at {_loc}
			set {_boss} to spawned entity
			slimeResize({_boss}, 6)
			{_boss}.setCustomName("冰雪女王")
			set {_attrMap} to new HashMap(8)
			{_attrMap}.put("damage", 360)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("defence", 76)
			{_attrMap}.put("knockback", 4)
			{_attrMap}.put("knockbackResistance", 1)
			set {_attrMapWave} to new HashMap(5)
			{_attrMapWave}.put("damage", 336)
			{_attrMapWave}.put("damageType", "Magic")
			{_attrMapWave}.put("knockback", 2)
			set {_attrMapShard} to {_attrMapWave}.clone()
			{_attrMapShard}.put("damage", 296)
			add "isMonster" to scoreboard tags of {_boss}
			set {_boss}.getHandle().noclip to true
			set gravity of {_boss} to off
			set metadata "attrMap" of {_boss} to {_attrMap}
			set metadata "spawnEvent" of {_boss} to {event}
			set metadata "killProgress" of {_boss} to 300
			set max health of {_boss} to floor(88400 * {_healthMulti})
			set health of {_boss} to floor(88400 * {_healthMulti})
			{_boss}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.35d)
			set {_indexAI} to 0
			while health of {_boss} > 0:
				if checkBossTarget({_target}, {_boss}, false) is false:
					clear {_target}
					loop all players in radius 64 of {_boss}:
						metadata "tier" of loop-player >= 6
						y-coordinate of loop-player is between 50 and 150
						checkBossTarget(loop-player, {_boss}, false) is true
						set {_target} to loop-player
						stop loop
				if {_target} is not set:
					set max health of {_boss} to 1
					{_boss}.remove()
					stop loop
				set {_AI} to mod({_indexAI}, 100)
				if {_AI} < 40:
					mod({_AI}, 10) = 0
					set {_v} to (location of {_target}).add(0, 15, 0).subtract(location of {_boss}).toVector()
					if vector length of {_v} = 0:
						set {_v} to vector(1, 0, 0)
					if pitch of {_v} > 20:
						set pitch of {_v} to 20
					else if pitch of {_v} < -20:
						set pitch of {_v} to -20
					set vector length of {_v} to 1
					set velocity of {_boss} to {_v}
					spawn a slime at location of {_boss}
					set {_projectile} to spawned entity
					slimeResize({_projectile}, 4)
					set gravity of {_projectile} to off
					{_projectile}.setCustomName("寒霜波")
					set {_projectile}.getHandle().noclip to true
					set metadata "attrMap" of {_projectile} to {_attrMapWave}
					add "isMonster" to scoreboard tags of {_projectile}
					add "noDamage" to scoreboard tags of {_projectile}
					set {_velocity} to (eye location of {_target}).subtract(eye location of {_projectile}).toVector()
					set vector length of {_velocity} to 1.25
					set velocity of {_projectile} to {_velocity}
					projectileAI({_projectile}, "MAGIC")
				else if {_AI} < 70:
					set {_v} to (location of {_target}).add(0, 15, 0).subtract(location of {_boss}).toVector()
					if vector length of {_v} = 0:
						set {_v} to vector(1, 0, 0)
					set vector length of {_v} to vector length of {_v} / 6
					set velocity of {_boss} to {_v}
					mod({_AI}, 3) = 0
					mobProjectile({_boss}, vector(0, -0.25, 0), {_attrMapShard}, "寒霜碎块")
				else:
					set velocity of {_boss} to vector(0, 0, 0)
					set {_velocity} to (eye location of {_target}).subtract(eye location of {_boss}).toVector()
					if vector length of {_velocity} = 0:
						set {_velocity} to vector(0, -1, 0)
					set vector length of {_velocity} to 3
					{_velocity}.add(vector((a random number between 2 and -2), (a random number between 2 and -2), (a random number between 2 and -2)))
					set vector length of {_velocity} to 1.6
					set {_projectile} to mobProjectile({_boss}, {_velocity}, {_attrMapShard}, "寒霜碎块")
				add 1 to {_indexAI}
				wait 3 ticks
			if chance of (1 / (21 - {_tier})):
				max health of {_boss} > 1
				if chance of 0.33:
					add getItem("北极") to {_drops::*}
				else if chance of 0.5:
					add getItem("雪人炮") to {_drops::*}
				else:
					add getItem("暴雪法杖") to {_drops::*}
				loop {_drops::*}:
					drop loop-value at location of {_boss}
	{eventInfo}.put("num%{_bossType}%", {eventInfo}.getOrDefault("num%{_bossType}%", 0) - 1)
		