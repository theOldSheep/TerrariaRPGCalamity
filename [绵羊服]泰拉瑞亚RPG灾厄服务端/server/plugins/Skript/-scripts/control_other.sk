import:
	java.io.File
	java.util.ArrayList
	java.util.HashMap
	java.util.HashSet
	lk.vexview.api.VexViewAPI
	lk.vexview.event.ButtonClickEvent
	lk.vexview.event.gui.VexGuiCloseEvent
	lk.vexview.event.VexSlotClickEvent
	lk.vexview.gui.components.VexButton
	lk.vexview.gui.components.VexScrollingList
	lk.vexview.gui.components.VexSlot
	lk.vexview.gui.components.VexText
	lk.vexview.gui.VexGui
	lk.vexview.potions.VexPotion
	net.minecraft.server.v1_12_R1.PathfinderGoalSelector
	org.bukkit.attribute.Attribute
	org.bukkit.Bukkit
	org.bukkit.Color as BukkitColor
	org.bukkit.entity.EntityType
	org.bukkit.entity.HumanEntity
	org.bukkit.entity.Item
	org.bukkit.event.block.BlockBreakEvent
	org.bukkit.event.entity.EntityShootBowEvent
	org.bukkit.event.entity.ProjectileLaunchEvent
	org.bukkit.event.Event$Result as Result
	org.bukkit.event.player.PlayerDropItemEvent
	org.bukkit.event.player.PlayerItemDamageEvent
	org.bukkit.event.entity.PlayerLeashEntityEvent
	org.bukkit.event.player.PlayerVelocityEvent
	org.bukkit.event.vehicle.VehicleEntityCollisionEvent
	org.bukkit.inventory.ItemStack
	org.bukkit.Material
	org.bukkit.potion.PotionEffectType
	org.bukkit.util.Vector

on skript start:
	set {playerAttrMap} to new HashMap(60)
	{playerAttrMap}.put("armorPenetration", 0)
	{playerAttrMap}.put("ammoConsumptionRate", 0.8)
	{playerAttrMap}.put("arrowConsumptionRate", 1)
	{playerAttrMap}.put("bounce", 0)
	{playerAttrMap}.put("buffInflict", "ARLST")
	{playerAttrMap}.put("buffInflictMagic", "ARLST")
	{playerAttrMap}.put("buffInflictMelee", "ARLST")
	{playerAttrMap}.put("buffInflictRanged", "ARLST")
	{playerAttrMap}.put("crit", 0)
	{playerAttrMap}.put("critRanged", 0)
	{playerAttrMap}.put("damage", 0)
	{playerAttrMap}.put("damageArrowMulti", 1)
	{playerAttrMap}.put("damageBulletMulti", 1)
	{playerAttrMap}.put("damageMagicMulti", 1)
	{playerAttrMap}.put("damageMeleeMulti", 1)
	{playerAttrMap}.put("damageMulti", 1)
	{playerAttrMap}.put("damageRangedMulti", 1)
	{playerAttrMap}.put("damageRocketMulti", 1)
	{playerAttrMap}.put("damageSummonMulti", 0.75)
	{playerAttrMap}.put("damageTakenMulti", 1)
	{playerAttrMap}.put("damageType", "Melee")
	{playerAttrMap}.put("defence", 0)
	{playerAttrMap}.put("defenceMulti", 1)
	{playerAttrMap}.put("healthMulti", 1)
	{playerAttrMap}.put("invulnerabilityTick", 10)
	{playerAttrMap}.put("knockback", 0)
	{playerAttrMap}.put("knockbackResistance", 0)
	{playerAttrMap}.put("knockbackMeleeMulti", 1)
	{playerAttrMap}.put("knockbackMulti", 1)
	{playerAttrMap}.put("manaRegen", 4)
	{playerAttrMap}.put("manaRegenMulti", 1)
	{playerAttrMap}.put("manaUse", 0)
	{playerAttrMap}.put("manaUseMulti", 1)
	{playerAttrMap}.put("maxHealthMulti", 1)
	{playerAttrMap}.put("meleeReachMulti", 1)
	{playerAttrMap}.put("minionLimit", 2)
	{playerAttrMap}.put("mobLimit", 15)
	{playerAttrMap}.put("mobSpawnRate", 0.25)
	{playerAttrMap}.put("mobSpawnRateMulti", 1)
	{playerAttrMap}.put("penetration", 0)
	{playerAttrMap}.put("powerPickaxe", 0)
	{playerAttrMap}.put("projectileSpeed", 0)
	{playerAttrMap}.put("projectileSpeedMulti", 1)
	{playerAttrMap}.put("projectileSpeedArrowMulti", 1)
	{playerAttrMap}.put("regen", 2)
	{playerAttrMap}.put("regenMulti", 1)
	{playerAttrMap}.put("sentryLimit", 1)
	{playerAttrMap}.put("speed", 0.2)
	{playerAttrMap}.put("speedMulti", 1)
	{playerAttrMap}.put("useTime", 0)
	{playerAttrMap}.put("useTimeMagicMulti", 1)
	{playerAttrMap}.put("useTimeMeleeMulti", 1)
	{playerAttrMap}.put("useTimeMulti", 1)
	{playerAttrMap}.put("useTimeRangedMulti", 1)

	Bukkit.clearRecipes()
	
	set {BOSS} to new HashMap()
	
	set {_items::*} to yml nodes "" from file "plugins/Data/items.yml"
	set {_craftStations::*} to yml nodes "" from file "plugins/Data/recipes.yml"
	set {Items} to new HashMap(size of {_items::*} * 2)
	loop {_items::*}:
		set {_item} to getRawItemFromYML(loop-value)
		set {_item} to 1 of {_item}
		if "%{_item}.getType()%" is "ARROW" or "SLIME_BALL" or "BLAZE_POWDER" or "FLINT":
			clear {_lore}
			set {_lore} to {_item}.getItemMeta().getLore()
			if {_lore} is set:
				set {_lore1} to trimText(line 1 of lore of {_item})
				if {_lore1} is "[装备]" or "[饰品]":
					{_lore}.add(1, "&r[弹药]")
				else:
					{_lore}.add(0, "&r[弹药]")
				set lore of {_item} to ...{_lore}
			else:
				set line 1 of lore of {_item} to "&r[弹药]"
		{Items}.put((loop-value), {_item})
	set {_materials} to new HashSet()
	loop {_craftStations::*}:
		set {_block} to loop-value
		set {_nodes::*} to yml nodes "%{_block}%" from file "plugins/Data/recipes.yml"
		loop {_nodes::*}:
			set {_currMaterials} to yml value "%{_block}%.%loop-value-2%.requireItem" from file "plugins/Data/recipes.yml"
			loop ...{_currMaterials}:
				set {_itemInfo} to loop-value-3
				if {_itemInfo} contains ":":
					set {_itemInfo} to {_itemInfo}.split(":")[0]
				{_materials}.add({_itemInfo})
	loop ...{_materials}:
		set {_mat} to loop-value
		set {_item} to air
		set {_item} to {Items}.get({_mat})
		set {_item} to 1 of {_item}
		clear {_lore}
		set {_lore} to {_item}.getItemMeta().getLore()
		if {_lore} is set:
			set {_lore1} to trimText(line 1 of lore of {_item})
			if {_lore1} is "[装备]" or "[饰品]":
				{_lore}.add(1, "&r[材料]")
			else:
				{_lore}.add(0, "&r[材料]")
			set lore of {_item} to ...{_lore}
		else:
			set line 1 of lore of {_item} to "&r[材料]"
		{Items}.put({_mat}, {_item})
	
	set {CraftingGUI} to new HashMap()
	loop {_craftStations::*}:
		set {_level} to 1
		set {_levelMax} to 1
		while {_level} <= {_levelMax}:
			set {_gui} to new VexGui("https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", 0, 0, 200, 150)
			set {_block} to loop-value
			set {_btns} to new ArrayList()
			set {_nodes::*} to yml nodes "%{_block}%" from file "plugins/Data/recipes.yml"
			set {_index} to 1
			set {_indexDisplay} to 1
			loop {_nodes::*}:
				if yml value "%{_block}%.%loop-index-2%.requireLevel" from file "plugins/Data/recipes.yml" <= {_level}:
					set {_itemStack} to yml value "%{_block}%.%loop-index-2%.resultItem" from file "plugins/Data/recipes.yml"
					set {_id} to loop-index-2 parsed as number
					set {_itemStack} to getRawItem({_itemStack})
					set {_comp} to new VexSlot({_id}, 5, (({_indexDisplay} * 20) - 20), {_itemStack})
					{_btns}.add({_comp})
					add 1 to {_indexDisplay}
				else:
					set {_levelMax} to yml value "%{_block}%.%loop-index-2%.requireLevel" from file "plugins/Data/recipes.yml"
				add 1 to {_index}
			set {_SL} to new VexScrollingList(({_gui}.getWidth() * 0.75), 17, 22, ({_gui}.getHeight() - 34), ({_btns}.size() * 20))
			set {_iterator} to {_btns}.iterator()
			while {_iterator}.hasNext() is true:
				{_SL}.addComponent({_iterator}.next())
			{_gui}.addComponent({_SL})
			{_gui}.addComponent(new VexButton("CRAFT", "选择配方", "https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", "https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", {_gui}.getWidth() - 120, {_gui}.getHeight() - 50, 35, 17 + {_level}))
			{_gui}.addComponent(new VexButton("CRAFT_ALL", "选择配方", "https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", "https://static.wikia.nocookie.net/terraria_gamepedia/images/1/1e/Hallow_background_2.png", {_gui}.getWidth() - 60, {_gui}.getHeight() - 50, 35, 17 + {_level}))
			{CraftingGUI}.put("%{_block}%_%{_level}%", {_gui})
			{CraftingGUI}.put("%{_block}%_%{_level}%_slot", {_index})
			add 1 to {_level}
	

on first join:
	set slot 0 of player to getItem("铜质短剑")
	set slot 1 of player to getItem("铜镐")
	set slot 4 of player to getItem("火花魔棒")
	set slot 5 of player to getItem("新手版挥发明胶")
	set slot 7 of player to getItem("木弓")
	set slot 8 of player to getItem("木箭:30")
	set helmet of player to getItem("木头盔")
	set chestplate of player to getItem("木胸甲")
	set leggings of player to getItem("木护胫")
	add "useLocalSprite" to scoreboard tags of player
on join:
	set {_att} to player.addAttachment(Bukkit.getPluginManager().getPlugin("Skript"))
	add "chatitem.use" to {_perms::*}
	add "essentials.warp" to {_perms::*}
	add "essentials.seen" to {_perms::*}
	add "essentials.seen.ip" to {_perms::*}
	add "essentials.seen.location" to {_perms::*}
	add "essentials.home" to {_perms::*}
	add "essentials.sethome" to {_perms::*}
	add "essentials.sethome.multiple" to {_perms::*}
	add "essentials.delhome" to {_perms::*}
	loop {_perms::*}:
		{_att}.setPermission(loop-value, true)
	set player list name of player to "&c<红队>&r%name of player%"
	set {_filePath} to "plugins/PlayerData/%name of player%.yml"
	set {_file} to new File({_filePath})
	if {_file}.exists() is not true:
		set {_index} to {_filePath}.lastIndexOf(File.separator)
		if {_index} >= 0:
			set {_folder} to new File({_filePath}.substring(0, {_index}))
			if {_folder}.exists() is false:
				{_folder}.mkdirs()
		{_file}.createNewFile()
	set {_tier} to yml value "stats.tier" from file {_filePath}
	if {_tier} is not set:
		set yml value "stats.tier" from file {_filePath} to 0
		set {_tier} to 0
	set metadata "tier" of player to {_tier}
	
	if player doesn't have metadata "respawnCD":
		set gamemode of player to survival
	else if metadata "respawnCD" of player <= 0:
		set gamemode of player to survival
	else:
		set gamemode of player to spectator
	
	if yml value "stats.maxAccessories" from file {_filePath} is not set:
		set yml value "stats.maxAccessories" from file {_filePath} to 5
	
	resetPlayerStats(player)
	threadBGM(player)
	threadBackground(player)
	loadInventories(player)
	wait 1 tick
	player.getAttribute(Attribute.GENERIC_ATTACK_SPEED).setBaseValue(114514)
	setPlayerStats(player)
	loop player's scoreboard tags:
		loop-value starts with "temp"
		remove loop-value from scoreboard tags of player
	add "unauthorized" to scoreboard tags of player
	set {_index} to 0
	while player is online:
		wait 1 second
		add 1 to {_index}
		mod({_index}, 15) = 0
		saveInventories(player)

on consume:
	cancel event
on hunger level change:
	cancel event
on PlayerLeashEntityEvent:
	cancel event

on ButtonClickEvent:
	set {_station} to metadata "craftingStation" of player
	if {_station} is not "CLOSED":
		if event.getButton().getName() is "点我合成":
			set metadata "useCD" of player to true
			send "&a正在处理合成请求中...." to player
			set {_recipeID} to metadata "recipeNumber" of player
			set metadata "craftingStation" of player to "CLOSED"
			set {_requirement} to new HashMap()
			set {_index} to metadata "recipeNumber" of player
			set {_ingredient} to yml value "%{_station}%.%{_recipeID}%.requireItem" from file "plugins/Data/recipes.yml"
			set {_iterator} to {_ingredient}.iterator()
			while {_iterator}.hasNext() is true:
				set {_split} to {_iterator}.next()
				if {_split} contains ":":
					set {_key} to {_split}.split(":")[0]
					set {_amount} to {_split}.split(":")[1] parsed as integer
				else:
					set {_key} to {_split}
					set {_amount} to 1
				set {_key} to trimText(yml value "%{_key}%.name" from file "plugins/Data/items.yml")
				if try {_requirement}.containsKey({_key}) is false:
					{_requirement}.put({_key}, {_amount})
				else:
					{_requirement}.put({_key}, {_amount} + ({_requirement}.get({_key})))
			set {_refound} to new ArrayList()
			loop 36 times:
				clear {_name}
				set {_name} to name of slot (loop-number - 1) of player's inventory
				if {_name} contains "的 ":
					set {_name} to {_name}.split("的 ")[1]
				set {_name} to trimText({_name})
				if try {_requirement}.containsKey({_name}) is true:
					if {_requirement}.get({_name}) >= item amount of slot (loop-number - 1) of player's inventory:
						{_refound}.add((item amount of slot (loop-number - 1) of player's inventory) of slot (loop-number - 1) of player's inventory)
						{_requirement}.put({_name}, ({_requirement}.get({_name}) - item amount of slot (loop-number - 1) of player's inventory))
						set slot (loop-number - 1) of player's inventory to air
					else:
						{_refound}.add({_requirement}.get({_name}) of slot (loop-number - 1) of player's inventory)
						remove {_requirement}.get({_name}) of slot (loop-number - 1) of player's inventory from slot (loop-number - 1) of player's inventory
						{_requirement}.put({_name}, 0)
					if {_requirement}.get({_name}) <= 0:
						{_requirement}.remove({_name})
						if {_requirement}.size() = 0:
							stop loop
			if {_requirement}.size() > 0:
				send "&c材料不足...." to player
				set {_index} to 0
				while {_index} < {_refound}.size():
					giveItem(player, {_refound}.get({_index}))
					add 1 to {_index}
				set metadata "useCD" of player to false
			else:
				send "&a合成成功！~" to player
				giveItem(player, getItem(yml value "%{_station}%.%{_recipeID}%.resultItem" from file "plugins/Data/recipes.yml"))
				set metadata "useCD" of player to false
			{_recipeID} is metadata "recipeNumber" of player
			set metadata "craftingStation" of player to {_station}
		else if event.getButton().getName() is "合成全部":
			set metadata "useCD" of player to true
			send "&a正在处理合成请求中...." to player
			set {_recipeID} to metadata "recipeNumber" of player
			set metadata "craftingStation" of player to "CLOSED"
			set {_requirement} to new HashMap()
			set {_index} to metadata "recipeNumber" of player
			#init ingredient map
			set {_ingredient} to yml value "%{_station}%.%{_recipeID}%.requireItem" from file "plugins/Data/recipes.yml"
			set {_iterator} to {_ingredient}.iterator()
			while {_iterator}.hasNext() is true:
				set {_split} to {_iterator}.next()
				if {_split} contains ":":
					set {_key} to {_split}.split(":")[0]
					set {_amount} to {_split}.split(":")[1] parsed as integer
				else:
					set {_key} to {_split}
					set {_amount} to 1
				set {_key} to trimText(yml value "%{_key}%.name" from file "plugins/Data/items.yml")
				if try {_requirement}.containsKey({_key}) is false:
					{_requirement}.put({_key}, {_amount})
				else:
					{_requirement}.put({_key}, {_amount} + ({_requirement}.get({_key})))
			#init ingredient amount map
			set {_ingredientAmount} to new HashMap()
			loop 36 times:
				clear {_name}
				set {_name} to name of slot (loop-number - 1) of player's inventory
				if {_name} contains "的 ":
					set {_name} to {_name}.split("的 ")[1]
				set {_name} to trimText({_name})
				if try {_requirement}.containsKey({_name}) is true:
					{_ingredientAmount}.put({_name}, {_ingredientAmount}.getOrDefault({_name}, 0) + item amount of slot (loop-number - 1) of player's inventory)
			set {_craftAmount} to 999999
			#find max amount craftable
			loop ...({_requirement}.keySet()):
				set {_amountAvailable} to {_ingredientAmount}.getOrDefault(loop-value, 0)
				set {_craftAmount} to min({_craftAmount}, floor({_amountAvailable} / ({_requirement}.get(loop-value))))
			if {_craftAmount} <= 0:
				send "&c材料不足...." to player
				set metadata "useCD" of player to false
			else if {_craftAmount} > 99999:
				send "&c配方信息出现错误...." to player
				set metadata "useCD" of player to false
			else:
				send "&a合成成功！~" to player
				#multiply all ingredients by amount crafted
				loop ...({_requirement}.keySet()):
					{_requirement}.put(loop-value, {_requirement}.get(loop-value) * {_craftAmount})
				loop 36 times:
					clear {_name}
					set {_name} to name of slot (loop-number - 1) of player's inventory
					if {_name} contains "的 ":
						set {_name} to {_name}.split("的 ")[1]
					set {_name} to trimText({_name})
					if try {_requirement}.containsKey({_name}) is true:
						if {_requirement}.get({_name}) >= item amount of slot (loop-number - 1) of player's inventory:
							{_refound}.add((item amount of slot (loop-number - 1) of player's inventory) of slot (loop-number - 1) of player's inventory)
							{_requirement}.put({_name}, ({_requirement}.get({_name}) - item amount of slot (loop-number - 1) of player's inventory))
							set slot (loop-number - 1) of player's inventory to air
						else:
							{_refound}.add({_requirement}.get({_name}) of slot (loop-number - 1) of player's inventory)
							remove {_requirement}.get({_name}) of slot (loop-number - 1) of player's inventory from slot (loop-number - 1) of player's inventory
							{_requirement}.put({_name}, 0)
						if {_requirement}.get({_name}) <= 0:
							{_requirement}.remove({_name})
							if {_requirement}.size() = 0:
								stop loop
				set {_resultItem} to getItem(yml value "%{_station}%.%{_recipeID}%.resultItem" from file "plugins/Data/recipes.yml")
				loop {_craftAmount} times:
					giveItem(player, {_resultItem})
				set metadata "useCD" of player to false
			{_recipeID} is metadata "recipeNumber" of player
			set metadata "craftingStation" of player to {_station}
		else:
			send "&c请选择左侧的物品查看配方后合成" to player
on VexGuiCloseEvent:
	wait 1 tick
	VexViewAPI.getPlayerCurrentGui(player) is not set
	set metadata "recipeNumber" of player to -1
	set metadata "craftingStation" of player to "CLOSED"
on VexSlotClickEvent:
	set {_motherNode} to metadata "craftingStation" of player
	if {_motherNode} is not "CLOSED":
		metadata "recipeNumber" of player is not event.getID()
		set {_gui} to VexViewAPI.getPlayerCurrentGui(player).getVexGui()
		try {_gui}.getSlotById(event.getID()) is set
		{_gui}.getSlotById(event.getID()).getX() < 10
		set metadata "craftingStation" of player to "CLOSED"
		set {_ingredient} to yml value "%{_motherNode}%.%event.getID()%.requireItem" from file "plugins/Data/recipes.yml"
		set {_items} to new ArrayList()
		set {_level} to ({_gui}.getButtonById("CRAFT").getH()) - 17
		set {_index} to {CraftingGUI}.get("%{_motherNode}%_%{_level}%_slot")
		if {_index} is not set:
			set {_index} to 1
			while try {_gui}.getSlotById({_index}) is set:
				add 1 to {_index}
		set {_dx} to (({_gui}.getWidth() * 0.9) - 40) / ({_ingredient}.size() + 1)
		set {_xOffset} to ({_gui}.getWidth() * 0.1) + 30
		set {_yOffset} to {_gui}.getHeight() / 3
		set {_iterator} to {_ingredient}.iterator()
		while {_iterator}.hasNext() is true:
			add {_dx} to {_xOffset}
			set {_item} to getRawItem({_iterator}.next())
			set {_newSlot} to new VexSlot({_index}, {_xOffset}, {_yOffset}, {_item})
			{_items}.add({_newSlot})
			add 1 to {_index}
		{_items}.add({_gui}.getList())
		set {_btn1} to {_gui}.getButtonById("CRAFT")
		{_btn1}.setName("点我合成")
		set {_btn2} to {_gui}.getButtonById("CRAFT_ALL")
		{_btn2}.setName("合成全部")
		{_items}.add({_btn1})
		{_items}.add({_btn2})
		set {_gui} to new VexGui((metadata "GUIbackground" of player), ({_gui}.getX()), ({_gui}.getY()), ({_gui}.getWidth()), ({_gui}.getHeight()))
		{_items}.add(new VexSlot({_index}, (({_gui}.getWidth() * 0.55) + 10), ({_gui}.getHeight() / 5), event.getItem()))
		{_gui}.addAllComponents({_items})
		VexViewAPI.openGui(player, {_gui})
		set metadata "recipeNumber" of player to event.getID()
		wait 10 ticks
		set metadata "craftingStation" of player to {_motherNode}
on inventory open:
	if event.getInventory().getType().toString() is "ANVIL" or "FURNACE" or "ENCHANTING" or "CRAFTING" or "BREWING" or "MERCHANT":
		cancel event
		stop trigger

on tool change:
	if metadata "useCD" of player is true:
		cancel event
		stop trigger
	if metadata "autoSwing" of player is true:
		cancel event
		stop trigger
	set metadata "swingAmount" of player to 0
	set metadata "toolChanged" of player to true
on swapping of held items:
	if metadata "useCD" of player is true:
		cancel event
		stop trigger
	if metadata "autoSwing" of player is true:
		cancel event
		stop trigger
	set metadata "toolChanged" of player to true

on inventory close:
	if player has scoreboard tag "tempInvCD":
		stop trigger
	setPlayerStats(player)
	add "tempInvCD" to scoreboard tags of player
	wait 1 second
	remove "tempInvCD" from scoreboard tags of player
function handlePlayerArmorSet(ply: player, armor: items, remove: boolean) :: object:
	set {_armorSetHelm::*} to ...yml value "pieces.%trimText(name of {_armor::1})%" from file "plugins/Data/armorSet.yml"
	set {_armorSetChest::*} to ...yml value "pieces.%trimText(name of {_armor::2})%" from file "plugins/Data/armorSet.yml"
	set {_armorSetLeg::*} to ...yml value "pieces.%trimText(name of {_armor::3})%" from file "plugins/Data/armorSet.yml"
	loop {_armorSetHelm::*}:
		{_armorSetChest::*} contains loop-value
		{_armorSetLeg::*} contains loop-value
		set {_attrMap} to metadata "attrMap" of {_ply}
		set {_lore} to yml value "sets.%loop-value%.lore" from file "plugins/Data/armorSet.yml"
		set {_attributes::*} to ...(yml value "sets.%loop-value%.attributes" from file "plugins/Data/armorSet.yml")
		if {_attributes::*} is set:
			loop {_attributes::*}:
				set {_info::1} to loop-value-2
				set {_info::*} to {_info::1} split at ": "
				tweakAttribute({_attrMap}, {_info::1}, {_info::2}, !{_remove})
		set metadata "armorSet" of {_ply} to loop-value
		return {_lore}
	set metadata "armorSet" of {_ply} to ""
	return {_null}
function setPlayerStats(ply: player):
	set {_statsGen} to metadata "statsGeneration" of {_ply}
	set metadata "statsGeneration" of {_ply} to {_statsGen} + 1
	set {_attrMap} to {playerAttrMap}.clone()
	loop ...({_attrMap}.keySet()):
		if {_attrMap}.get(loop-value) is "ARLST":
			{_attrMap}.put((loop-value), new ArrayList())
	set metadata "attrMap" of {_ply} to {_attrMap}
	
	set {_filePath} to "plugins/PlayerData/%name of {_ply}%.yml"
	
	set {_manaTier} to yml value "stats.manaTier" from file {_filePath}
	if {_manaTier} is not set:
		set yml value "stats.manaTier" from file {_filePath} to 1
		set {_manaTier} to 1
	set {_maxMana} to getMaxManaByTier({_manaTier})
	{_attrMap}.put("manaTier", {_manaTier})
	{_attrMap}.put("maxMana", {_maxMana})
	set {_healthTier} to yml value "stats.healthTier" from file {_filePath}
	if {_healthTier} is not set:
		set yml value "stats.healthTier" from file {_filePath} to 5
		set {_healthTier} to 5
		set {_ply}'s max health to 200
		set {_ply}'s health to 200
	set {_maxHealth} to getMaxHealthByTier({_healthTier})
	{_attrMap}.put("healthTier", {_healthTier})
	{_attrMap}.put("maxHealth", {_maxHealth})
	set {_ply}'s max health to {_maxHealth}
	
	set {_toolDmgMulti} to 0
	set {_checkLore} to trimText(line 1 of lore of tool of {_ply})
	if {_checkLore} is not "[装备]":
		{_checkLore} is not "[饰品]"
		handlePlayerSwitchItem({_ply}, air, tool of {_ply})
		set {_toolName} to name of (tool of {_ply})
		if {_toolName} contains "的 ":
			set {_info::*} to {_toolName} split at "的 "
			set {_prefix} to trimText({_info::1})
			set {_prefixAttribute} to yml value "prefixInfo.%{_prefix}%.attributes" from file "plugins/Data/prefix.yml"
			if {_prefixAttribute} is set:
				loop ...{_prefixAttribute}:
					set {_info::1} to "%loop-value%"
					set {_info::*} to {_info::1} split at ": "
					{_info::1} is "damageMulti"
					set {_toolDmgMulti} to {_info::2}
					stop loop
	set metadata "toolDmgMulti" of {_ply} to {_toolDmgMulti}
	
	add helmet of {_ply} to {_armor::*}
	add chestplate of {_ply} to {_armor::*}
	add leggings of {_ply} to {_armor::*}
	loop {_armor::*}:
		set {_checkLore} to trimText(line 1 of lore of loop-value)
		if {_checkLore} is "[装备]":
			handlePlayerSwitchItem({_ply}, air, loop-value)
	
	set {_accessoryAmount} to yml value "stats.maxAccessories" from file "plugins/PlayerData/%name of {_ply}%.yml"
	set {_ac} to new ArrayList()
	set {_inv} to (metadata "inventories" of {_ply}).get("accessory")
	set {_slot} to 10
	loop {_accessoryAmount} times:
		set {_item} to slot {_slot} of {_inv}
		if trimText(line 1 of lore of {_item}) is "[饰品]":
			set {_name} to trimText(name of {_item})
			if {_name} contains "的 ":
				set {_name} to {_name}.split("的 ")[1]
			{_ac}.contains({_name}) is false
			{_ac}.add({_name})
			if {_name} is "月亮石":
				(world of {_ply}).getTime() is not between 13500 and 22500
				continue
			else if {_name} is "太阳石":
				(world of {_ply}).getTime() is between 13500 and 22500
				continue
			set {_isWing} to false
			if {_name} ends with "翼":
				set {_isWing} to true
			else if {_name} is "幽灵靴" or "火箭靴":
				set {_isWing} to true
			if {_isWing} is true:
				if {_hasWing} is set:
					set slot {_slot} of {_inv} to air
					giveItem({_ply}, {_item})
				else:
					set {_hasWing} to true
					handlePlayerSwitchItem({_ply}, air, {_item})
			else:
				handlePlayerSwitchItem({_ply}, air, {_item})
		else:
			set slot {_slot} of {_inv} to air
			giveItem({_ply}, {_item})
		add 1 to {_slot}
	set metadata "accessory" of {_ply} to {_ac}
	set {_lore} to handlePlayerArmorSet({_ply}, {_armor::*}, false)
	{_lore} is set
	set {_lore::*} to ...{_lore}
	set helmet of {_ply} to getRawItem(trimText(name of helmet of {_ply}))
	set chestplate of {_ply} to getRawItem(trimText(name of chestplate of {_ply}))
	set leggings of {_ply} to getRawItem(trimText(name of leggings of {_ply}))
	add {_lore::*} to lore of helmet of {_ply}
	add {_lore::*} to lore of chestplate of {_ply}
	add {_lore::*} to lore of leggings of {_ply}
	set gravity of {_ply} to on
	
function handlePlayerSwitchItem(ply: player, itemOld: item, itemNew: item):
	set {_attrMap} to metadata "attrMap" of {_ply}
	if name of {_itemOld} is set:
		set {_name} to trimText(name of {_itemOld})
		set {_attributes} to new ArrayList()
		if {_name} contains "的 ":
			set {_info::*} to {_name} split at "的 "
			set {_name} to {_info::2}
			set {_prefix} to {_info::1}
			set {_add} to yml value "prefixInfo.%{_prefix}%.attributes" from file "plugins/Data/prefix.yml"
			if {_add} is set:
				{_attributes}.addAll({_add})
		clear {_add}
		set {_add} to yml value "%{_name}%.attributes" from file "plugins/Data/items.yml"
		if {_add} is set:
			{_attributes}.addAll({_add})
		if {_attributes}.size() > 0:
			loop ...{_attributes}:
				set {_info::1} to "%loop-value%"
				set {_info::*} to {_info::1} split at ": "
				tweakAttribute({_attrMap}, {_info::1}, {_info::2}, false)
	if name of {_itemNew} is set:
		set {_name} to trimText(name of {_itemNew})
		set {_attributes} to new ArrayList()
		if {_name} contains "的 ":
			set {_info::*} to {_name} split at "的 "
			set {_name} to {_info::2}
			set {_prefix} to {_info::1}
			clear {_add}
			set {_add} to yml value "prefixInfo.%{_prefix}%.attributes" from file "plugins/Data/prefix.yml"
			if {_add} is set:
				{_attributes}.addAll({_add})
		clear {_add}
		set {_add} to yml value "%{_name}%.attributes" from file "plugins/Data/items.yml"
		if {_add} is set:
			{_attributes}.addAll({_add})
		if {_attributes}.size() > 0:
			loop ...{_attributes}:
				set {_info::1} to "%loop-value%"
				set {_info::*} to {_info::1} split at ": "
				tweakAttribute({_attrMap}, {_info::1}, {_info::2}, true)

on PlayerItemDamageEvent:
	cancel event
on PlayerDropItemEvent:
	set {_item} to event.getItemDrop()
	if metadata "useCD" of player is true:
		cancel event
		stop trigger
	if player is sneaking:
		set metadata "dropper" of {_item} to event.getPlayer()
		stop trigger
	{_item}.remove()
	giveItem(player, {_item}.getItemStack())
	send "&a请在潜行模式下扔出物品以免误扔" to player
command /垃圾箱:
	aliases: ljx, lj, 垃圾
	trigger:
		open a new chest inventory with 1 row named "&a垃圾箱" for command sender
command /togglepvp:
	cooldown: 1 minute
	cooldown message: 你在 %remaining time% 后才可以再次使用此功能！
	trigger:
		if command sender has scoreboard tag "PVP":
			remove "PVP" from scoreboard tags of command sender
			send "&a您已退出PVP状态" to command sender
		else:
			add "PVP" to scoreboard tags of command sender
			send "&c您已进入PVP状态" to command sender
command /team <text>:
	cooldown: 10 seconds
	cooldown message: 你在 %remaining time% 后才可以再次使用此功能！
	trigger:
		if arg-1 is "red":
			set player list name of command sender to "&c<红队>&r%name of command sender%"
			send "&a您已成功加入&c红队！" to command sender
		else if arg-1 is "green":
			set player list name of command sender to "&a<绿队>&r%name of command sender%"
			send "&a您已成功加入&a绿队！" to command sender
		else if arg-1 is "blue":
			set player list name of command sender to "&b<蓝队>&r%name of command sender%"
			send "&a您已成功加入&b蓝队！" to command sender
		else if arg-1 is "yellow":
			set player list name of command sender to "&e<黄队>&r%name of command sender%"
			send "&a您已成功加入&e黄队！" to command sender
		else:
			stop trigger
		set metadata "team" of command sender to arg-1
on EntityShootBowEvent:
	event.getEntity() is a player
	cancel event
on pick up:
	set {_name} to trimText(name of event-item)
	if {_name} is not set:
		set {_item} to yml value "%(event-item).getType()%" from file "plugins/Data/itemMap.yml"
		{_item} is set
		event.getItem().setItemStack((item amount of event-item) of getItem({_item}))
		cancel event
		stop trigger
	else if {_name} is "铂金币":
		set {_bal} to 100000000 * item amount of event-item
		set {_remove} to true
	else if {_name} is "金币":
		set {_bal} to 1000000 * item amount of event-item
		set {_remove} to true
	else if {_name} is "银币":
		set {_bal} to 10000 * item amount of event-item
		set {_remove} to true
	else if {_name} is "铜币":
		set {_bal} to 100 * item amount of event-item
		set {_remove} to true
	else if {_name} is "心":
		heal player by 20
		displayHolo(player, 20, false, "回血")
		set {_remove} to true
	else if {_name} is "星":
		set player's level to min((player's level + 100), ((metadata "attrMap" of player).get("maxMana")))
		displayHolo(player, 100, false, "回蓝")
		set {_remove} to true
	else if {_name} is "生命强化焰":
		loop all players:
			world of loop-player is world of event-player
			distance between location of loop-player and location of event-player < 100
			gamemode of loop-player is not spectator
			applyEffect(loop-player, "生命星云", 480)
		set {_remove} to true
	else if {_name} is "魔力强化焰":
		loop all players:
			world of loop-player is world of event-player
			distance between location of loop-player and location of event-player < 100
			gamemode of loop-player is not spectator
			applyEffect(loop-player, "魔力星云", 480)
		set {_remove} to true
	else if {_name} is "伤害强化焰":
		loop all players:
			world of loop-player is world of event-player
			distance between location of loop-player and location of event-player < 100
			gamemode of loop-player is not spectator
			applyEffect(loop-player, "伤害星云", 480)
		set {_remove} to true
	if {_bal} is set:
		add {_bal} to player's money
	if {_remove}:
		cancel event
		event.getItem().remove()
on rightclick:
	if metadata "useCD" of event-player is not true:
		set {_itemType} to trimText(name of player's tool)
		if {_itemType} contains "的 ":
			set {_itemType} to {_itemType}.split("的 ")[1]
		if {_itemType} is "吉他斧" or "星星吉他":
			set {_sound} to "item.guitar"
		else if {_itemType} is "竖琴" or "魔法竖琴":
			set {_sound} to "item.harp"
		if {_sound} is set:
			set {_dPitch} to player.getHandle().pitch
			set {_dPitch} to round({_dPitch} * 24 / 180) * -1
			play sound {_sound} with volume 3 and pitch (2 ^ ({_dPitch} / 12)) at location of player
			applyCD(player, 1)
		
		if player's tool is bow:
			cancel event
		if name of player's tool ends with "钱币槽":
			open (metadata "inventories" of player).get("piggyBank") for player
		else if name of player's tool ends with "虚空袋":
			open (metadata "inventories" of player).get("voidBag") for player
		else if trimText(line 1 of lore of player's tool) is "右键放生此小动物":
			spawnAnimal(trimText(name of player's tool), (location of player).add(0, 1, 0))
			set {_item} to player's tool
			set {_item} to (item amount of {_item} - 1) of {_item}
			set player's tool to {_item}
			applyCD(player, 15)
		else if name of player's tool ends with "天塔柱":
			set {_background} to trimText(name of player's tool)
			replace all "天塔柱" in {_background} with ""
			if metadata "background" of event-player is {_background}:
				clear metadata "background" of player
			else:
				set metadata "background" of event-player to {_background}
			applyCD(player, 30)
		else if {_itemType} is "日耀碑牌":
			{event} is not set
			set {_time} to (world of player).getTime()
			{_time} is not between 13500 and 22500
			set {_item} to player's tool
			set {_item} to (item amount of {_item} - 1) of {_item}
			set player's tool to {_item}
			broadcast "&a&l正在发生日食！"
			set {event} to "日食"
			set {eventInfo} to new HashMap(5)
			{eventInfo}.put("progress", 0)
			if {_time} > 13500:
				{eventInfo}.put("progressMax", floor((37500 - {_time}) / 3))
			else:
				{eventInfo}.put("progressMax", floor((13500 - {_time}) / 3))
			applyCD(player, 44)
		else if {_itemType} is "调皮礼物" or "南瓜月勋章":
			{event} is not set
			set {_time} to (world of player).getTime()
			{_time} is between 13500 and 22500
			set {_item} to player's tool
			set {_item} to (item amount of {_item} - 1) of {_item}
			set player's tool to {_item}
			if {_itemType} is "调皮礼物":
				broadcast "&a&l冰霜月正在升起！"
				set {event} to "冰霜月"
				tickEvent()
			else:
				broadcast "&a&l南瓜月正在升起！"
				set {event} to "南瓜月"
				tickEvent()
			set {_msg} to yml value "events.%{event}%.messages.1" from file "plugins/Data/setting.yml"
			broadcast {_msg}
			set {eventInfo} to new HashMap(15)
			{eventInfo}.put("numBoss1", 0)
			{eventInfo}.put("numBoss2", 0)
			{eventInfo}.put("numBoss3", 0)
			{eventInfo}.put("invadeProgress", 0)
			{eventInfo}.put("invadeProgressMax", 25)
			{eventInfo}.put("isInvasion", true)
			{eventInfo}.put("progress", 0)
			{eventInfo}.put("progressMax", floor((22500 - {_time}) / 3))
			{eventInfo}.put("tier", 1)
			if {event} is "冰霜月":
				{eventInfo}.put("tierMax", 20)
			else:
				{eventInfo}.put("tierMax", 15)
			applyCD(player, 44)
	if event-block is set:
		set {_toolType} to trimText(name of player's tool)
		if "%event-block%" contains "workbench" or "furnace" or "anvil" or "enchantment table" or "BREWING_STAND":
			handleCrafting(player, event-block)
			event.setUseInteractedBlock(Result.DENY)
			event.setUseItemInHand(Result.ALLOW)
		else if event-block is any wool:
			metadata "useCD" of event-player is not true
			set {_event} to new BlockBreakEvent(event-block, event-player)
			Bukkit.getServer().getPluginManager().callEvent({_event})
			{_event}.isCancelled() is false
			{_event}.setCancelled(true)
			set {_item} to "%event-block%" parsed as item
			if event-player is sneaking:
				set damage value of event-block to mod(data of {_item} + 1, 16)
			else:
				set damage value of event-block to mod(data of {_item} - 1, 16)
			applyCD(event-player, 4)
		else if event-block is bed:
			cancel event
			event-player.setBedSpawnLocation(location of event-block)
		else if event-block is dirt:
			if {_toolType} is "腐化种子" or "草种":
				cancel event
				if {_toolType} is "腐化种子":
					set event-block to mycelium block
					set biome at location of event-block to mushroom island
				else if {_toolType} is "草种":
					set event-block to grass block
				set {_item} to player's tool
				set {_item} to (item amount of {_item} - 1) of {_item}
				set player's tool to {_item}
			else if {_toolType} is "南瓜种子":
				the block 1 above event-block is air
				set event-block to farmland
				set the block 1 above event-block to pumpkin stem
				set data value of the block 1 above event-block to 0
				set {_item} to player's tool
				set {_item} to (item amount of {_item} - 1) of {_item}
				set player's tool to {_item}
		else if "%event-block%" contains "rail":
			spawn 1 minecart at location of event-block
			set {_minecart} to spawned entity
			set {_minecartNMS} to {_minecart}.getHandle()
			set {_attrMap} to new HashMap()
			{_attrMap}.put("damage", 50)
			{_attrMap}.put("damageMulti", 1)
			{_attrMap}.put("damageMeleeMulti", 1)
			{_attrMap}.put("knockback", 12)
			{_attrMap}.put("knockbackMulti", 1)
			{_attrMap}.put("knockbackMeleeMulti", 1)
			set metadata "attrMap" of {_minecart} to {_attrMap}
			{_minecart}.setInvulnerable(true)
			make event-player ride {_minecart}
			set metadata "collideCD" of {_minecart} to new ArrayList()
			if name of player's tool ends with "彩虹猫矿车":
				set {_loopTime} to 2
				{_attrMap}.put("damage", 150)
				{_minecart}.setCustomName("彩虹猫矿车")
			else if name of player's tool ends with "机械矿车":
				set {_loopTime} to 1
				{_attrMap}.put("damage", 80)
				{_minecart}.setCustomName("机械矿车")
			else:
				{_minecart}.setCustomName("矿车")
				stop trigger
			while {_minecartNMS}.dead is false:
				loop {_loopTime} times:
					{_minecartNMS}.A_()
				wait 1 tick
		else if event-block is stone brick:
			if {_toolType} ends with "孢子囊":
				set event-block to mossy stone brick
				draw 35 happyvillager particles at location of event-block with direction (vector(0, 1, 0)) and speed 0.1, offset 0.6, 0.6, 0.6, keepFor 1 tick
			else if {_toolType} ends with "骨头手套":
				set event-block to cracked stone brick
				draw 35 blockdust particles made of stone brick at location of event-block, offset 0.3, 0.3, 0.3, keepFor 1 tick

on VehicleEntityCollisionEvent:
	cancel event
	set {_vehicle} to event.getVehicle()
	set {_damaged} to event.getEntity()
	set {_collideCD} to metadata "collideCD" of {_vehicle}
	{_collideCD}.contains({_damaged}) is false
	set {_speed} to vector length of (velocity of {_vehicle})
	{_speed} > 0.2
	{_damaged}.getVehicle() is not {_vehicle}
	damageCD({_collideCD}, {_damaged}, 5)
	set {_attrMap} to metadata "attrMap" of {_vehicle}
	handleDamage({_damaged}, {_vehicle}, ({_attrMap}.get("damage") * {_speed} * {_speed}), "Melee")
on inventory click:
	set {_currInv} to try (event-player).getOpenInventory().getTopInventory()
	if index of event-slot is between 0 and 4:
		"%(event-inventory).getType()%" contains "craft"
		handleCrafting(event-player, "AIR")
	"%event.getAction()%" is not "nothing"
	if "%event.getAction()%" is not "drop one from cursor" or "drop all from cursor":
		set {_item} to event-slot
		if name of {_item} starts with "&1&1&4&5&1&4":
			cancel event
			stop trigger
	if metadata "useCD" of event-player is true:
		cancel event
		stop trigger
	if metadata "autoSwing" of event-player is true:
		cancel event
		stop trigger
	if trimText({_currInv}.getTitle()) is not "重铸":
		applyCD(event-player, 2)
	if index of event-slot is between 37 and 39:
		slot 53 of event-inventory is not set
		add helmet of event-player to {_armor::*}
		add chestplate of event-player to {_armor::*}
		add leggings of event-player to {_armor::*}
		handlePlayerArmorSet(event-player, {_armor::*}, true)
		set event-player's helmet to getRawItem(trimText(name of event-player's helmet))
		set event-player's chestplate to getRawItem(trimText(name of event-player's chestplate))
		set event-player's leggings to getRawItem(trimText(name of event-player's leggings))
		wait 1 tick
		set {_armor::1} to helmet of event-player
		set {_armor::2} to chestplate of event-player
		set {_armor::3} to leggings of event-player
		set {_lore::*} to ...handlePlayerArmorSet(event-player, {_armor::*}, false)
		add {_lore::*} to lore of helmet of event-player
		add {_lore::*} to lore of chestplate of event-player
		add {_lore::*} to lore of leggings of event-player