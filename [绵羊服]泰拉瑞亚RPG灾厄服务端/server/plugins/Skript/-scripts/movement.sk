import:
	eos.moe.dragoncore.api.event.KeyPressEvent
	eos.moe.dragoncore.api.event.KeyReleaseEvent

on jump:
	cancel event

function playerThrust(ply: player, state: boolean):
	#thrust or jump, wing, jump bottle etc
	gamemode of {_ply} is not spectator
	set metadata "thrusting" of {_ply} to {_state}
	{_state} is true
	#remove all hooks
	set {_hooks} to metadata "hooks" of {_ply}
	loop ...{_hooks}:
		if (loop-value).getHandle().inGround is true:
			(loop-value).remove()
	set {_index} to metadata "thrust" of {_ply}
	set {_thrustProgress} to metadata "thrustProgress" of {_ply}
	set {_accessory} to metadata "accessory" of {_ply}
	set {_mount} to {_ply}
	set {_mount} to vehicle of {_ply}
	set {_accessoryUsed} to air
	set {_bounceTime} to 0
	if {_mount} is on ground:
		{_ply} has scoreboard tag "temp_isMounting"
		# get mount (jump/flight) info
		set {_mountItemType} to metadata "mountItem" of {_ply}
		set {_maxProgress} to yml value "%{_mountItemType}%.maxProgress" from file "plugins/Data/wings.yml"
		set {_maxVelocity} to yml value "%{_mountItemType}%.maxVelocity" from file "plugins/Data/wings.yml"
		set {_maxAcceleration} to yml value "%{_mountItemType}%.maxAcceleration" from file "plugins/Data/wings.yml"
		set {_horizontalVelocity} to yml value "%{_mountItemType}%.horizontalVelocity" from file "plugins/Data/wings.yml"
		set {_bounceTime} to yml value "%{_mountItemType}%.bounceTime" from file "plugins/Data/wings.yml"
		set {_accessoryUsed} to {_mountItemType}
	if {_maxProgress} is not set:
		while {_index} < {_accessory}.size():
			set {_currAcc} to {_accessory}.get({_index})
			if {_currAcc} doesn't end with "翼":
				# do not use jump bottle on ground
				{_mount} is on ground
				broadcast "Attempted to use jump bottle. On ground."
				set {_currAcc} to "AIR"
			set {_maxProgress} to yml value "%{_currAcc}%.maxProgress" from file "plugins/Data/wings.yml"
			if {_maxProgress} is set:
				set {_maxVelocity} to yml value "%{_currAcc}%.maxVelocity" from file "plugins/Data/wings.yml"
				set {_maxAcceleration} to yml value "%{_currAcc}%.maxAcceleration" from file "plugins/Data/wings.yml"
				set {_horizontalVelocity} to yml value "%{_currAcc}%.horizontalVelocity" from file "plugins/Data/wings.yml"
				set {_bounceTime} to yml value "%{_currAcc}%.bounceTime" from file "plugins/Data/wings.yml"
				set {_accessoryUsed} to {_currAcc}
				broadcast "Thrusting using: %{_currAcc}%"
				stop loop
			add 1 to {_index}
		if {_maxProgress} is not set:
			if {_mount} is on ground:
				# jump
				set {_maxProgress} to 0.267
				set {_maxVelocity} to 16
				set {_maxAcceleration} to 16
				set {_horizontalVelocity} to 11
				set {_index} to -1
				broadcast "Jump"
			else:
				broadcast "Attempted to jump. Not on ground."
	if {_accessory}.contains("翱翔徽章") is true:
		set {_maxVelocity} to {_maxVelocity} * 1.25
		set {_maxAcceleration} to {_maxAcceleration} * 1.25
		set {_horizontalVelocity} to {_horizontalVelocity} * 1.25
		if {_maxProgress} > {_bounceTime}:
			add ({_maxProgress} - {_bounceTime}) * 4 to {_maxProgress}
	set {_attrMap} to metadata "attrMap" of {_ply}
	if {_attrMap} is set:
		set {_multi} to {_attrMap}.getOrDefault("speedMulti", 1)
		set {_maxVelocity} to {_maxVelocity} * {_multi}
		set {_maxAcceleration} to {_maxAcceleration} * {_multi}
		set {_horizontalVelocity} to {_horizontalVelocity} * {_multi}
	# convert block/s into block/tick
	set {_maxVelocity} to {_maxVelocity} / 20
	set {_maxAcceleration} to {_maxAcceleration} / 20
	set {_horizontalVelocity} to {_horizontalVelocity} / 20
	if {_index} >= {_accessory}.size():
		# flight time depleted. Check if the player has a wing
		set {_gliding} to false
		set {_index} to 0
		loop {_accessory}.size() times:
			if {_accessory}.get({_index}).toString() ends with "翼":
				set {_gliding} to true
				set {_index} to {_accessory}.size()
				stop loop
			add 1 to {_index}
		if {_gliding} is true:
			set {_maxVelocity} to -0.1
			set {_horizontalVelocity} to {_horizontalVelocity} / 2
			set {_maxProgress} to 5000000
			broadcast "Start gliding."
		else:
			# the player has no wing
			broadcast "Attempted gliding, has no wing."
	if {_maxProgress} is set:
		set metadata "thrust" of {_ply} to {_index}
		while {_ply} is online:
			if metadata "thrusting" of {_ply} is not true:
				stop loop
			if gamemode of {_ply} is spectator:
				stop loop
			{_mount}.setFallDistance(0)
			
			# vertical movement
			set {_v} to velocity of {_mount}
			set {_force} to min({_maxAcceleration}, ({_maxVelocity} - (y of {_v})))
			broadcast "%{_force}%"
			if {_force} > 0:
				push {_mount} {_force} upward
			# horizontal movement
			set {_dir} to (metadata "moveDir" of {_ply}).clone()
			if {_dir} is set:
				set {_playerVelocity} to velocity of {_mount}
				set y component of {_playerVelocity} to 0
				# velocity is the speed in which the player is moving along 
				set {_dirLength} to vector length of {_dir}
				if {_dirLength} > 0:
					set {_velocity} to max((({_playerVelocity} dot {_dir}) / {_dirLength}), 0)
				else:
					set {_velocity} to 0
				set vector length of {_dir} to min({_maxAcceleration}, ({_horizontalVelocity} - {_velocity}))
				push {_mount} {_dir}
			if {_gliding} is not true:
				#particles
				if {_bounceTime} > 0:
					# bottle jump
					set {_xOffset} to -1
					loop 3 times:
						set {_zOffset} to -1
						loop 3 times:
							if {_xOffset} = 0:
								{_zOffset} = 0
								continue
							draw 4 cloud particles at location of {_mount} with direction vector({_xOffset}, 0, {_zOffset}) and speed 0.1, offset 0.5, 0, 0.5, visible range 30, keep 1 tick							
							add 1 to {_zOffset}
						add 1 to {_xOffset}
					add 10 to {_thrustProgress}
				else:
					add 1 to {_thrustProgress}
					if {_accessoryUsed} is "火箭靴" or "幽灵靴":
						draw 10 cloud particles at location of {_mount} with direction vector(0, -1, 0) and speed 0.17, offset 0.5, 0, 0.5, visible range 30, keep 1 tick
				
				# flight time depleted
				if {_thrustProgress} / 10 >= {_maxProgress}:
					set {_thrustProgress} to 0
					add 1 to {_index}
					stop loop
				else if {_bounceTime} > 0:
					# no continuous flight for bottle jump
					stop loop
			else if {_mount} is on ground:
				stop loop
			wait 2 ticks
	broadcast "JUMP THREAD STOPPED."
	set metadata "thrust" of {_ply} to {_index}
	set metadata "thrustProgress" of {_ply} to {_thrustProgress}
	set metadata "thrusting" of {_ply} to false

on inventory click:
	set {_currInv} to try (event-player).getOpenInventory().getTopInventory()
	set {_plyInv} to try (event-player).getOpenInventory().getBottomInventory()
	set {_eventInv} to event.getClickedInventory()
	broadcast "%{_eventInv}%||%event-clicktype%|%index of event-slot%|%event-inventoryaction%"

on KeyPressEvent:
	set {_ply} to event.getPlayer()
	gamemode of {_ply} is not spectator
#	broadcast "%{_ply}%|%event.getKey()%"
	set {_accessory} to metadata "accessory" of {_ply}
	if event.getKey() is "SPACE":
		# thrust/jump
		playerThrust({_ply}, true)
	else if event.getKey() is "R":
		# Grappling hook
		handleGrapplingHook({_ply})
	else if event.getKey() is "C":
		# remove all hooks
		set {_hooks} to metadata "hooks" of {_ply}
		loop ...{_hooks}:
			if (loop-value).getHandle().inGround is true:
				(loop-value).remove()
		# Charge
		set {_dir} to new vector with yaw ({_ply}.getHandle().yaw) and pitch 0
		set {_dir} to metadata "moveDir" of {_ply}
		if {_ply} doesn't have scoreboard tag "temp_sheidDashCD":
			set {_dashSpeed} to -1
			loop ...{_accessory}:
				if loop-value is "克苏鲁之眼盾":
					set {_dashSpeed} to 1
					set {_dashCD} to 1.75 seconds
					stop loop
			if {_dashSpeed} > 0:
				add "temp_sheidDashCD" to scoreboard tags of {_ply}
				set {_playerVelocity} to velocity of {_ply}
				set {_dashSpeed} to {_dashSpeed} * (try (metadata "attrMap" of {_ply}).getOrDefault("speedMulti", 1))
				set vector length of {_dir} to {_dashSpeed}
				set y of {_dir} to ((y of {_playerVelocity}) * -1) + y of {_dir}
				push {_ply} {_dir}
				wait {_dashCD}
				remove "temp_sheidDashCD" from scoreboard tags of {_ply}
	else if event.getKey() is "GRAVE":
		open (metadata "inventories" of {_ply}).get("accessory") for {_ply}
on KeyReleaseEvent:
	broadcast "!"
	set {_ply} to event.getPlayer()
	if event.getKey() is "SPACE":
		# thrust/jump
		playerThrust({_ply}, false)