import:
	java.util.ArrayList
	java.util.HashMap
	net.minecraft.server.v1_11_R1.BossBattle
	net.minecraft.server.v1_11_R1.BossBattle$BarColor
	net.minecraft.server.v1_11_R1.BossBattle$BarStyle
	net.minecraft.server.v1_11_R1.BossBattleServer
	net.minecraft.server.v1_11_R1.PacketPlayOutBoss$Action
	net.minecraft.server.v1_11_R1.PathfinderGoalFloat
	net.minecraft.server.v1_11_R1.PathfinderGoalSelector
	org.bukkit.craftbukkit.v1_11_R1.util.CraftChatMessage
	org.bukkit.entity.EntityType


on rightclick:
	gamemode of player is survival
	set {_tool} to player's tool
	metadata "useCD" of player is false
	if trimText(name of {_tool}) is "天界符":
		{pillars} is not set
		{BOSS}.containsKey("月球领主_reserve") is false
		{BOSS}.containsKey("月球领主") is false
		handleMoonLord(player)
		applyCD(player, 20)
		set {_tool} to (item amount of {_tool} - 1) of {_tool}
		set player's tool to {_tool}

function handleMoonLord(ply: player):
	{BOSS}.put("月球领主_reserve", true)
	set {_world} to world of {_ply}
	
	loop 6 times:
		set {_duration} to "%150 + (loop-number * 10)% ticks" parsed as time span
		loop all players in {_world}:
			apply potion of nausea without particles to loop-player for {_duration}
		wait 10 seconds
	
	spawn a slime 500 above location of {_ply}
	set {_yqlz} to spawned entity
	spawn a slime 500 above location of {_ply}
	set {_hand1} to spawned entity
	spawn a slime 500 above location of {_ply}
	set {_hand2} to spawned entity
	spawn a slime 500 above location of {_ply}
	set {_head} to spawned entity
	loop 4 times:
		spawn a slime 500 above location of {_ply}
		add spawned entity to {_bg::*}
	{BOSS}.remove("月球领主_reserve")
	broadcast "&d&l月球领主 苏醒了！"
	set {_attrMap} to new HashMap(8)
	{_attrMap}.put("damage", 0)
	{_attrMap}.put("damageType", "Melee")
	{_attrMap}.put("defence", 140)
	{_attrMap}.put("knockback", 1)
	{_attrMap}.put("knockbackResistance", 1)
	set {_attrMapHand1} to {_attrMap}.clone()
	{_attrMapHand1}.put("damage", 0)
	{_attrMapHand1}.put("defence", 80)
	set {_attrMapHand2} to {_attrMapHand1}.clone()
	set {_attrMapHead} to {_attrMap}.clone()
	{_attrMapHead}.put("damage", 600)
	{_attrMapHead}.put("defence", 100)
	
	set metadata "attrMap" of {_yqlz} to {_attrMap}
	set metadata "attrMap" of {_hand1} to {_attrMapHand1}
	set metadata "attrMap" of {_hand2} to {_attrMapHand2}
	set metadata "attrMap" of {_head} to {_attrMapHead}
	
	set {_bossbar} to new BossBattleServer(CraftChatMessage.fromString("月球领主", true)[0], BarColor.GREEN, BarStyle.PROGRESS)
	{_bossbar}.setVisible(true)
	set metadata "bossbar" of {_yqlz} to {_bossbar}
	
	set {_targets} to setupBossTarget({_yqlz}, 7, {_ply}, false, {_bossbar})
	set metadata "targets" of {_yqlz} to {_targets}
	set metadata "targets" of {_hand1} to {_targets}
	set metadata "targets" of {_hand2} to {_targets}
	set metadata "targets" of {_head} to {_targets}
	set {_healthMulti} to getBossHealthMulti({_targets}.size())
	
	{_yqlz}.setCustomName("月球领主心脏")
	add "isMonster" to scoreboard tags of {_yqlz}
	add "isBOSS" to scoreboard tags of {_yqlz}
	add "noDamage" to scoreboard tags of {_yqlz}
	{_hand1}.setCustomName("月球领主手")
	add "isMonster" to scoreboard tags of {_hand1}
	add "isBOSS" to scoreboard tags of {_hand1}
	{_hand2}.setCustomName("月球领主手")
	add "isMonster" to scoreboard tags of {_hand2}
	add "isBOSS" to scoreboard tags of {_hand2}
	{_head}.setCustomName("月球领主")
	add "isMonster" to scoreboard tags of {_head}
	add "isBOSS" to scoreboard tags of {_head}
	loop {_bg::*}:
		add "isMonster" to scoreboard tags of (loop-value)
		add "isBOSS" to scoreboard tags of (loop-value)
		add "noDamage" to scoreboard tags of (loop-value)
	{_bg::1}.setCustomName("月球领主身体")
	{_bg::2}.setCustomName("月球领主左手")
	{_bg::3}.setCustomName("月球领主右手")
	{_bg::4}.setCustomName("月球领主头")
	
	{_yqlz}.setRemoveWhenFarAway(false)
	{_yqlz}.setGravity(false)
	{_hand1}.setRemoveWhenFarAway(false)
	{_hand1}.setGravity(false)
	{_hand2}.setRemoveWhenFarAway(false)
	{_hand2}.setGravity(false)
	{_head}.setRemoveWhenFarAway(false)
	{_head}.setGravity(false)
	loop {_bg::*}:
		(loop-value).setRemoveWhenFarAway(false)
		(loop-value).setGravity(false)
	slimeResize({_yqlz}, 6)
	slimeResize({_hand1}, 4)
	slimeResize({_hand2}, 4)
	slimeResize({_head}, 4)
	slimeResize({_bg::1}, 35)
	slimeResize({_bg::2}, 25)
	slimeResize({_bg::3}, 25)
	slimeResize({_bg::4}, 30)
	
	set {_bossArlst} to new ArrayList(8)
	{_bossArlst}.add({_yqlz})
	{_bossArlst}.add({_hand1})
	{_bossArlst}.add({_hand2})
	{_bossArlst}.add({_head})
	loop {_bg::*}:
		{_bossArlst}.add(loop-value)
		(loop-value).setAI(false)
	{_yqlz}.setAI(false)
	{_hand1}.setAI(false)
	{_hand2}.setAI(false)
	{_head}.setAI(false)
	{BOSS}.put("月球领主", {_bossArlst})
	
	set max health of {_yqlz} to round(150000 * {_healthMulti})
	set health of {_yqlz} to round(150000 * {_healthMulti})
	set max health of {_hand1} to round(75000 * {_healthMulti})
	set health of {_hand1} to round(75000 * {_healthMulti})
	set max health of {_hand2} to round(75000 * {_healthMulti})
	set health of {_hand2} to round(75000 * {_healthMulti})
	set max health of {_head} to round(135000 * {_healthMulti})
	set health of {_head} to round(135000 * {_healthMulti})
	
	set {_indexAI} to 0
	set {_target} to {_ply}
	set metadata "target" of {_yqlz} to {_target}
	set {_reachLeft} to 15
	set {_reachRight} to 15
	set {_indexAIhand1} to 0
	set {_indexAIhand2} to 0
	set {_indexAIhead} to 0
	
	set {_totalHealth} to max health of {_head} + max health of {_hand1} + max health of {_hand2} + max health of {_yqlz}
	
	while health of {_yqlz} > 0:
		set {_currHealth} to health of {_head} + health of {_hand1} + health of {_hand2} + health of {_yqlz}
		{_bossbar}.setProgress[float]({_currHealth} / {_totalHealth})
		#clear invalid targets
		if {_target} is set:
			checkBossTarget({_target}, {_yqlz}, true) is false
			clear {_target}
		
		if {_target} is not set:
			loop toSkList {_targets}.keySet():
				set {_ply} to "%loop-value%" parsed as player
				checkBossTarget({_ply}, {_yqlz}, true) is true
				set {_target} to {_ply}
				set metadata "target" of {_yqlz} to {_target}
				stop loop
			#find new target if avaliable, otherwise flee
		if {_target} is not set:
			#flee
			set max health of {_yqlz} to 1
			{_yqlz}.remove()
			stop loop
		else:
			#AI part starting here
			set {_centerLoc} to (location of {_target}).add(sin({_indexAI} / 2) * 50, 0, cos({_indexAI} / 2) * 50)
			set {_dV} to {_centerLoc}.subtract(location of {_bg::1}).toVector()
			if vector length of {_dV} > 2.25:
				vector length of {_dV} < 100
				set vector length of {_dV} to 2.25
			set {_centerLoc} to (location of {_bg::1}).add({_dV})
			teleport {_bg::1} to {_centerLoc}
			set {_dV} to (location of {_target}).subtract({_centerLoc}).toVector()
			set {_dVleft} to new vector with yaw (vector yaw of {_dV} - 90) and pitch 0
			set vector length of {_dVleft} to {_reachLeft}
			teleport {_bg::2} to {_centerLoc}.clone().add(0, 8, 0).add({_dVleft})
			set {_dVright} to new vector with yaw (vector yaw of {_dV} + 90) and pitch 0
			set vector length of {_dVright} to {_reachRight}
			teleport {_bg::3} to {_centerLoc}.clone().add(0, 8, 0).add({_dVright})
			teleport {_bg::4} to {_centerLoc}.clone().add(0, 12, 0)
			loop {_bg::*}:
				if loop-index is "1":
					set {_eye} to {_yqlz}
					set {_offSet} to 8
				else if loop-index is "2":
					set {_eye} to {_hand1}
					set {_offSet} to 3
				else if loop-index is "3":
					set {_eye} to {_hand2}
					set {_offSet} to 3
				else if loop-index is "4":
					set {_eye} to {_head}
					set {_offSet} to 9.25
				set {_vec} to (eye location of {_target}).subtract(location of loop-value).toVector()
				set {_yaw} to vector yaw of {_vec}
				set {_eye}.getHandle().yaw to {_yaw}
				set (loop-value).getHandle().yaw to {_yaw}
				set {_vec} to new vector with yaw {_yaw} and pitch 0
				set vector length of {_vec} to (loop-value).getSize() * 0.255
				teleport {_eye} to (location of loop-value).add({_vec}).add(0, {_offSet}, 0)
			#attack
			if ({_indexAIhand1} + {_indexAIhand2} + {_indexAIhead}) < 3:
				if max health of {_hand1} > 1:
					{_indexAIhand1} <= 0
					if {_indexAIhand1} = 0:
						if chance of 0.4:
							handleMoonLordPerk({_hand1}, "幻影球", {_yqlz})
							set {_indexAIhand1} to -40
						else if chance of 0.75:
							handleMoonLordPerk({_hand1}, "幻影眼", {_yqlz})
							set {_indexAIhand1} to -20
						else:
							handleMoonLordPerk({_hand1}, "幻影矢", {_yqlz})
							set {_indexAIhand1} to -15
					add 1 to {_indexAIhand1}
					set {_reachLeft} to metadata "reach" of {_hand1}
				else:
					set {_indexAIhand1} to 1
					set max health of {_hand1} to 2
					spawn a slime at location of {_hand1}
					{_hand1}.setCustomName("月球领主手&9")
					{_attrMapHand1}.put("damage", 160)
					set {_trueEye} to spawned entity
					handleMoonLordPerk({_trueEye}, "克苏鲁真眼", {_yqlz})
				if max health of {_hand2} > 1:
					{_indexAIhand2} <= 0
					if {_indexAIhand2} = 0:
						if chance of 0.4:
							handleMoonLordPerk({_hand2}, "幻影球", {_yqlz})
							set {_indexAIhand2} to -40
						else if chance of 0.75:
							handleMoonLordPerk({_hand2}, "幻影眼", {_yqlz})
							set {_indexAIhand2} to -20
						else:
							handleMoonLordPerk({_hand2}, "幻影矢", {_yqlz})
							set {_indexAIhand2} to -15
					add 1 to {_indexAIhand2}
					set {_reachRight} to metadata "reach" of {_hand2}
				else:
					set {_indexAIhand2} to 1
					set max health of {_hand2} to 2
					spawn a slime at location of {_hand2}
					{_hand2}.setCustomName("月球领主手&9")
					{_attrMapHand2}.put("damage", 160)
					set {_trueEye} to spawned entity
					handleMoonLordPerk({_trueEye}, "克苏鲁真眼", {_yqlz})
				if max health of {_head} > 1:
					{_indexAIhead} <= 0
					if {_indexAIhead} = 0:
						set {_indexAIhead} to -80
						handleMoonLordPerk({_head}, "幻影矢", {_yqlz})
					else if {_indexAIhead} = -60:
						handleMoonLordPerk({_head}, "幻影死光", {_yqlz})
					else if {_indexAIhead} = -20:
						handleMoonLordPerk({_head}, "幻影矢", {_yqlz})
					add 1 to {_indexAIhead}
				else:
					set {_indexAIhead} to 1
					set max health of {_head} to 2
					spawn a slime at location of {_head}
					{_head}.setCustomName("月球领主&9")
					{_attrMapHead}.put("damage", 160)
					set {_trueEye} to spawned entity
					handleMoonLordPerk({_trueEye}, "克苏鲁真眼", {_yqlz})
			else:
				remove "noDamage" from scoreboard tags of {_yqlz}
				{_yqlz}.setCustomName("月球领主心脏&1")
		add 1 to {_indexAI}
		wait 5 ticks
	{_bossbar}.setVisible(false)
	{BOSS}.remove("月球领主")
	loop all players in {_world}:
		apply blindness to loop-player for 10 ticks
	{_yqlz}.remove()
	{_hand1}.remove()
	{_hand2}.remove()
	{_head}.remove()
	loop {_bg::*}:
		(loop-value).remove()
	#drop
	set {_maxHealth} to max health of {_yqlz}
	{_maxHealth} is not 1
	broadcast "&d&l月球领主 被击败了."
	set {_targets} to metadata "targets" of {_yqlz}
	set {_killers} to {_targets}.keySet().iterator()
	set {_drop} to a leather named "&r专家模式福袋" with lore "&7月球领主"
	while {_killers}.hasNext():
		set {_ply} to {_killers}.next()
		set {_player} to {_ply} parsed as player
		name of {_player} is {_ply}
		set {_tier} to metadata "tier" of {_player}
		if {_targets}.get({_ply}) * 5 > ({_maxHealth}) / ({_targets}.size()):
			if {_tier} = 7:
				set metadata "tier" of {_player} to 8
				set yml value "stats.tier" from file "plugins/PlayerData/%name of {_player}%.yml" to 8
			if {_player} can hold {_drop}:
				send "&a恭喜你击败了BOSS[&r月球领主&a]!您的战利品已经放在背包里了。" to {_player}
				give {_drop} to {_player}
			else:
				send "&a恭喜你击败了BOSS[&r月球领主&a]!您的背包空间不足以容纳战利品，请迅速拾起脚下的战利品袋，以免丢失。" to {_player}
				drop {_drop} at (eye location of {_player}) without velocity
		else:
			send "&aBOSS 月球领主 已经被击败。很遗憾，您的输出不足以获得一份战利品。" to {_player}

function handleMoonLordPerk(entity: entity, type: text, yqlz: entity):
	set {_entityName} to trimText(name of {_entity})
	if {_type} is "睁眼":
		{_entityName} is not "克苏鲁真眼"
		remove "noDamage" from scoreboard tags of {_entity}
		set {_index} to 3
		loop 3 times:
			if max health of {_entity} < 10:
				stop trigger
			{_entity}.setCustomName("%{_entityName}%§%{_index}%")
			subtract 1 from {_index}
			wait 5 ticks
		if max health of {_entity} < 10:
			stop trigger
		{_entity}.setCustomName({_entityName})
	else if {_type} is "闭眼":
		{_entityName} is not "克苏鲁真眼"
		add "noDamage" to scoreboard tags of {_entity}
		set {_index} to 1
		loop 4 times:
			if max health of {_entity} < 10:
				stop trigger
			{_entity}.setCustomName("%{_entityName}%§%{_index}%")
			add 1 to {_index}
			wait 5 ticks
	else:
		set {_target} to metadata "target" of {_yqlz}
		if {_type} is "幻影矢":
			set {_attrMap} to new HashMap(5)
			{_attrMap}.put("damage", 240)
			{_attrMap}.put("damageType", "Arrow")
			{_attrMap}.put("knockback", 2)
			
			handleMoonLordPerk({_entity}, "睁眼", {_yqlz})
			if {_entityName} is not "克苏鲁真眼":
				wait 25 ticks
			else:
				wait 10 ticks
			loop 2 times:
				spawn a slime at location of {_entity}
				set {_projectile} to spawned entity
				{_projectile}.setSize(6)
				set gravity of {_projectile} to off
				{_projectile}.setRemoveWhenFarAway(false)
				set {_projectile}.getHandle().noclip to true
				set {_projectile}.getHandle().goalSelector to new PathfinderGoalSelector({_projectile}.getHandle().getWorld().methodProfiler)
				add "noDamage" to scoreboard tags of {_projectile}
				add "isMonster" to scoreboard tags of {_projectile}
				set metadata "attrMap" of {_projectile} to {_attrMap}
				{_projectile}.setCustomName({_type})
				set {_lastLoc} to location of {_target}
				wait 1 tick
				set {_dV} to (location of {_target}).subtract({_lastLoc}).toVector()
				set {_v} to (eye location of {_target}).subtract(eye location of {_projectile}).toVector()
				{_v}.add({_dV}.multiply((vector length of {_v}) / 8))
				if vector length of {_v} = 0:
					set {_v} to vector(0, 1, 0)
				set vector length of {_v} to 6
				set velocity of {_projectile} to {_v}
				add {_v} to {_velocities::*}
				add {_projectile} to {_projectiles::*}
				wait 6 ticks
			handleMoonLordPerk({_entity}, "闭眼", {_yqlz})
			loop 10 times:
				loop {_projectiles::*}:
					set velocity of loop-value-2 to {_velocities::%loop-index%}
				wait 3 ticks
			loop {_projectiles::*}:
				loop-value.remove()
		else if {_type} is "幻影球":
			set {_attrMap} to new HashMap(5)
			{_attrMap}.put("damage", 400)
			{_attrMap}.put("damageType", "Arrow")
			{_attrMap}.put("knockback", 2)
			
			handleMoonLordPerk({_entity}, "睁眼", {_yqlz})
			loop 10 times:
				if {_entity} has scoreboard tag "noDamage":
					stop loop
				spawn a slime at location of {_entity}
				set {_projectile} to spawned entity
				{_projectile}.setSize(8)
				set velocity of {_projectile} to vector(0, 0.25, 0)
				set gravity of {_projectile} to off
				{_projectile}.setRemoveWhenFarAway(false)
				set {_projectile}.getHandle().noclip to true
				set {_projectile}.getHandle().goalSelector to new PathfinderGoalSelector({_projectile}.getHandle().getWorld().methodProfiler)
				add "noDamage" to scoreboard tags of {_projectile}
				add "isMonster" to scoreboard tags of {_projectile}
				set metadata "attrMap" of {_projectile} to {_attrMap}
				{_projectile}.setCustomName({_type})
				add {_projectile} to {_projectiles::*}
				set metadata "reach" of {_entity} to 15 + (loop-number * 2)
				wait 10 ticks
			set {_projectile} to a random element out of {_projectiles::*}
			set {_v} to (eye location of {_target}).subtract(eye location of {_projectile}).toVector()
			if vector length of {_v} = 0:
				set {_v} to vector(0, 1, 0)
			set vector length of {_v} to 4.5
			handleMoonLordPerk({_entity}, "闭眼", {_yqlz})
			loop 50 times:
				if mod(loop-number, 10) = 0:
					if loop-number = 40:
						set {_lastLoc} to location of {_target}
						wait 1 tick
						set {_dV} to (location of {_target}).subtract({_lastLoc}).toVector()
						set {_projectile} to a random element out of {_projectiles::*}
						set {_v} to (eye location of {_target}).subtract(eye location of {_projectile}).toVector()
						{_v}.add({_dV}.multiply(15))
						if vector length of {_v} = 0:
							set {_v} to vector(0, 1, 0)
						set vector length of {_v} to (vector length of {_v}) / 15
					loop {_projectiles::*}:
						set velocity of loop-value-2 to {_v}
					set metadata "reach" of {_entity} to 35 - (loop-number * 0.4)
				wait 1 tick
				loop {_projectiles::*}:
					if distance between loop-value-2 and {_target} < 4:
						remove loop-value-2 from {_projectiles::*}
						handleEntityExplode(loop-value-2, {_null})
						(loop-value-2).remove()
			wait 10 ticks
			loop {_projectiles::*}:
				handleEntityExplode(loop-value, {_null})
				(loop-value).remove()
		else if {_type} is "幻影眼":
			set {_attrMap} to new HashMap(5)
			{_attrMap}.put("damage", 240)
			{_attrMap}.put("damageType", "Arrow")
			{_attrMap}.put("knockback", 2)
			
			handleMoonLordPerk({_entity}, "睁眼", {_yqlz})
			loop 25 times:
				if {_entity} has scoreboard tag "noDamage":
					{_entityName} is not "克苏鲁真眼"
					stop loop
				set {_v} to vector((a random number between -1 and 1), (a random number between -1 and 1), (a random number between -1 and 1))
				set {_projectile} to mobProjectile({_entity}, {_v}, {_attrMap}, "幻影眼")
				set gravity of {_projectile} to off
				add "isGranade" to scoreboard tags of {_projectile}
				set glowing of {_projectile} to on
				handleMoonLordPerk({_projectile}, "幻影眼AI", {_yqlz})
				if {_entityName} is "克苏鲁真眼":
					wait 2 ticks
				else:
					wait 4 ticks
			handleMoonLordPerk({_entity}, "闭眼", {_yqlz})
		else if {_type} is "幻影眼AI":
			set {_trailColor} to new ArrayList(1)
			{_trailColor}.add("100|255|255")
			set {_lastLoc} to location of {_entity}
			loop 10 times:
				set {_v} to velocity of {_entity}
				if vector length of {_v} > 0:
					set vector length of {_v} to vector length of {_v} * 0.9
					set velocity of {_entity} to {_v}
				
				set {_trailVec} to (location of {_entity}).subtract({_lastLoc}).toVector()
				handleParticleLine({_trailVec}, 0.5, 0.25, {_lastLoc}, {_trailColor})
				set {_lastLoc} to location of {_entity}
				wait 4 ticks
			
			set {_following} to true
			set {_liveTime} to 30
			while {_entity}.isDead() is false:
				if {_following} is true:
					set {_dV} to (eye location of {_target}).subtract(location of {_entity}).toVector()
					if vector length of {_dV} = 0:
						set {_dV} to vector(0, 1, 0)
					set vector length of {_v} to min(sqrt(vector length of {_dV}), 4)
					{_v}.add({_dV})
					set y of {_dV} to 0
					if vector length of {_dV} < 15:
						set {_following} to false
					if {_liveTime} < 20:
						set {_following} to false
					if vector length of {_v} = 0:
						set {_v} to vector(0, -1, 0)
					if vector pitch of {_v} < 30:
						set vector pitch of {_v} to 30
					set vector length of {_v} to 2.5
				set velocity of {_entity} to {_v}
				set {_trailVec} to (location of {_entity}).subtract({_lastLoc}).toVector()
				handleParticleLine({_trailVec}, 0.5, 0.25, {_lastLoc}, {_trailColor})
				set {_lastLoc} to location of {_entity}
				subtract 1 from {_liveTime}
				if {_liveTime} <= 0:
					handleProjectileDestroy({_entity})
					{_entity}.remove()
				wait 4 ticks
		else if {_type} is "幻影死光":
			handleMoonLordPerk({_entity}, "睁眼", {_yqlz})
			wait 25 ticks
			if {_entity} has scoreboard tag "noDamage":
				stop trigger
			set {_particleColor} to new ArrayList(1)
			{_particleColor}.add("100|255|255")
			set {_dV} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
			if vector pitch of {_dV} < 0:
				set {_pitch} to max((vector pitch of {_dV}) - 40, -90)
				set {_dPitch} to 6
			else:
				set {_pitch} to min((vector pitch of {_dV}) + 40, 90)
				set {_dPitch} to -6
			set {_yaw} to vector yaw of {_dV}
			set {_extra} to new HashMap(2)
			{_extra}.put("particleInterval", 1)
			loop 20 times:
				if {_entity} has scoreboard tag "noDamage":
					stop trigger
				set {_dVec} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
				if {_dV} is set:
					set {_diff} to abs(vector pitch of {_dVec} - {_pitch})
					if {_diff} < abs({_dPitch}):
						set {_pitch} to (vector pitch of {_dVec}) - {_dPitch}
						clear {_dV}
				
				set {_yawDiff} to vector yaw of {_dVec} - {_yaw}
				if abs({_yawDiff}) > 180:
					if {_yawDiff} > 0:
						subtract 360 from {_yawDiff}
					else:
						add 360 to {_yawDiff}
				set {_yaw} to {_yaw} + {_yawDiff} / 2
				set {_v} to vector((a random number between -1 and 1), (a random number between -1 and 1), (a random number between -1 and 1))
				add {_dPitch} to {_pitch}
				handleStrikeLine({_entity}, {_yaw}, {_pitch}, 96, (a diamond), {_particleColor}, (new ArrayList()), true, {_extra})
				wait 5 ticks
			handleMoonLordPerk({_entity}, "闭眼", {_yqlz})
		else if {_type} is "克苏鲁真眼":
			slimeResize({_entity}, 5)
			{_entity}.setCustomName("克苏鲁真眼")
			set {_attrMap} to new HashMap(5)
			{_attrMap}.put("damage", 400)
			{_attrMap}.put("damageType", "Melee")
			{_attrMap}.put("knockback", 1)
			set {_attrMapSphere} to {_attrMap}.clone()
			{_attrMapSphere}.put("damage", 440)
			set metadata "attrMap" of {_entity} to {_attrMap}
			set metadata "damageSourcePlayer" of {_entity} to {_yqlz}
			add "noDamage" to scoreboard tags of {_entity}
			add "isMonster" to scoreboard tags of {_entity}
			add "keepChunkLoading" to scoreboard tags of {_entity}
			{_entity}.setRemoveWhenFarAway(false)
			set gravity of {_entity} to off
			set {_entity}.getHandle().noclip to true
			set {_indexAI} to 0
			set {_indexRotation} to (a random number between 0 and 360)
			add 0 to {_teleportAI::*}
			add 15 to {_teleportAI::*}
			add 50 to {_teleportAI::*}
			add 75 to {_teleportAI::*}
			set {_extra} to new HashMap(2)
			{_extra}.put("particleInterval", 1)
			while health of {_yqlz} > 0:
				set {_AI} to mod({_indexAI}, 150)
				set {_target} to metadata "target" of {_yqlz}
				if {_teleportAI::*} contains {_AI}:
					set {_destination} to (location of {_target}).add(sin({_indexRotation}) * 24, 8, cos({_indexRotation}) * 24)
					if {_AI} = 50:
						add 24 to y-coordinate of {_destination}
					teleport {_entity} to {_destination}
					wait 2 seconds
				set {_v} to vector(0, 0, 0)
				set velocity of {_entity} to {_v}
				
				if {_AI} > 100:
					set {_AI} to {_AI} - 100
				if {_AI} = 0:
					handleMoonLordPerk({_entity}, "幻影矢", {_yqlz})
					clear {_projectiles::*}
				else if {_AI} is between 15 and 48:
					set velocity of {_entity} to vector(0, 0, 0)
					if {_AI} is between 15 and 20:
						if {_AI} = 15:
							set {_dVec} to vector(0, 5, 0)
						else if {_AI} = 16:
							set {_dVec} to vector(5, 0, 0)
						else if {_AI} = 17:
							set {_dVec} to vector(0, 0, 5)
						else if {_AI} = 18:
							set {_dVec} to vector(0, -5, 0)
						else if {_AI} = 19:
							set {_dVec} to vector(-5, 0, 0)
						else:
							set {_dVec} to vector(0, 0, -5)
						spawn a slime at (location of {_entity}).add({_dVec})
						set {_projectile} to spawned entity
						{_projectile}.setSize(8)
						set gravity of {_projectile} to off
						{_projectile}.setRemoveWhenFarAway(false)
						set {_projectile}.getHandle().noclip to true
						add "noDamage" to scoreboard tags of {_projectile}
						add "isMonster" to scoreboard tags of {_projectile}
						set metadata "attrMap" of {_projectile} to {_attrMapSphere}
						set {_projectile}.getHandle().goalSelector to new PathfinderGoalSelector({_projectile}.getHandle().getWorld().methodProfiler)
						{_projectile}.setCustomName("幻影球")
						add {_projectile} to {_projectiles::*}
					else if {_AI} is between 30 and 48:
						if {_AI} is 30:
							set {_dV} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
							if vector length of {_dV} = 0:
								set {_dV} to vector(0, -1, 0)
							set vector length of {_dV} to 4.5
						if {_AI} < 40:
							set velocity of {_entity} to {_dV}
						loop {_projectiles::*}:
							set velocity of loop-value to {_dV}
							if distance between loop-value and {_target} < 5:
								remove loop-value from {_projectiles::*}
								handleEntityExplode(loop-value, {_null})
								(loop-value).remove()
				else if {_AI} = 49:
					loop {_projectiles::*}:
						handleEntityExplode(loop-value, {_null})
						(loop-value).remove()
				else if {_AI} = 50:
					handleMoonLordPerk({_entity}, "幻影眼", {_yqlz})
				else if {_AI} is between 75 and 100:
					set velocity of {_entity} to vector(0, 0, 0)
					if {_AI} = 75:
						set {_particleColor} to new ArrayList(1)
						{_particleColor}.add("100|255|255")
						set {_dV} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
						if vector pitch of {_dV} < 0:
							set {_pitch} to max((vector pitch of {_dV}) - 40, -90)
							set {_dPitch} to 5
						else:
							set {_pitch} to min((vector pitch of {_dV}) + 40, 90)
							set {_dPitch} to -5
						set {_yaw} to vector yaw of {_dV}
					set {_dVec} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
					if {_dV} is set:
						set {_diff} to abs(vector pitch of {_dVec} - {_pitch})
						if {_diff} < abs({_dPitch}):
							set {_pitch} to (vector pitch of {_dVec}) - {_dPitch}
							clear {_dV}
					set {_yawDiff} to vector yaw of {_dVec} - {_yaw}
					if abs({_yawDiff}) > 180:
						if {_yawDiff} > 0:
							subtract 360 from {_yawDiff}
						else:
							add 360 to {_yawDiff}
					set {_yaw} to {_yaw} + {_yawDiff} / 2
					add {_dPitch} to {_pitch}
					add 0.3 to {_indexRotation}
					handleStrikeLine({_entity}, {_yaw}, {_pitch}, 48, (a diamond), {_particleColor}, (new ArrayList()), true, {_extra})
				subtract 0.3 from {_indexRotation}
				add 1 to {_indexAI}
				wait 2 ticks
			{_entity}.remove()
			loop {_projectiles::*}:
				loop-value.remove()