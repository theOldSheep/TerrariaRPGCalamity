#~spawnNPC(location of "laomianyang" parsed as player, "向导")
import:
	java.util.ArrayList
	java.util.HashMap
	java.util.HashSet
	lk.vexview.api.VexViewAPI
	lk.vexview.event.ButtonClickEvent
	lk.vexview.event.gui.VexGuiCloseEvent
	lk.vexview.gui.components.VexButton
	lk.vexview.gui.components.VexHoverText
	lk.vexview.gui.components.VexText
	lk.vexview.gui.VexGui
	me.libraryaddict.disguise.DisguiseAPI
	me.libraryaddict.disguise.disguisetypes.DisguiseType
	me.libraryaddict.disguise.disguisetypes.MobDisguise
	net.minecraft.server.v1_12_R1.EntityInsentient
	net.minecraft.server.v1_12_R1.EntityMonster
	net.minecraft.server.v1_12_R1.EntitySlime
	net.minecraft.server.v1_12_R1.EntityTippedArrow
	net.minecraft.server.v1_12_R1.MathHelper
	net.minecraft.server.v1_12_R1.PathfinderGoalAvoidTarget
	net.minecraft.server.v1_12_R1.PathfinderGoalFloat
	net.minecraft.server.v1_12_R1.PathfinderGoalLookAtPlayer
	net.minecraft.server.v1_12_R1.PathfinderGoalMoveTowardsRestriction
	net.minecraft.server.v1_12_R1.PathfinderGoalRandomLookaround
	net.minecraft.server.v1_12_R1.PathfinderGoalRandomStrollLand
	net.minecraft.server.v1_12_R1.PathfinderGoalSelector
	org.bukkit.entity.EntityType
	org.bukkit.entity.Monster
	org.bukkit.entity.Villager$Profession as Profession
	org.bukkit.event.inventory.InventoryDragEvent

on script load:
	wait 1 second
	set {_world} to world "world"
	{_world}.getChunkAt({_world}.getSpawnLocation()).load()
	#clear old NPC's
	set {_chunks} to new ArrayList()
	loop ...({NPC}.values()):
		set {_c} to {_world}.getChunkAt((loop-value).getLocation())
		if {_chunks}.contains({_c}) is false:
			{_chunks}.add({_c})
		add 1 to {_index}
	loop ...{_chunks}:
		set {_c} to loop-value
		{_c}.load()
		set {_index} to 0
		set {_e} to {_c}.getEntities()
		while {_e}[{_index}] is set:
			if {_e}[{_index}] is not armor stand:
				{_e}[{_index}] has scoreboard tag "isNPC"
				set max health of {_e}[{_index}] to 1
				{_e}[{_index}].remove()
			add 1 to {_index}
	#spawn new NPC's
	set {questFish} to a random text out of (yml nodes "questFish" from file "plugins/Data/fishing.yml")
	set {questFishCompleted} to new HashSet()
	if {NPC} is not set:
		set {NPC} to new HashMap(4)
	if {NPC} is not instance of HashMap:
		set {NPC} to new HashMap(4)
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "向导")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "哥布林工匠")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "护士")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "军火商")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "爆破专家")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "渔夫")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "建材商人")
	set {_loc} to {_world}.getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3))
	spawnNPC({_loc}, "裁缝")
on skript disable:
	set {_world} to world "world"
	set {_chunks} to new ArrayList()
	loop ...({NPC}.values()):
		set {_c} to {_world}.getChunkAt((loop-value).getLocation())
		if {_chunks}.contains({_c}) is false:
			{_chunks}.add({_c})
		add 1 to {_index}
	loop ...{_chunks}:
		set {_c} to loop-value
		{_c}.load()
		set {_index} to 0
		set {_e} to {_c}.getEntities()
		while {_e}[{_index}] is set:
			if {_e}[{_index}] is not armor stand:
				{_e}[{_index}] has scoreboard tag "isNPC"
				set max health of {_e}[{_index}] to 1
				{_e}[{_index}].remove()
			add 1 to {_index}

function spawnNPC(loc: location, type: text):
	set {_loc} to (location of highest solid block at {_loc}).add(0, 5, 0)
	set {_world} to world of {_loc}
	set {_NPC} to {_world}.spawnEntity({_loc}, EntityType.IRON_GOLEM)
	
	{_NPC}.setCustomName({_type})
	{_NPC}.setCustomNameVisible(true)
	{_NPC}.setRemoveWhenFarAway(false)
	
	handleNPC({_NPC})

on chunk load:
	loop ...((event-chunk).getEntities()):
		set {_NPC} to loop-value
		if {_NPC} is living entity:
			if {_NPC} has scoreboard tag "isNPC":
				if max health of {_NPC} is 2:
					set max health of {_NPC} to 500
					set health of {_NPC} to 500
					handleNPC({_NPC})
					continue
			else if {_NPC} is armor stand:
				continue
		else if {_NPC} is dropped item:
			continue
		{_NPC}.remove()
		
function NPCAttackTarget(NPC: entity, projectileVelocity: number, hasGravity: boolean):
	set {_NPCType} to name of {_NPC}
	if {_NPCType} is "护士":
		set {_health} to 2000
		loop all living entities in radius 24 of {_NPC}:
			if loop-entity has scoreboard tag "isNPC":
				health of loop-entity < {_health}
				health of loop-entity > 0
				(loop-entity).isDead() is not true
				set {_health} to health of loop-entity
				set {_target} to loop-entity
		if {_target} is set:
			set {_healAmount} to min(max health of {_target} - health of {_target}, 40)
			heal {_target} by {_healAmount}
			displayHolo({_target}, {_healAmount}, false, "回血")
			play 25 happy villager 1 above location of {_target}
	else:
		set {_distance} to 99999
		if {_NPCType} is "渔夫":
			set {_loopDist} to 12
		else if {_NPCType} is "建材商人":
			set {_loopDist} to 5
		else if {_NPCType} is "军火商":
			set {_loopDist} to 48
		else:
			set {_loopDist} to 24
		loop all living entities in radius {_loopDist} of {_NPC}:
			if checkCanDamage({_NPC}, loop-entity) is true:
				{_NPC}.hasLineOfSight(loop-entity) is true
				health of loop-entity > 0
				(loop-entity).isDead() is not true
				set {_currDist} to distance between {_NPC} and loop-entity
				if {_currDist} < {_distance}:
					set {_distance} to {_currDist}
					set {_target} to loop-entity
		if {_target} is set:
			if {_NPCType} is "渔夫":
				set {_eyeHeight} to 0.8
			else:
				set {_eyeHeight} to 1.6
			set {_eyeLoc} to (location of {_NPC}).add(0, {_eyeHeight}, 0)
			set {_attrMap} to metadata "attrMap" of {_NPC}
			set {_velocity} to (eye location of {_target}).subtract({_eyeLoc}).toVector()
			if {_NPCType} is "建材商人":
				set {_color} to new ArrayList()
				{_color}.add("150|150|0")
				handleStrikeLine({_NPC}, (vector yaw of {_velocity}), (vector pitch of {_velocity}), 6, getItem("金质短剑"), {_color}, (new ArrayList()), false, {_null})
			else:
				if {_hasGravity} is true:
					set {_timeFlight} to ((vector length of {_velocity}) / {_projectileVelocity}) / 20
					set vector length of {_velocity} to {_projectileVelocity}
					set {_offSet} to {_timeFlight} / 40
					add {_offSet} to y component of {_velocity}
				else:
					set vector length of {_velocity} to {_projectileVelocity}
				if {_NPCType} is "向导" or "渔夫":
					set {_arrow} to (world of {_NPC}).spawnEntity({_eyeLoc}, EntityType.ARROW)
					{_arrow}.setCustomName("木箭")
					{_arrow}.setVelocity({_velocity})
					{_arrow}.setShooter({_NPC})
					set metadata "attrMap" of {_arrow} to {_attrMap}.clone()
					set metadata "collided" of {_arrow} to new ArrayList()
					projectileAI({_arrow}, "BOW")
				else if {_NPCType} is "裁缝":
					set {_projectile} to spawnProjectile({_NPC}, {_velocity}, {_attrMap}, "骷髅头", {_eyeLoc})
					set metadata "penetration" of {_projectile} to 2
					set gravity of {_projectile} to off
					projectileAI({_projectile}, "MAGIC_PROJECTILE")
				else if {_NPCType} is "军火商":
					set {_projectile} to spawnProjectile({_NPC}, {_velocity}, {_attrMap}, "火枪子弹", {_eyeLoc})
					set gravity of {_projectile} to off
					projectileAI({_projectile}, "GUN")
				else if {_NPCType} is "哥布林工匠":
					set {_projectile} to spawnProjectile({_NPC}, {_velocity}, {_attrMap}, "尖刺球", {_eyeLoc})
					set metadata "Bounce" of {_projectile} to 12
					projectileAI({_arrow}, "Arrow")
				else if {_NPCType} is "爆破专家":
					set {_projectile} to spawnProjectile({_NPC}, {_velocity}, {_attrMap}, "手榴弹", {_eyeLoc})
					set metadata "Bounce" of {_projectile} to 4
					add "isGranade" to scoreboard tags of {_projectile}
					projectileAI({_arrow}, "Arrow")
function handleNPC(NPC: entity):
	set {_AIversion} to 0
	set {_AIversion} to metadata "AIversion" of {_NPC}
	add 1 to {_AIversion}
	set metadata "AIversion" of {_NPC} to {_AIversion}
	set {_NPCType} to name of {_NPC}
	if {_NPCType} is "渔夫":
		set {_disguise} to new MobDisguise(DisguiseType.VILLAGER, false)
		{_disguise}.getWatcher().setProfession(Profession.BUTCHER)
	else:
		set {_disguise} to new MobDisguise(DisguiseType.VILLAGER, true)
		if {_NPCType} is "向导" or "护士" or "建材商人" or "裁缝":
			{_disguise}.getWatcher().setProfession(Profession.LIBRARIAN)
		else if {_NPCType} is "军火商" or "哥布林工匠":
			{_disguise}.getWatcher().setProfession(Profession.BLACKSMITH)
		else if {_NPCType} is "爆破专家":
			{_disguise}.getWatcher().setProfession(Profession.PRIEST)
	{_disguise}.setReplaceSounds(true)
	DisguiseAPI.disguiseEntity({_NPC}, {_disguise})
	
	add "isNPC" to scoreboard tags of {_NPC}
	set {_NPCnms} to {_NPC}.getHandle()
	set {_NPCnms}.goalSelector to new PathfinderGoalSelector({_NPCnms}.getWorld().methodProfiler)
	set {_NPCnms}.targetSelector to new PathfinderGoalSelector({_NPCnms}.getWorld().methodProfiler)
	{_NPCnms}.goalSelector.a(0f, new PathfinderGoalFloat({_NPCnms}))
	{_NPCnms}.goalSelector.a(2f, new PathfinderGoalAvoidTarget({_NPCnms}, EntityMonster, 5f, 0.6d, 0.6d))
	{_NPCnms}.goalSelector.a(2f, new PathfinderGoalAvoidTarget({_NPCnms}, EntitySlime, 5f, 0.6d, 0.6d))
	{_NPCnms}.goalSelector.a(2f, new PathfinderGoalLookAtPlayer({_NPCnms}, EntityInsentient, 12f))
	{_NPCnms}.goalSelector.a(3f, new PathfinderGoalMoveTowardsRestriction({_NPCnms}, 1d))
	{_NPCnms}.goalSelector.a(4f, new PathfinderGoalRandomStrollLand({_NPCnms}, 0.6d))
	{_NPCnms}.goalSelector.a(6f, new PathfinderGoalRandomLookaround({_NPCnms}))
	
	#attrMap
	set max health of {_NPC} to 2000
	set health of {_NPC} to 2000
	set {_attrMap} to new HashMap()
	
	set metadata "attrMap" of {_NPC} to {_attrMap}
	set {_type} to {_NPC}.getCustomName()
	set {_NPCold} to {NPC}.get({_type})
	if {_NPCold} is set:
		{_NPCold}.getWorld().getChunkAt({_NPCold}.getLocation()).load()
		set max health of {_NPCold} to 1
		{_NPCold}.remove()
	{NPC}.put({_type}, {_NPC})
	
	{_attrMap}.put("crit", 4)
	{_attrMap}.put("damageTakenMulti", 0.75)
	{_attrMap}.put("defence", 40)
	{_attrMap}.put("knockback", 2)
	{_attrMap}.put("knockbackResistance", 0.5)
	{_attrMap}.put("invulnerabilityTick", 10)
	if {_NPCType} is "向导":
		{_attrMap}.put("damageType", "Arrow")
		{_attrMap}.put("damage", 30)
		set {_projectileVelocity} to 1.5
		set {_hasGravity} to true
	else if {_NPCType} is "渔夫":
		{_attrMap}.put("damageType", "Arrow")
		{_attrMap}.put("damage", 24)
		set {_projectileVelocity} to 1
		set {_hasGravity} to true
	else if {_NPCType} is "建材商人":
		{_attrMap}.put("damageType", "Melee")
		{_attrMap}.put("damage", 32)
		set {_projectileVelocity} to 4
		set {_hasGravity} to false
	else if {_NPCType} is "裁缝":
		{_attrMap}.put("damageType", "Magic")
		{_attrMap}.put("damage", 48)
		set {_projectileVelocity} to 1.25
		set {_hasGravity} to false
	else if {_NPCType} is "军火商":
		{_attrMap}.put("damageType", "Bullet")
		{_attrMap}.put("damage", 72)
		set {_projectileVelocity} to 2
		set {_hasGravity} to false
	else if {_NPCType} is "哥布林工匠":
		{_attrMap}.put("damageType", "Arrow")
		{_attrMap}.put("damage", 44)
		set {_projectileVelocity} to 0.35
		set {_hasGravity} to true
	else if {_NPCType} is "爆破专家":
		{_attrMap}.put("damageType", "Arrow")
		{_attrMap}.put("damage", 60)
		set {_projectileVelocity} to 0.4
		set {_hasGravity} to true
	
	set {_index} to 0
	set {_lastHealth} to -1
	set {_regenCD} to 0
	while 1 = 1:
		wait 10 ticks
		add 1 to {_index}
		if metadata "AIversion" of {_NPC} != {_AIversion}:
			stop trigger
		if (chunk at {_NPC}).isLoaded() is true:
			health of {_NPC} > 0
			max health of {_NPC} > 10
			{_NPC}.isDead() is not true
			# health regen
			if health of {_NPC} < {_lastHealth}:
				set {_regenCD} to 20
			set {_lastHealth} to health of {_NPC}
			if {_regenCD} > 0:
				remove 1 from {_regenCD}
			else:
				heal {_NPC} by 2
				set {_regenCD} to 3
			# attack
			if {_NPCType} is "向导":
				NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "渔夫":
				NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "护士":
				if mod({_index}, 2) = 0:
					NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "建材商人":
				NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "裁缝":
				if mod({_index}, 4) = 0:
					NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "军火商":
				if mod({_index}, 3) = 0:
					NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "哥布林工匠":
				if mod({_index}, 4) = 0:
					NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
			else if {_NPCType} is "爆破专家":
				if mod({_index}, 6) = 0:
					NPCAttackTarget({_NPC}, {_projectileVelocity}, {_hasGravity})
		
		if mod({_index}, 8) = 0:
			max health of {_NPC} > 1.01
			if (world of {_NPC}).getTime() is between 22470 and 22530:
				spawnNPC((world of {_NPC}).getSpawnLocation().add((a random number between -3 and 3), 0, (a random number between -3 and 3)), name of {_NPC})
				{_NPC}.remove()
				stop trigger
	

on VexGuiCloseEvent:
	wait 1 tick
	VexViewAPI.getPlayerCurrentGui(player) is not set
	"%try player.getOpenInventory().getType()%" is not "creative inventory" or "crafting table inventory"
	clear metadata "interactNPC" of player
on inventory close:
	set {_i} to event.getInventory()
	if {_i}.getTitle() is "&r重铸":
		giveItem(player, slot 4 of {_i})
		set slot 4 of {_i} to air
	else if trimText({_i}.getTitle()) is "垃圾箱":
		set {_yaw} to player.getHandle().yaw
		set {_pitch} to player.getHandle().pitch
		set {_v} to new vector with yaw {_yaw} and pitch {_pitch}
		set vector length of {_v} to 0.35
		loop 9 times:
			if slot ((loop-number) - 1) of {_i} is not air:
				set {_item} to slot ((loop-number) - 1) of {_i}
				drop {_item} at eye location of player
				set {_dropItem} to dropped item
				{_dropItem}.setTicksLived(1)
				set velocity of {_dropItem} to {_v}
	wait 1 tick
	VexViewAPI.getPlayerCurrentGui(player) is not set
	"%try player.getOpenInventory().getType()%" is not "creative inventory" or "crafting table inventory"
	clear metadata "interactNPC" of player
		
on ButtonClickEvent:
	set {_NPC} to metadata "interactNPC" of player
	set {_type} to name of {_NPC}
	set {_tierPly} to metadata "tier" of player
	if event.getButton().getId() is "CLOSE":
		close player's inventory
		stop trigger
	else if event.getButton().getId() is "CURSE":
		health of {NPC}.get("裁缝") > 0
		spawnKLW(player)
		{NPC}.get("裁缝").remove()
		close player's inventory
		stop trigger
	else if event.getButton().getId() is "HEAL":
		close player's inventory
		if {BOSS}.size() = 0:
			if health of player < max health of player:
				set {_cost} to ceil((max health of player - health of player) * 1.5 * max(metadata "tier" of player, 1)) * 100
				if player's money >= {_cost}:
					displayHolo(player, (max health of player - health of player), false, "回血")
					set health of player to max health of player
					remove {_cost} from player's money
					send "&a您已被治疗。" to player
				else:
					send "&a您没有足够的钱。" to player
			else:
				send "&r您没有受伤哦，无法进行治疗。" to player
		else:
			send "BOSS存活时无法使用护士治疗" to player
		stop trigger
	else if event.getButton().getId() is "HELP":
		set {_bg} to metadata "GUIbackgroundNPC" of player
		set {_w} to VexViewAPI.getPlayerClientWindowWidth(player)
		set {_h} to VexViewAPI.getPlayerClientWindowHeight(player)
		set {_gui} to new VexGui({_bg}, {_w} / 4, {_h} / 3, {_w} / 2, {_h} / 3)
		set {_comps} to new ArrayList(4)
		set {_texts} to yml value "NPC.messages.向导.tier%{_tierPly}%" from file "plugins/Data/setting.yml"
		{_comps}.add(new VexButton("HELP", "帮助", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
		{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 100, {_h} / 3 - 30, 26, 17))
		set {_text} to new ArrayList()
		set {_index} to {_texts}.size()
		set {_index} to a random integer between 0 and ({_index} - 1)
		set {_t} to {_texts}.get({_index})
		replace all "<name>" in {_t} with name of player
		#fit the text into the chatbox
		set {_wText} to {_w} * 10 / 11
		set {_split::*} to {_t} split at ""
		set {_totalW} to 0
		set {_t} to ""
		set {_textSize} to {_w} / 500
		loop {_split::*}:
			add ({_textSize} * 20) to {_totalW}
			if {_totalW} >= {_wText}:
				{_text}.add({_t})
				set {_t} to ""
				set {_totalW} to 0
			set {_t} to "%{_t}%%loop-value%"
		{_text}.add({_t})
		{_comps}.add(new VexText({_w} / 22, {_h} / 17, {_text}, {_textSize}))
		{_gui}.addAllComponents({_comps})
		VexViewAPI.openGui(player, {_gui})
	else if event.getButton().getId() is "SHOP":
		set {_shopInv} to a new chest inventory with 6 rows named "&r商店"
		set {_index} to 0
		loop ({_tierPly} + 1) times:
			clear {_items::*}
			set {_items::*} to ...yml value "NPC.shops.%{_type}%.tier%(loop-number) - 1%" from file "plugins/Data/setting.yml"
			{_items::*} is set
			loop {_items::*}:
				set slot {_index} of {_shopInv} to getRawItem(loop-value-2)
				add 1 to {_index}
		loop ({_tierPly} + 1) times:
			clear {_items::*}
			set {_items::*} to ...yml value "NPC.shops.%{_type}%.%{event}%.tier%(loop-number) - 1%" from file "plugins/Data/setting.yml"
			{_items::*} is set
			loop {_items::*}:
				set slot {_index} of {_shopInv} to getRawItem(loop-value-2)
				add 1 to {_index}
		set metadata "firstSell" of player to {_index}
		send "&a请点击背包里或GUI里的物品预览价值，然后点击最后一行中间的物品预览完成交易" to player
	else if event.getButton().getId() is "REFORGE":
		set {_shopInv} to a new chest inventory with 2 rows named "&r重铸"
		loop 3 times:
			set slot (loop-number) - 1 of {_shopInv} to a light gray stained glass pane named "&r(· w·)"
			set slot (loop-number) + 5 of {_shopInv} to a light gray stained glass pane named "&r(·w ·)"
		set slot 4 of {_shopInv} to a air
		set slot 3 of {_shopInv} to a light gray stained glass pane named "&a→" with lore "&r点我重铸"
		set slot 5 of {_shopInv} to a light gray stained glass pane named "&a←" with lore "&r点我重铸"
		set slot 13 of {_shopInv} to a light gray stained glass pane named "&a↑" with lore "&r点我重铸"
	{_shopInv} is set
	renderShop({_shopInv}, coinConversion(0), coinConversion(floor(player's money / 100)), false)
	open {_shopInv} for player
	set metadata "interactNPC" of player to {_NPC}
on InventoryDragEvent:
	set {_currInv} to try player.getOpenInventory()
	if {_currInv}.getTitle() is "&r重铸" or "&r商店":
		cancel event
on inventory click:
	set {_currInv} to try (event-player).getOpenInventory().getTopInventory()
	set {_plyInv} to try (event-player).getOpenInventory().getBottomInventory()
	set {_eventInv} to event.getClickedInventory()
	set {_NPC} to metadata "interactNPC" of (event-player)
	if trimText({_currInv}.getTitle()) is "重铸":
		if trimText({_eventInv}.getTitle()) is "重铸":
			set {_item} to 1 of slot 4 of {_currInv}
			cancel event
			if index of event-slot is not 4:
				if index of event-slot is 3 or 5 or 13:
					metadata "useCD" of player is not true
					if {_item} is air:
						message "&a请放入物品后重铸哦~"
						stop trigger
					if canReforge({_item}) is not true:
						message "&c本物品不能重铸哦~"
						stop trigger
					set {_cost} to getWorth(trimText(name of {_item})) * 1.25
					if (event-player)'s money < {_cost}:
						message "&c您的钱不够重铸了~"
						stop trigger
					remove {_cost} from (event-player)'s money
					set slot 4 of {_currInv} to randomPrefix({_item})
					play sound "block.anvil.use" with volume 2 and pitch 1 at location of (event-player) for (event-player)
					set {_item} to 1 of slot 4 of {_currInv}
					applyCD(event-player, 5)
			else:
				wait 1 tick
				set {_cursor} to 1 of cursor slot of (event-player)
				if {_item} is not air:
					if {_cursor} is not air:
						giveItem((event-player), {_item})
					else:
						set cursor slot of (event-player) to {_item}
				if {_cursor} is not air:
					set slot 4 of {_currInv} to {_cursor}
					set {_item} to {_cursor}
					remove {_item} from cursor slot of (event-player)
				else:
					set slot 4 of {_currInv} to air
					set {_item} to air
			if canReforge({_item}) is not true:
				set {_item} to air
			renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * 0.0125), coinConversion(floor((event-player)'s money / 100)), false)
		else if "%click type%" contains "shift":
			cancel event
			event-slot is not air
			if slot 4 of {_currInv} is air:
				set slot 4 of {_currInv} to 1 of event-slot
				set {_item} to 1 of event-slot
				remove 1 of event-slot from event-slot
				renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * 0.0125), coinConversion(floor((event-player)'s money / 100)), false)
		clear {_name}
		clear {_lores::*}
		set {_name} to name of slot 4 of {_currInv}
		if {_name} is set:
			if {_name} contains "的 ":
				set {_prefix} to {_name}.split("的 ")[0]
				set {_itemType} to {_name}.split("的 ")[1]
				set {_addLore} to yml value "prefixInfo.%trimText({_prefix})%.lore" from file "plugins/Data/prefix.yml"
				if {_addLore} is set:
					add (...{_addLore}) to {_lores::*}
					set {_lores::1} to "&r前缀预览："
				set {_prefix} to "%{_prefix}%的"
			else:
				set {_prefix} to ""
				set {_itemType} to {_name}
		else:
			set {_name} to ""
			set {_prefix} to ""
			set {_itemType} to {_name}
		add "&r点我重铸" to {_lores::*}
		set slot 3 of {_currInv} to a light gray stained glass pane named "%{_name}%&a→" with lore {_lores::*}
		set slot 5 of {_currInv} to a light gray stained glass pane named "&a←%{_name}%" with lore {_lores::*}
		set slot 13 of {_currInv} to a light gray stained glass pane named "&a%{_prefix}%↑%{_itemType}%" with lore {_lores::*}
	else if trimText({_currInv}.getTitle()) is "商店":
		cancel event
		set {_item} to 1 of event-slot
		if trimText({_eventInv}.getTitle()) is "商店":
			if index of event-slot >= 45:
				if index of event-slot is 49:
					if event-slot is air:
						message "&a请点击背包里或GUI里的物品预览价值，然后点击最后一行中间的物品预览完成交易"
						stop trigger
					if metadata "shopOperation" of (event-player) is "sell":
						set {_profit} to getWorth(trimText(name of {_item}))
						if "%click type%" ends with "shift":
							set {_invIt} to ((event-player)'s inventory).iterator()
							while {_invIt}.hasNext() is true:
								set {_loopItem} to {_invIt}.next()
								if 1 of {_loopItem} is {_item}:
									set {_item} to {_loopItem}
									stop loop
							set {_profit} to {_profit} * (item amount of {_item})
						if amount of {_item} in {_plyInv} >= 1:
							remove {_item} from {_plyInv}
							add {_profit} to event-player's money
							set {_addSlot} to metadata "firstSell" of (event-player)
							set {_maxStackSize} to {_item}.getMaxStackSize()
							while {_addSlot} < 45:
								clear {_addAmount}
								if 1 of slot {_addSlot} of {_currInv} is 1 of {_item}:
									set {_addAmount} to {_maxStackSize} - item amount of (slot {_addSlot} of {_currInv})
								else if slot {_addSlot} of {_currInv} is air:
									set {_addAmount} to {_maxStackSize}
								if {_addAmount} is set:
									if (item amount of {_item}) <= {_addAmount}:
										add {_item} to slot {_addSlot} of {_currInv}
										stop loop
									else:
										set {_removeItem} to {_addAmount} of {_item}
										remove {_removeItem} from {_item}
										add {_removeItem} to slot {_addSlot} of {_currInv}
								add 1 to {_addSlot}
						else:
							message "&c您的背包里已经没有该物品了。"
						if amount of {_item} in {_plyInv} = 0:
							set {_item} to air
							set slot 49 of {_currInv} to air
						renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * 0.01), coinConversion(floor((event-player)'s money / 100)), true)
					else if metadata "shopOperation" of (event-player) is "buyBack":
						set {_cost} to getWorth(trimText(name of {_item}))
						set {_removeSlot} to metadata "firstSell" of (event-player)
						while {_removeSlot} < 45:
							if 1 of slot {_removeSlot} of {_currInv} is {_item}:
								stop loop
							add 1 to {_removeSlot}
						if "%click type%" ends with "shift":
							set {_item} to slot {_removeSlot} of {_currInv}
							set {_amount} to min(item amount of {_item}, floor((money of event-player) / {_cost}))
							set {_item} to {_amount} of {_item}
							set {_cost} to {_cost} * (item amount of {_item})
						if {_removeSlot} < 45:
							if money of event-player >= {_cost}:
								remove {_cost} from event-player's money
								remove {_item} from slot {_removeSlot} of {_currInv}
								giveItem(event-player, {_item})
							else:
								message "&c您没有足够的钱来买回该物品。"
						else:
							message "&c您销售的该物品已悉数追回。"
						if amount of {_item} in {_currInv} = 1:
							set {_item} to air
							set slot 49 of {_currInv} to air
						renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * 0.01), coinConversion(floor((event-player)'s money / 100)), false)
					else:
						set {_cost} to getWorth(trimText(name of {_item}))
						if "%click type%" ends with "shift":
							canReforge({_item}) is false
							set {_amount} to min({_item}.getMaxStackSize(), floor(((money of event-player) / 5) / {_cost}))
							set {_item} to {_amount} of {_item}
						set {_cost} to {_cost} * (item amount of {_item}) * 5
						if money of event-player >= {_cost}:
							remove {_cost} from event-player's money
							giveItem(event-player, (item amount of {_item}) of getItem(trimText(name of {_item})))
						else:
							message "&c您没有足够的钱来购买该物品。"
						renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * (item amount of event-slot) * 0.05), coinConversion(floor((event-player)'s money / 100)), false)
				stop trigger
			if index of event-slot >= metadata "firstSell" of (event-player):
				set metadata "shopOperation" of (event-player) to "buyBack"
				set slot 49 of {_currInv} to {_item}
				renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * 0.01), coinConversion(floor((event-player)'s money / 100)), false)
			else:
				set metadata "shopOperation" of (event-player) to "buy"
				set slot 49 of {_currInv} to event-slot
				renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * (item amount of event-slot) * 0.05), coinConversion(floor((event-player)'s money / 100)), false)
		else:
			set metadata "shopOperation" of (event-player) to "sell"
			set slot 49 of {_currInv} to {_item}
			renderShop({_currInv}, coinConversion(getWorth(trimText(name of {_item})) * 0.01), coinConversion(floor((event-player)'s money / 100)), true)

on rightclick:
	event-entity has scoreboard tag "isNPC"
	cancel event
	metadata "useCD" of player is false
	applyCD(player, 20)
	set {_bg} to metadata "GUIbackgroundNPC" of player
	set {_w} to VexViewAPI.getPlayerClientWindowWidth(player)
	set {_h} to VexViewAPI.getPlayerClientWindowHeight(player)
	set {_gui} to new VexGui({_bg}, {_w} / 4, {_h} / 3, {_w} / 2, {_h} / 3)
	
	set {_type} to event-entity.getCustomName()
	set {_tierPly} to metadata "tier" of player
	set {_comps} to new ArrayList(4)
	if {_type} is "向导":
		set {_texts} to yml value "NPC.messages.%{_type}%.tier%{_tierPly}%" from file "plugins/Data/setting.yml"
		{_comps}.add(new VexButton("HELP", "帮助", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
		{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 100, {_h} / 3 - 30, 26, 17))
	else if {_type} is "护士":
		set {_heal} to "治疗"
		set {_btnW} to 26
		if health of player < max health of player:
			if health of player / max health of player > 0.66:
				set {_texts} to yml value "NPC.messages.%{_type}%.hurt.1" from file "plugins/Data/setting.yml"
			else if health of player / max health of player > 0.33:
				set {_texts} to yml value "NPC.messages.%{_type}%.hurt.2" from file "plugins/Data/setting.yml"
			else:
				set {_texts} to yml value "NPC.messages.%{_type}%.hurt.3" from file "plugins/Data/setting.yml"
			add 40 to {_btnW}
			set {_heal} to "治疗&7(需要 "
			set {_c::*} to coinConversion(round((max health of player - health of player) * 1.5 * max({_tierPly}, 1)))
			if {_c::1} > 0:
				set {_heal} to "%{_heal}% &r%{_c::1}%铂 "
				add 30 to {_btnW}
			if {_c::2} > 0:
				set {_heal} to "%{_heal}% &e%{_c::2}%金 "
				add 30 to {_btnW}
			if {_c::3} > 0:
				set {_heal} to "%{_heal}% &7%{_c::3}%银 "
				add 30 to {_btnW}
			if {_c::4} > 0:
				set {_heal} to "%{_heal}% &c%{_c::4}%铜 "
				add 30 to {_btnW}
			set {_heal} to "%{_heal}%&7)"
		else:
			set {_texts} to yml value "NPC.messages.%{_type}%.healthy" from file "plugins/Data/setting.yml"
		{_comps}.add(new VexButton("HEAL", {_heal}, {_bg}, {_bg}, 50, {_h} / 3 - 30, {_btnW}, 17))
		{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 74 + {_btnW}, {_h} / 3 - 30, 26, 17))
	else if {_type} is "渔夫":
		if {questFishCompleted}.contains(name of player) is false:
			if trimText(name of player's tool) is {questFish}:
				{questFishCompleted}.add(name of player)
				set {_tool} to player's tool
				set {_tool} to (item amount of {_tool} - 1) of {_tool}
				set player's tool to {_tool}
				set {_texts} to yml value "NPC.messages.%{_type}%.questFinishing" from file "plugins/Data/setting.yml"
				set {_rewards} to yml value "questRewards" from file "plugins/Data/fishing.yml"
				loop ...{_rewards}:
					set {_info::1} to "%loop-value%"
					set {_info::*} to {_info::1} split at ":"
					if chance of {_info::4} parsed as number:
						giveItem(player, (a random integer between ({_info::2} parsed as integer) and ({_info::3} parsed as integer)) of getItem({_info::1}))
			else:
				set {_msg} to ""
				set {_questLocations::*} to ...(yml value "questFish.%{questFish}%" from file "plugins/Data/fishing.yml")
				loop {_questLocations::*}:
					set {_info::1} to loop-value
					set {_info::*} to {_info::1} split at "_"
					if {_info::2} is "sky":
						set {_msg} to "%{_msg}%&b天空 "
					else if {_info::2} is "hell":
						set {_msg} to "%{_msg}%&c地狱 "
					else:
						if {_info::1} is "corrupt":
							set {_msg} to "%{_msg}%&5腐化"
						else if {_info::1} is "tundra":
							set {_msg} to "%{_msg}%&b冻原"
						else if {_info::1} is "ocean":
							set {_msg} to "%{_msg}%&1海洋"
						else if {_info::1} is "jungle":
							set {_msg} to "%{_msg}%&2丛林"
						if {_info::2} is "surface":
							set {_msg} to "%{_msg}%&a地表 "
						else if {_info::2} is "underground":
							set {_msg} to "%{_msg}%&7地下 "
						else if {_info::2} is "cavern":
							set {_msg} to "%{_msg}%&8洞穴 "
				send "&7[提示] &r%{questFish}% &7获得地点: %{_msg}%" to player
				send "&7[提示] 各地点对应高度：&b天空 150+  &a地表 150~50  &7地下 50~30  &8洞穴 30~5  &c地狱 5-" to player
				set {_texts} to yml value "NPC.messages.%{_type}%.quest" from file "plugins/Data/setting.yml"
		else:
			set {_texts} to yml value "NPC.messages.%{_type}%.questDone" from file "plugins/Data/setting.yml"
		{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
	else:
		set {_tier} to yml value "NPC.messages.%{_type}%.tier" from file "plugins/Data/setting.yml"
		if {_tier} is set:
			set {_canShop} to false
			if ("%{_tier}%" parsed as number) is not set:
				yml value "bossDefeated.%{_tier}%" from file "plugins/PlayerData/%name of player%.yml" is true
				set {_canShop} to true
			else if {_tierPly} >= {_tier}:
				set {_canShop} to true
			if {_canShop} is true:
				set {_texts} to yml value "NPC.messages.%{_type}%.trade" from file "plugins/Data/setting.yml"
				{_comps}.add(new VexButton("SHOP", "商店", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
				{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 100, {_h} / 3 - 30, 26, 17))
				if {_type} is "哥布林工匠":
					{_comps}.add(new VexButton("REFORGE", "重铸", {_bg}, {_bg}, 150, {_h} / 3 - 30, 26, 17))
			else:
				set {_texts} to yml value "NPC.messages.%{_type}%.deny" from file "plugins/Data/setting.yml"
				if {_type} is "裁缝":
					set {_canCurse} to false
					if player.getWorld().getTime() is between 13500 and 22500:
						yml value "bossDefeated.Skeletron" from file "plugins/PlayerData/%name of player%.yml" is not true
						set {_canCurse} to true
					if {_canCurse} is true:
						{_comps}.add(new VexButton("CURSE", "诅咒", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
						{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 100, {_h} / 3 - 30, 26, 17))
					else:
						{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
				else:
					{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
		else:
			set {_texts} to yml value "NPC.messages.%{_type}%.deny" from file "plugins/Data/setting.yml"
			{_comps}.add(new VexButton("CLOSE", "关闭", {_bg}, {_bg}, 50, {_h} / 3 - 30, 26, 17))
	set {_text} to new ArrayList()
	set {_index} to {_texts}.size()
	set {_index} to a random integer between 0 and ({_index} - 1)
	set {_t} to {_texts}.get({_index})
	replace all "<name>" in {_t} with name of player
	if {_type} is "渔夫":
		replace all "<fishName>" in {_t} with {questFish}
	#fit the text into the chatbox
	set {_wText} to {_w} * 10 / 11
	set {_split::*} to {_t} split at ""
	set {_totalW} to 0
	set {_t} to ""
	set {_textSize} to {_w} / 500
	loop {_split::*}:
		add ({_textSize} * 20) to {_totalW}
		if {_totalW} >= {_wText}:
			{_text}.add({_t})
			set {_t} to ""
			set {_totalW} to 0
		set {_t} to "%{_t}%%loop-value%"
	{_text}.add({_t})
	{_comps}.add(new VexText({_w} / 22, {_h} / 17, {_text}, {_textSize}))
	{_gui}.addAllComponents({_comps})
	VexViewAPI.openGui(player, {_gui})
	set metadata "interactNPC" of player to event-entity
	while health of event-entity > 0:
		if metadata "interactNPC" of player is not event-entity:
			stop trigger
		wait 5 ticks
	close player's inventory

function renderShop(shop: inventory, priceLeft: numbers, priceRight: numbers, isSell: boolean):
	set {_invSize} to {_shop}.getSize()
	loop 4 times:
		set {_index} to {_invSize} - (loop-number)
		set slot {_index} of {_shop} to a light gray stained glass pane named "&r(· w·)"
		set slot {_index} - 5 of {_shop} to a light gray stained glass pane named "&r(·w ·)"
	set {_sIndex} to {_invSize} - 9
	if {_isSell}:
		set {_msgPrefix} to "卖出获得"
	else:
		set {_msgPrefix} to "需要"
	loop 4 times:
		{_priceLeft::%loop-number%} > 0
		if loop-number = 1:
			set {_amount} to {_priceLeft::%loop-number%}
			set {_amount} to min({_amount}, 64)
			set {_item} to {_amount} of getRawItem("铂金币")
			add "&r%{_msgPrefix}% %{_priceLeft::%loop-number%}% 枚铂金币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		else if loop-number = 2:
			set {_item} to {_priceLeft::%loop-number%} of getRawItem("金币")
			add "&r%{_msgPrefix}% %{_priceLeft::%loop-number%}% 枚金币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		else if loop-number = 3:
			set {_item} to {_priceLeft::%loop-number%} of getRawItem("银币")
			add "&r%{_msgPrefix}% %{_priceLeft::%loop-number%}% 枚银币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		else if loop-number = 4:
			set {_item} to {_priceLeft::%loop-number%} of getRawItem("铜币")
			add "&r%{_msgPrefix}% %{_priceLeft::%loop-number%}% 枚铜币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		add 1 to {_sIndex}
	
	set {_sIndex} to {_invSize} - 1
	loop 4 times:
		{_priceRight::%loop-number%} > 0
		if loop-number = 1:
			set {_amount} to {_priceRight::%loop-number%}
			set {_amount} to min({_amount}, 64)
			set {_item} to {_amount} of getRawItem("铂金币")
			add "&r您还有 %{_priceRight::%loop-number%}% 枚铂金币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		else if loop-number = 2:
			set {_item} to {_priceRight::%loop-number%} of getRawItem("金币")
			add "&r您还有 %{_priceRight::%loop-number%}% 枚金币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		else if loop-number = 3:
			set {_item} to {_priceRight::%loop-number%} of getRawItem("银币")
			add "&r您还有 %{_priceRight::%loop-number%}% 枚银币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		else if loop-number = 4:
			set {_item} to {_priceRight::%loop-number%} of getRawItem("铜币")
			add "&r您还有 %{_priceRight::%loop-number%}% 枚铜币" to lore of {_item}
			set slot {_sIndex} of {_shop} to {_item}
		remove 1 from {_sIndex}