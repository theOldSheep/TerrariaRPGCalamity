import:
	java.util.ArrayList
	java.util.HashMap
	me.libraryaddict.disguise.DisguiseAPI
	me.libraryaddict.disguise.disguisetypes.DisguiseType
	me.libraryaddict.disguise.disguisetypes.MobDisguise
	net.minecraft.server.v1_12_R1.EntityVillager
	net.minecraft.server.v1_12_R1.PathfinderGoalNearestAttackableTarget
	org.bukkit.attribute.Attribute
	org.bukkit.entity.EntityType
	org.bukkit.event.entity.EntityTargetEvent
	org.bukkit.Material
	org.bukkit.util.Vector

on script load:
	set {MonsterAttrCache} to new HashMap()

on spawn:
	spawn reason is set
	if "%spawn reason%" is not "default" or "customized":
		cancel event
		stop trigger

on chunk unload:
	set {_chunk} to event.getChunk()
	set {_x} to {_chunk}.getX() * 16
	set {_z} to {_chunk}.getZ() * 16
	loop all players in {_chunk}.getWorld():
		set {_distX} to {_x} - (x-coordinate of loop-player)
		set {_distZ} to {_z} - (z-coordinate of loop-player)
		if abs({_distX}) < 100:
			abs({_distZ}) < 100
			cancel event
			stop trigger
	if {pillars} is set:
		loop ...({pillars}.values()):
			set {_pillar} to loop-value
			"%(location of {_pillar}).getChunk()%" is "%event-chunk%"
			cancel event
			stop trigger
	loop ...({_chunk}.getEntities()):
		set {_entity} to loop-value
		if {_entity} is a living entity:
			if {_entity} is not armor stand:
				if {_entity} has scoreboard tag "keepChunkLoading":
					cancel event
					stop trigger
				if {_entity} doesn't have scoreboard tag "isNPC":
					set max health of {_entity} to 1
					{_entity}.remove()
				else:
					health of {_entity} > 0
					set max health of {_entity} to 2
		else if {_entity} is not dropped item:
			{_entity}.remove()

on skript stop:
	set {_iterator} to {BOSS}.values().iterator()
	while {_iterator}.hasNext():
		set {_boss} to {_iterator}.next()
		if {_boss} is instance of ArrayList:
			set {_boss} to {_boss}.get(0)
		set {_bossbar} to metadata "bossbar" of {_boss}
		{_bossbar}.setVisible(false)
		{_boss}.remove()
	loop all entities:
		if loop-value is not a player:
			loop-value is not armor stand
			(loop-value).remove()

every 10 ticks:
	loop all players:
		set {_spawnRate} to ((metadata "attrMap" of loop-player).get("mobSpawnRate")) * ((metadata "attrMap" of loop-player).get("mobSpawnRateMulti"))
		if chance of ({_spawnRate} - floor({_spawnRate})):
			set {_spawnRate} to ceil({_spawnRate})
		else:
			set {_spawnRate} to floor({_spawnRate})
		loop {_spawnRate} times:
			attemptMobSpawn(loop-player)

function attemptMobSpawn(ply: player):
	set {_attrMap} to metadata "attrMap" of {_ply}
	set {_mobLimit} to ({_attrMap}.getOrDefault("mobLimit", 10))
	metadata "mobAmount" of {_ply} < {_mobLimit}
	if {pillars} is set:
		y-coordinate of {_ply} >= 50
		loop ...({pillars}.values()):
			set {_pillar} to loop-value
			if distance between location of {_ply} and location of {_pillar} < 150:
				attemptPillarMobSpawn({_pillar}, {_ply})
				stop trigger
	if y-coordinate of {_ply} is between 50 and 150:
		if {event} is "冰霜月" or "南瓜月":
			metadata "tier" of {_ply} >= 6
			set {_eventTier} to {eventInfo}.getOrDefault("tier", 1)
			attemptSpawnType("%{event}%%{_eventTier}%", {_ply})
			stop trigger
	if {BOSS}.size() > 0:
		chance of 0.8
		stop trigger
	if "%world of {_ply}%" is "world_nether":
		attemptSpawnType("underworld", {_ply})
		stop trigger
	set {_biome} to getBiome(location of {_ply})
	if y-coordinate of {_ply} >= 150:
		set {_spawnType} to "space"
	else if y-coordinate of {_ply} <= 5:
		set {_biome} to getBiome((location of {_ply}).add(0, 8, 0))
		set {_spawnType} to "cavern"
	else if y-coordinate of {_ply} <= 30:
		set {_spawnType} to "cavern"
	else if y-coordinate of {_ply} <= 50:
		set {_spawnType} to "underground"
	else:
		if {_ply}.getWorld().getTime() is between 13500 and 22500:
			set {_spawnType} to "night"
		else:
			set {_spawnType} to "day"
	if {event} is not set:
		chance of 0.75
		stop trigger
	if {_spawnType} is "day" or "night":
		attemptSpawnType({event}, {_ply}) is true
		stop trigger
	attemptSpawnType("%{_biome}%_%{_spawnType}%", {_ply}) is not true
	attemptSpawnType({_biome}, {_ply}) is not true
	attemptSpawnType({_spawnType}, {_ply})

function attemptSpawnType(spawnType: text, ply: player) :: boolean:
	set {_tier} to metadata "tier" of {_ply}
	set {_useCave} to false
	if {_spawnType} is "Space":
		if chance of 0.35:
			set {_mobType} to "鸟妖"
			if {_tier} >= 4:
				set {_chance} to 0.05
				if {BOSS}.size() >= 1:
					set {_chance} to 0.25
				if chance of {_chance}:
					set {_mobType} to "飞龙"
			set {_loc} to (location of {_ply}).add(a random number between -32 and 32, a random number between 4 and 16, a random number between -32 and 32)
			spawnMob("%{_mobType}%", {_loc}, {_ply})
		return true
	else if {_spawnType} is "underworld":
		set {_useCave} to true
	else:
		y-coordinate of {_ply} <= 50
		set {_useCave} to true
		set {_block} to the block 1 below {_ply}
		if {_block} is cracked stone brick:
			set {_spawnType} to "地牢"
		else if {_block} is mossy stone brick:
			set {_spawnType} to "神庙"
	set {_allMonster::*} to yml nodes "spawnInfo.%{_spawnType}%" from file "plugins/Data/mobSpawning.yml"
	if {_allMonster::*} is not set:
		return false
	set {_total} to 0
	set {_spawnInfoMap} to new HashMap()
	loop {_allMonster::*}:
		set {_mobTier} to 0
		set {_mobTier} to yml value "mobTier.%loop-value%" from file "plugins/Data/mobSpawning.yml"
		set {_mobTierMax} to {_tier}
		set {_mobTierMax} to yml value "mobTierMax.%loop-value%" from file "plugins/Data/mobSpawning.yml"
		if {_mobTier} <= {_tier}:
			{_mobTierMax} >= {_tier}
			set {_spawnWeight} to yml value "spawnInfo.%{_spawnType}%.%loop-value%" from file "plugins/Data/mobSpawning.yml"
			set {_total} to {_total} + {_spawnWeight}
			{_spawnInfoMap}.put(loop-value, {_spawnWeight})
	if {_total} = 0:
		return false
	set {_total} to a random number between 0 and {_total}
	set {_iterator} to {_spawnInfoMap}.entrySet().iterator()
	while {_total} > 0.001:
		set {_next} to {_iterator}.next()
		remove {_next}.getValue() from {_total}
		set {_mobType} to {_next}.getKey()
	if {_mobType} is not set:
		return true
	if {_useCave} is not true:
		set {_adjustHeight} to 30
		set {_xOffset} to a random number between -48 and 48
		set {_zOffset} to a random number between -48 and 48
		while ({_xOffset} * {_xOffset}) + ({_zOffset} * {_zOffset}) < 225:
			set {_xOffset} to a random number between -48 and 48
			set {_zOffset} to a random number between -48 and 48
		set {_loc} to {_ply}.getLocation().add({_xOffset}, 0, {_zOffset})
	else:
		set {_adjustHeight} to 8
		set {_loc} to location of {_ply}
		set {_xOffset} to a random number between -32 and 32
		set {_zOffset} to a random number between -32 and 32
		while ({_xOffset} * {_xOffset}) + ({_zOffset} * {_zOffset}) < 100:
			set {_xOffset} to a random number between -32 and 32
			set {_zOffset} to a random number between -32 and 32
		{_loc}.add({_xOffset}, a random number between -4 and 8, {_zOffset})
	set {_offSet} to 1
	set {_foundLoc} to false
	
	if (block at {_loc}) is air:
		loop {_adjustHeight} times:
			subtract 1 from y-coordinate of {_loc}
			(block 1 below {_loc}) is not air
			(block 1 above {_loc}) is air
			set {_foundLoc} to true
			stop loop
	else:
		loop {_adjustHeight} times:
			add 1 to y-coordinate of {_loc}
			(block at {_loc}) is air
			(block 1 above {_loc}) is air
			set {_foundLoc} to true
			stop loop
	if {_foundLoc} is false:
		return true
	if (block at {_loc}) is solid:
		{_loc}.add(0, 1, 0)
	if block light level of {_loc} > 7:
		return true
	if {_spawnType} is "史莱姆雨":
		{_loc}.add(0, 30, 0)
	if {_spawnType} is "拜月教教徒":
		{BOSS}.containsKey("拜月教邪教徒") is true
		stop trigger
	loop all players in radius 10 of {_loc}:
		gamemode of loop-player is survival
		return true
	if {_mobType} is "幽灵" or "死神" or "巨型诅咒骷髅头" or "诅咒骷髅头":
		{_loc}.subtract(0, 15, 0)
	spawnMob({_mobType}, {_loc}, {_ply})
	return true
function spawnMob(type: text, loc: location, ply: player):
	set {_loc} to location of (block at {_loc})
	if block at {_loc} is solid:
		stop trigger
	if block 1 above {_loc} is solid:
		stop trigger
	if {_type} is "钨钢军团":
		spawnMob("钨钢回转器", {_loc}, {_ply})
		spawnMob("钨钢悬浮坦克", {_loc}, {_ply})
		spawnMob("钨钢无人机", {_loc}, {_ply})
		spawnMob("钨钢漫步者", {_loc}, {_ply})
		stop trigger
	set {_entityType} to yml value "mobInfo.%{_type}%.monsterType" from file "plugins/Data/mobSpawning.yml"
	set {_name} to yml value "mobInfo.%{_type}%.name" from file "plugins/Data/mobSpawning.yml"
	set {_isMonster} to yml value "mobInfo.%{_type}%.isMonster" from file "plugins/Data/mobSpawning.yml"
	set {_isMechanic} to yml value "mobInfo.%{_type}%.isMechanic" from file "plugins/Data/mobSpawning.yml"
	
	set {_allVariants::*} to yml nodes "mobInfo.%{_type}%.variants" from file "plugins/Data/mobSpawning.yml"
	if {_allVariants::*} contains "%{event}%1":
		"%world of {_loc}%" is "world"
		y-coordinate of {_ply} > 50
		y-coordinate of {_ply} < 150
		add {event} to {_checkPrefixes::*}
	if "%world of {_loc}%" is not "world_nether":
		{_checkPrefixes::1} is not set
		if {_ply} is set:
			set {_biome} to {_loc}.getWorld().getBiome({_ply}.getLocation().getBlockX(), {_ply}.getLocation().getBlockZ()).toString().toLowerCase()
		else:
			set {_biome} to {_loc}.getWorld().getBiome({_loc}.getBlockX(), {_loc}.getBlockZ()).toString().toLowerCase()
		if y-coordinate of {_loc} <= 30:
			add "%{_biome}%_cavern" to {_checkPrefixes::*}
			add "cavern" to {_checkPrefixes::*}
		else if y-coordinate of {_loc} <= 50:
			add "%{_biome}%_underground" to {_checkPrefixes::*}
			add "underground" to {_checkPrefixes::*}
		add "%{_biome}%" to {_checkPrefixes::*}
		add "default" to {_checkPrefixes::*}
	else:
		if {_allVariants::*} doesn't contain "hell1":
			add "default" to {_checkPrefixes::*}
		else:
			add "hell" to {_checkPrefixes::*}
	loop {_checkPrefixes::*}:
		if {_allVariants::*} doesn't contain "%loop-value%1":
			continue
		set {_index} to 1
		while {_allVariants::*} contains "%loop-value%%{_index}%":
			add "%loop-value%%{_index}%" to {_finalPool::*}
			add 1 to {_index}
	if size of {_finalPool::*} < 1:
		stop trigger
	set {_parentNode} to "mobInfo.%{_type}%.variants.%a random element out of {_finalPool::*}%"
	set {_name} to yml value "%{_parentNode}%.name" from file "plugins/Data/mobSpawning.yml"
	set {_attributes::*} to yml nodes "%{_parentNode}%.attributes" from file "plugins/Data/mobSpawning.yml"
	if {_entityType} starts with "BABY_":
		replace all "BABY_" in {_entityType} with ""
		set {_entity} to {_loc}.getWorld().spawnEntity({_loc}, EntityType.valueOf({_entityType}))
		{_entity}.setBaby(true)
	else:
		set {_entity} to {_loc}.getWorld().spawnEntity({_loc}, EntityType.valueOf({_entityType}))
		try {_entity}.setBaby(false)
	{_entity} is set
	{_entity}.getAttribute(Attribute.GENERIC_FOLLOW_RANGE).setBaseValue(100d)
	{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.25d)
	if {_checkPrefixes::1} is {event}:
		set {_killProgress} to yml value "mobInfo.%{_type}%.eventProgress" from file "plugins/Data/mobSpawning.yml"
		if {_killProgress} is not set:
			set {_killProgress} to 1
		set metadata "spawnEvent" of {_entity} to {event}
		set metadata "killProgress" of {_entity} to {_killProgress}
	if "%world of {_loc}%" is "world_nether":
		apply potion of fire resistance without particles to {_entity} for 10 days
	if {_isMechanic} is true:
		add "isMechanic" to scoreboard tags of {_entity}
	if {_isMonster} is not false:
		add "isMonster" to scoreboard tags of {_entity}
		set {_mobAmount} to metadata "mobAmount" of {_ply}
		set metadata "mobAmount" of {_ply} to {_mobAmount} + 1
	if "%{_entity}.getType()%" is "SLIME":
		if {_type} is "恶魔之眼" or "噬魂怪" or "恶魔" or "巫毒恶魔" or "红恶魔" or "饿鬼" or "巨型诅咒骷髅头" or "胡闹鬼":
			{_entity}.setGravity(false)
			{_entity}.setSize(3)
		else if {_type} is "克苏鲁的仆从" or "飞翔史莱姆" or "鸟妖" or "飞龙" or "骨蛇" or "诅咒骷髅头" or "地牢幽魂" or "致命球":
			{_entity}.setGravity(false)
			{_entity}.setSize(2)
		else if {_type} is "探测怪":
			{_entity}.setSize(4)
			{_entity}.setGravity(false)
		else if {_type} is "雪花怪" or "礼物宝箱怪" or "精灵直升机" or "腐化宝箱怪" or "神圣宝箱怪" or "钨钢悬浮坦克" or "钨钢无人机":
			{_entity}.setSize(3)
			if {_type} is "精灵直升机" or "雪花怪" or "钨钢悬浮坦克" or "钨钢无人机":
				{_entity}.setGravity(false)
		else if {_type} is "蛾怪":
			{_entity}.setSize(6)
			{_entity}.setGravity(false)
		else:
			{_entity}.setSize(2)
			if {_type} is "陨石怪" or "地狱蝙蝠" or "丛林蝙蝠":
				{_entity}.setGravity(false)
		if {_type} is "巨型诅咒骷髅头" or "诅咒骷髅头" or "地牢幽魂" or "致命球" or "胡闹鬼" or "探测怪" or "精灵直升机" or "蛾怪" or "陨石怪" or "克苏鲁的仆从":
			set {_entity}.getHandle().noclip to true
	else if {_type} is "哥布林弓箭手":
		set helmet of {_entity} to a diamond helmet
	else if {_type} is "幽灵" or "死神":
		{_entity}.setGravity(false)
		set {_entity}.getHandle().noclip to true
	else if {_type} is "钨钢回转器" or "钨钢漫步者":
		{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.45)
	set metadata "motherType" of {_entity} to {_type}
	set {_health} to yml value "%{_parentNode}%.attributes.health" from file "plugins/Data/mobSpawning.yml"
	set {_hasHealthMulti} to yml value "mobInfo.%{_type}%.hasHealthMulti" from file "plugins/Data/mobSpawning.yml"
	set {_healthMulti} to 1
	if {MonsterAttrCache}.containsKey({_parentNode}):
		set {_attrMap} to {MonsterAttrCache}.get({_parentNode}).clone()
	else:
		set {_attrMap} to new HashMap()
		loop {_attributes::*}:
			loop-value is not "health"
			{_attrMap}.put(loop-value, yml value "%{_parentNode}%.attributes.%loop-value%" from file "plugins/Data/mobSpawning.yml")
		{MonsterAttrCache}.put({_parentNode}, {_attrMap}.clone())
	set name of {_entity} to {_name}
	{_entity}.setCustomName({_name})
	set {_mobTier} to 0
	set {_mobTier} to yml value "mobTier.%{_type}%" from file "plugins/Data/mobSpawning.yml"
	if {_mobTier} < 4:
		{_mobTier} >= 0
		if metadata "tier" of {_ply} >= 8:
			{_attrMap}.put("damageMulti", 3)
			{_attrMap}.put("defenceMulti", 7)
			set {_healthMulti} to 6
		else if metadata "tier" of {_ply} >= 6:
			{_attrMap}.put("damageMulti", 2.5)
			{_attrMap}.put("defenceMulti", 5)
			set {_healthMulti} to 5
		else if metadata "tier" of {_ply} >= 4:
			{_attrMap}.put("damageMulti", 2)
			{_attrMap}.put("defenceMulti", 3)
			set {_healthMulti} to 4
	if {_hasHealthMulti} is true:
		set {_amountPly} to max(size of (all players in radius 64 of {_entity}), 1)
		set {_healthMulti} to {_healthMulti} * getBossHealthMulti({_amountPly})
	set {_health} to {_health} * {_healthMulti}
	set max health of {_entity} to {_health}
	set health of {_entity} to {_health}
	set metadata "attrMap" of {_entity} to {_attrMap}
	{_entity}.setCustomNameVisible(true)
	
	set {_disguise} to yml value "mobInfo.%{_type}%.disguiseType" from file "plugins/Data/mobSpawning.yml"
	if {_disguise} is set:
		if {_disguise} starts with "SLIME_":
			replace all "SLIME_" in {_disguise} with ""
			set {_size} to {_disguise} parsed as integer
			set {_disguise} to new MobDisguise(DisguiseType.SLIME, true)
			{_disguise}.getWatcher().setSize({_size})
		else if {_disguise} starts with "BABY_":
			replace all "BABY_" in {_disguise} with ""
			set {_disguise} to new MobDisguise(DisguiseType.valueOf({_disguise}), false)
		else:
			set {_disguise} to new MobDisguise(DisguiseType.valueOf({_disguise}), true)
		{_disguise}.setReplaceSounds(true)
		DisguiseAPI.disguiseEntity({_entity}, {_disguise})
	
	entityAI({_entity}, {_ply}, {_type})

#AI
function entityAI(entity: entity, target: entity, type: text):
	validateMob({_entity}, {_type})
	set metadata "target" of {_entity} to {_target}
	if {_entity} has scoreboard tag "isMonster":
		set {_isMonster} to true
	makeTarget({_entity}, {_target})
	if {_type} is "僵尸" or "钨钢回转器":
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			wait "%a random number between 3 and 8% seconds" parsed as timespan
			health of {_entity} > 0
			if {_entity}.isOnGround():
				set {_v} to {_entity}.getVelocity()
				{_v}.setY(min({_v}.getY() + 1, 1.7))
				{_entity}.setVelocity({_v})
	else if {_type} is "稻草人":
		chance of 0.4
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			wait "%a random number between 3 and 8% seconds" parsed as timespan
			health of {_entity} > 0
			if {_entity}.isOnGround():
				set {_v} to {_entity}.getVelocity()
				{_v}.setY(min({_v}.getY() + 1, 1.7))
				{_entity}.setVelocity({_v})
	else if {_type} is "沼泽怪":
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			wait "%a random number between 3 and 8% seconds" parsed as timespan
			{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(a random number between 0.1 and 0.4)
	else if {_type} is "攀爬魔" or "地狱犬":
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			wait 1 second
			if target of {_entity} is not a player:
				loop all players in radius 64 of {_entity}:
					checkMobTarget(loop-player, {_entity}) is true
					makeTarget({_entity}, loop-player)
					stop loop
	else if {_type} is "眼怪":
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			set {_target} to target of {_entity}
			wait "%a random number between 3 and 8% seconds" parsed as timespan
			set {_v} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
			vector length of {_v} > 0
			set vector length of {_v} to 1
			set {_projectile} to mobProjectile({_entity}, {_v}, (metadata "attrMap" of {_entity}), "激光")
			{_projectile}.setGravity(false)
			set metadata "penetration" of {_projectile} to 10
			projectileAI({_projectile}, "MAGIC_PROJECTILE")
	else if {_type} is "骷髅":
		chance of 0.75
		set tool of {_entity} to air
		wait 1 tick
		set tool of {_entity} to air
	else if {_type} is "装甲骷髅":
		set tool of {_entity} to air
		wait 1 tick
		set tool of {_entity} to air
	else if {_type} is "鸟妖":
		set {_index} to 0
		set {_angleIndex} to a random number between -360 and 360
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is set:
				if {_index} < 25:
					set {_targetLoc} to (eye location of {_target}).add(sin({_angleIndex}) * 15, 6, cos({_angleIndex}) * 15)
					set {_dV} to {_targetLoc}.subtract(location of {_entity}).toVector()
					if vector length of {_dV} > 0.2:
						set vector length of {_dV} to 0.2
				else if {_index} = 25:
					set {_dV} to (location of {_target}).subtract(location of {_entity}).toVector()
					if vector length of {_dV} > 0.3:
						set vector length of {_dV} to 0.3
					set {_angleIndex} to a random number between -360 and 360
				mod({_index}, 8) = 0
				set {_velocity} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
				set vector length of {_velocity} to 0.5
				set {_projectile} to mobProjectile({_entity}, {_velocity}, (metadata "attrMap" of {_entity}), "鸟妖羽毛")
				
				{_projectile}.setGravity(false)
				set metadata "penetration" of {_projectile} to 10
				projectileAI({_projectile}, "MAGIC_PROJECTILE")
			else:
				set {_dV} to vector(0, 0.3, 0)
			push {_entity} {_dV}
			if vector length of velocity of {_entity} > 0.5:
				set {_v} to velocity of {_entity}
				set vector length of {_v} to 0.5
				set velocity of {_entity} to {_v}
			set {_index} to mod({_index} + 1, 40)
			if {_angleIndex} < 0:
				subtract 1 from {_angleIndex}
			else:
				add 1 to {_angleIndex}
			wait 5 ticks
	else if {_type} is "恶魔之眼" or "探测怪" or "飞蛇" or "钨钢悬浮坦克" or "钨钢无人机":
		set {_index} to 0
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_type} is "探测怪":
				if checkMobTarget({_target}, {_entity}) is false:
					set {_mobAmount} to metadata "mobAmount" of {_target}
					set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)
					clear {_target}
					clear metadata "target" of {_entity}
					set {_target} to metadata "target" of (try {BOSS}.get("毁灭者").get(0))
					set metadata "target" of {_entity} to {_target}
			else:
				if {_target} is set:
					if checkMobTarget({_target}, {_entity}) is false:
						set {_lastTarget} to {_target}
						clear {_target}
						set {_target} to mobRetarget({_entity}, {_lastTarget})
				else:
					set {_target} to mobRetarget({_entity}, {_target})
			set {_skipAI} to false
			if {_entity}.getWorld().getTime() is not between 13500 and 22500:
				{_type} is "恶魔之眼" or "探测怪"
				set {_dV} to vector(0, 0.3, 0)
				set {_skipAI} to true
			if {_skipAI} is not true:
				if {_target} is set:
					if {_type} is "探测怪":
						set {_targetLoc} to (eye location of {_target}).add(sin({_index} * 5) * 16, 5, cos({_index} * 5) * 16)
					else if {_type} is "钨钢无人机":
						set {_targetLoc} to (eye location of {_target}).add(sin({_index} * 5) * 4, 5, cos({_index} * 5) * 4)
					else:
						set {_targetLoc} to eye location of {_target}
					set {_dV} to {_targetLoc}.subtract(location of {_entity}).toVector()
					if {_type} is "探测怪" or "钨钢无人机":
						if {_type} is "探测怪":
							set {_shootInterval} to 4
						else:
							set {_shootInterval} to 20
						if mod({_index}, {_shootInterval}) = 0:
							set {_velocity} to (location of {_target}).subtract(location of {_entity}).toVector()
							
							if {_type} is "探测怪":
								set vector length of {_velocity} to 1.5
								set {_projectile} to mobProjectile({_entity}, {_velocity}, (metadata "attrMap" of {_entity}), "激光")
							else:
								set vector length of {_velocity} to 1
								set {_projectile} to mobProjectile({_entity}, {_velocity}, (metadata "attrMap" of {_entity}), "钨钢光球")
							
							{_projectile}.setGravity(false)
							set metadata "penetration" of {_projectile} to 10
							projectileAI({_projectile}, "MAGIC_PROJECTILE")
					if vector length of {_dV} = 0:
						set {_dV} to vector(0, 0.3, 0)
					else:
						if {_type} is "飞蛇":
							set vector length of {_dV} to 0.15
						else if {_type} is "恶魔之眼":
							set vector length of {_dV} to 0.2
						else:
							set vector length of {_dV} to 0.35
					if mod({_index}, 12) >= 8:
						{_type} is "恶魔之眼"
						{_dV}.multiply(-1)
						set {_index} to 0
				else:
					set {_dV} to vector(0, 0.3, 0)
			push {_entity} {_dV}
			if vector length of velocity of {_entity} > 1:
				set {_v} to velocity of {_entity}
				set vector length of {_v} to 1
				set velocity of {_entity} to {_v}
			add 1 to {_index}
			wait 5 ticks
	else if {_type} is "噬魂怪" or "地狱蝙蝠" or "丛林蝙蝠" or "恶魔" or "红恶魔" or "巫毒恶魔" or "饿鬼" or "飞翔史莱姆" or "雪花怪":
		set {_index} to 0
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_type} is "饿鬼":
				if checkMobTarget({_target}, {_entity}) is false:
					set {_mobAmount} to metadata "mobAmount" of {_target}
					set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)
					clear {_target}
					clear metadata "target" of {_entity}
					set {_target} to metadata "target" of (try {BOSS}.get("血肉之墙").get(0))
					set metadata "target" of {_entity} to {_target}
			else if {_type} is "飞翔史莱姆":
				if checkMobTarget({_target}, {_entity}) is false:
					set {_mobAmount} to metadata "mobAmount" of {_target}
					set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)
					clear {_target}
					clear metadata "target" of {_entity}
					set {_target} to metadata "target" of (try {BOSS}.get("史莱姆皇后"))
					set metadata "target" of {_entity} to {_target}
			else:
				if {_target} is set:
					if checkMobTarget({_target}, {_entity}) is false:
						set {_lastTarget} to {_target}
						clear {_target}
						set {_target} to mobRetarget({_entity}, {_lastTarget})
				else:
					set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is set:
				set {_changeDirection} to false
				if distance between location of {_entity} and location of {_target} > 8:
					set {_changeDirection} to true
				else if mod({_index}, 15) = 0:
					set {_changeDirection} to true
				if {_changeDirection} is true:
					set {_dV} to vector((x-coordinate of {_target} - x-coordinate of {_entity}), (y-coordinate of {_target} - y-coordinate of {_entity}), (z-coordinate of {_target} - z-coordinate of {_entity}))
					if vector length of {_dV} = 0:
						set {_dV} to vector(0, 0.3, 0)
					else:
						set vector length of {_dV} to 0.2
					if {_type} is "噬魂怪" or "雪花怪":
						if mod({_index}, 22) >= 8:
							{_dV}.multiply(-1.7)
							set {_index} to 0
				if {_type} is "恶魔" or "巫毒恶魔":
					mod({_index}, 4) = 0
					set {_velocity} to {_target}.getLocation().subtract({_entity}.getLocation()).toVector()
					set vector length of {_velocity} to 0.05
					set {_projectile} to mobProjectile({_entity}, {_velocity}, (metadata "attrMap" of {_entity}), "恶魔之镰")
					
					{_projectile}.setGravity(false)
					set metadata "penetration" of {_projectile} to 10
					projectileAI({_projectile}, "MAGIC")
				else if {_type} is "红恶魔":
					mod({_index}, 4) = 0
					set {_velocity} to {_target}.getLocation().subtract({_entity}.getLocation()).toVector()
					set vector length of {_velocity} to 0.35
					set {_projectile} to mobProjectile({_entity}, {_velocity}, (metadata "attrMap" of {_entity}), "邪恶三叉戟")
					
					{_projectile}.setGravity(false)
					set metadata "penetration" of {_projectile} to 10
					projectileAI({_projectile}, "MAGIC")
			else:
				set {_dV} to vector(0, 0.3, 0)
			push {_entity} {_dV}
			if vector length of velocity of {_entity} > 0.5:
				set {_v} to velocity of {_entity}
				set vector length of {_v} to 0.5
				set velocity of {_entity} to {_v}
			add 1 to {_index}
			wait 5 ticks
	else if {_type} is "幽灵" or "巨型诅咒骷髅头" or "诅咒骷髅头" or "地牢幽魂" or "死神" or "致命球" or "胡闹鬼":
		if {_type} is "巨型诅咒骷髅头" or "诅咒骷髅头":
			set glowing of {_entity} to on
			set {_attrMapProjectile} to metadata "attrMap" of {_entity}
		if {_type} is "致命球":
			set {_mod} to 4
		else:
			set {_mod} to 1
		set {_index} to 0
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is set:
				if {_type} is "巨型诅咒骷髅头":
					mod({_index}, 8) = 0
					mobSpecialProjectile({_entity}, {_target}, "cursedSkull", {_attrMapProjectile})
				if mod({_index}, {_mod}) = 0:
					if {_type} is "胡闹鬼":
						set {_dV} to (location of highest solid block at location of {_target}).add(0, 3, 0).subtract(location of {_entity}).toVector()
					else:
						set {_dV} to (location of {_target}).subtract(location of {_entity}).toVector()
					if vector length of {_dV} = 0:
						set {_dV} to vector(0, 1, 0)
					if {_type} is "致命球":
						set vector length of {_dV} to 0.75
					else:
						set vector length of {_dV} to 0.15
					push {_entity} {_dV}
					if vector length of velocity of {_entity} > 0.75:
						set {_v} to velocity of {_entity}
						set vector length of {_v} to 0.75
						set velocity of {_entity} to {_v}
			else:
				set velocity of {_entity} to vector(0, -0.5, 0)
			add 1 to {_index}
			wait 5 ticks
	else if {_type} is "克苏鲁的仆从" or "陨石怪":
		set {_index} to 0
		set {_v} to ({_target}.getLocation().subtract({_entity}.getLocation())).toVector()
		set vector length of {_v} to 1
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_entity}.getWorld().getTime() is not between 13500 and 22500: 
				set {_v} to vector(0, 0.33, 0)
			else:
				if {_type} is "克苏鲁的仆从":
					if checkMobTarget({_target}, {_entity}) is false:
						set {_mobAmount} to metadata "mobAmount" of {_target}
						set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)
						clear {_target}
						clear metadata "target" of {_entity}
						set {_target} to metadata "target" of (try {BOSS}.get("克苏鲁之眼"))
						set metadata "target" of {_entity} to {_target}
				else:
					if {_target} is set:
						if checkMobTarget({_target}, {_entity}) is false:
							set {_lastTarget} to {_target}
							clear {_target}
							set {_target} to mobRetarget({_entity}, {_lastTarget})
					else:
						set {_target} to mobRetarget({_entity}, {_target})
				if {_target} is set:
					if {_index} >= 12:
						set {_v} to ({_target}.getLocation().subtract({_entity}.getLocation())).toVector()
						set vector length of {_v} to 0.33
						set {_index} to 0
				else:
					set {_v} to vector(0, 0.33, 0)
			set velocity of {_entity} to {_v}
			add 1 to {_index}
			wait 5 ticks
	else if {_type} is "尖刺史莱姆" or "水晶史莱姆" or "弹力史莱姆":
		set {_pStat} to metadata "attrMap" of {_entity}
		set {_indexAI} to 0
		while health of {_entity} > 0:
			add 1 to {_indexAI}
			if {_entity}.isDead() is true:
				stop loop
			if checkMobTarget({_target}, {_entity}) is false:
				set {_mobAmount} to metadata "mobAmount" of {_target}
				set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)
				clear {_target}
				clear metadata "target" of {_entity}
				if {_type} is "尖刺史莱姆":
					set {_target} to metadata "target" of (try {BOSS}.get("史莱姆王"))
				else:
					set {_target} to metadata "target" of (try {BOSS}.get("史莱姆皇后"))
				set metadata "target" of {_entity} to {_target}
			if {_type} is "尖刺史莱姆" or "水晶史莱姆":
				if the block 1 below location of {_entity} is not air:
					{_indexAI} >= 0
					loop 25 times:
						set {_velocity} to vector(a random number between -1 and 1, 0, a random number between -1 and 1)
						
						if {_type} is "尖刺史莱姆":
							set vector length of {_velocity} to a random number between 0.3 and 0.5
							set y of {_velocity} to a random number between 0.4 and 0.6
						else:
							set vector length of {_velocity} to a random number between 0.4 and 0.8
							set y of {_velocity} to a random number between 0.4 and 1
						
						if {_type} is "尖刺史莱姆":
							set {_bulletE} to mobProjectile({_entity}, {_velocity}, {_pStat}, "尖刺")
						else:
							set {_bulletE} to mobProjectile({_entity}, {_velocity}, {_pStat}, "水晶")
						
						set metadata "penetration" of {_bulletE} to 1
					set {_indexAI} to a random integer between -8 and -5
				wait 1 second
			else:
				if distance between location of {_target} and location of {_entity} < 20:
					set {_velocity} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
					set {_time} to (vector length of {_velocity}) / 20
					set vector length of {_velocity} to 1
					add ({_time} / 2) to y component of {_velocity}
					set {_bulletE} to mobProjectile({_entity}, {_velocity}, {_pStat}, "挥发明胶")
					
					set metadata "penetration" of {_bulletE} to 1
					set metadata "Bounce" of {_bulletE} to 2
				wait 10 ticks
	else if {_type} is "飞龙" or "骨蛇":
		set {_entity}.getHandle().noclip to true
		set {_loc} to location of {_entity}
		set {_attrMap} to (metadata "attrMap" of {_entity}).clone()
		{_attrMap}.put("damageMulti", 1)
		{_attrMap}.put("defenceMulti", 2)
		loop 14 times:
			set {_segment} to (world of {_loc}).spawnEntity({_loc}, EntityType.SLIME)
			add "isMonster" to scoreboard tags of {_segment}
			{_segment}.setGravity(false)
			{_segment}.setSize(2)
			set {_segment}.getHandle().noclip to true
			set metadata "motherType" of {_segment} to {_type}
			{_segment}.setCustomName("%{_type}%&1")
			{_segment}.setCustomNameVisible(true)
			set max health of {_segment} to max health of {_entity}
			set metadata "attrMap" of {_segment} to {_attrMap}
			set metadata "damageTaker" of {_segment} to {_entity}
			add {_segment} to {_segments::*}
			apply potion of fire resistance without particles to {_segment} for 10 days
		set {_indexAI} to 0
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is not set:
				set {_indexAI} to 1
			if {_indexAI} = 0:
				#strike
				set {_targetLoc} to (location of {_target}).add(0, 1, 0)
				set {_vec} to {_targetLoc}.clone().subtract(location of {_entity}).toVector()
				if {_type} is "骨蛇":
					if vector length of {_vec} <= 6:
						set {_indexAI} to 1
				else if {_type} is "飞龙":
					if vector length of {_vec} <= 4:
						set {_indexAI} to 1
				set vector length of {_vec} to max((vector length of {_vec}) / 20, 2)
			else if {_indexAI} < 10:
				add 1 to {_indexAI}
				if {_indexAI} = 10:
					if {_type} is "骨蛇":
						set {_dVecHead} to vector(0, -0.75, 0)
					else if {_type} is "飞龙":
						set {_dVecHead} to vector(0, 0.75, 0)
			else if {_indexAI} = 10:
				#recoil
				if {_target} is set:
					if {_type} is "骨蛇":
						if (y-coordinate of {_target}) - (y-coordinate of {_entity}) >= 15:
							set {_indexAI} to 0
					else if {_type} is "飞龙":
						if (y-coordinate of {_entity}) - (y-coordinate of {_target}) >= 15:
							set {_indexAI} to 0
				{_vec}.add({_dVecHead})
				if vector length of {_vec} > 3:
					set vector length of {_vec} to 3
			{_loc}.add({_vec})
			teleport {_entity} to {_loc}
			#follow last
			set {_i} to 0
			set {_lastLoc} to {_loc}
			set {_currLoc} to location of {_segments::1}
			set {_nextLoc} to location of {_segments::2}
			loop 14 times:
				add 1 to {_i}
				set {_iNext} to {_i} + 1
				set {_currentSeg} to {_segments::%{_i}%}
				set health of {_currentSeg} to health of {_entity}
				if {_i} = 14:
					set {_next} to {_currentSeg}
				else:
					set {_next} to {_segments::%{_iNext}%}
				set {_segdVec} to {_lastLoc}.clone().subtract({_nextLoc}).toVector()
				vector length of {_segdVec} > 0
				set vector length of {_segdVec} to 1
				set {_baseVec} to {_lastLoc}.clone().subtract({_currLoc}).toVector()
				vector length of {_baseVec} > 0
				set vector length of {_baseVec} to 3
				set {_dVec} to {_segdVec}.add({_baseVec})
				vector length of {_dVec} > 0
				set vector length of {_dVec} to 1.3
				set {_currLoc} to {_lastLoc}.clone().subtract({_dVec})
				teleport {_currentSeg} to {_currLoc}
				set {_lastLoc} to {_currLoc}
				set {_currLoc} to {_nextLoc}
				set {_nextLoc} to location of {_next}
			wait 3 ticks
		loop {_segments::*}:
			set health of (loop-value) to 0
	else if {_type} is "巨型陆龟" or "冰雪陆龟":
		add "noFallDamage" to scoreboard tags of {_monster}
		set {_indexAI} to 10
		set {_lastHealth} to health of {_entity} - 0.1
		set {_attrMap} to metadata "attrMap" of {_entity}
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			
			set {_toLoop} to (world of {_entity}).getNearbyEntities((location of {_entity}), 2, 2, 2)
			loop ...{_toLoop}:
				set {_entity1} to loop-value
				if {_entity1} is not {_entity}:
					checkCanDamage({_entity}, {_entity1}) is true
					handleDamage({_entity1}, {_entity}, {_attrMap}.get("damage"), "Melee")
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			if {_target} is set:
				if distance between {_entity} and {_target} > 25:
					set {_waitTime} to 3
				else if distance between {_entity} and {_target} > 12:
					set {_waitTime} to 5
				else:
					set {_waitTime} to 27
				if health of {_entity} < {_lastHealth}:
					set {_lastHealth} to health of {_entity} - 0.1
					set {_indexAI} to 12
				if {_indexAI} = 0:
					set name of {_entity} to "%{_type}%&1"
					{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0)
					if {_type} is "巨型陆龟":
						{_attrMap}.put("damage", 576)
						{_attrMap}.put("defence", 120)
					else:
						{_attrMap}.put("damage", 396)
						{_attrMap}.put("defence", 112)
				else if {_indexAI} is between 2 and 8:
					set gravity of {_entity} to off
					set {_dV} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
					if vector length of {_dV} > 0:
						if {_indexAI} < 5:
							add 5 to y component of {_dV}
						set vector length of {_dV} to 8
						set {_v} to (velocity of {_entity}).add({_dV})
						vector length of {_v} > 0
						set vector length of {_v} to (vector length of {_v}) / 10
						set {_yComp} to y component of {_v}
						set y component of {_v} to 0
						set vector length of {_v} to min((vector length of {_v}), 2)
						set y component of {_v} to {_yComp}
						set velocity of {_entity} to {_v}
					if {_indexAI} is 2:
						push {_entity} upwards with speed 1
					else if {_indexAI} is 8:
						set gravity of {_entity} to on
				else if {_indexAI} = 12:
					set gravity of {_entity} to on
					set name of {_entity} to {_type}
					if {_type} is "巨型陆龟":
						{_attrMap}.put("damage", 320)
						{_attrMap}.put("defence", 60)
					else:
						{_attrMap}.put("damage", 220)
						{_attrMap}.put("defence", 56)
					{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.2)
				else if {_indexAI} - {_waitTime} >= 10:
					set {_indexAI} to -1
			else:
				set gravity of {_entity} to on
				{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.2)
				set {_target} to mobRetarget({_entity}, {_target})
			add 1 to {_indexAI}
			wait 5 ticks
	else if {_type} is "蛾怪":
		set {_attrMap} to metadata "attrMap" of {_entity}
		set {_indexAI} to 0
		set {_v} to vector(0, 0, 0)
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is not set:
				add 0.05 to y of {_v}
				if y-coordinate of {_v} > 255:
					{_entity}.remove()
			else:
				if {_indexAI} < 12:
					if y-coordinate of {_target} > y-coordinate of {_entity}:
						add 0.1 to y of {_v}
					else:
						subtract 0.1 from y of {_v}
					if vector length of {_v} > 0.75:
						set vector length of {_v} to 0.75
					{_attrMap}.put("damageMulti", 1)
				else:
					set {_v} to (location of {_target}).subtract(location of {_entity}).toVector()
					set y of {_v} to 0
					if vector length of {_v} = 0:
						set {_v} to vector(1, 0, 0)
					if chance of 0.35:
						set vector length of {_v} to 1.75
						{_attrMap}.put("damageMulti", 1.5)
					else:
						set vector length of {_v} to 1
						{_attrMap}.put("damageMulti", 0.8)
					set {_indexAI} to -1
			set velocity of {_entity} to {_v}
			add 1 to {_indexAI}
			wait 5 ticks
	else if {_type} is "精灵直升机":
		set {_attrMap} to metadata "attrMap" of {_entity}
		set {_v} to vector(0, 0, 0)
		set {_indexAI} to a random number between 0 and 360
		set {_indexY} to a random number between 0 and 360
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is not set:
				add 0.05 to y of {_v}
				if y-coordinate of {_v} > 255:
					{_entity}.remove()
			else:
				set {_v} to (location of {_target}).add(sin({_indexAI}) * 10, (sin({_indexY})* 2) + 4, cos({_indexAI}) * 10).subtract(location of {_entity}).toVector()
				set vector length of {_v} to vector length of {_v} / 20
				set {_velocity} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
				set vector length of {_velocity} to 1.25
				set {_projectile} to mobProjectile({_entity}, {_velocity}, {_attrMap}, "火枪子弹")
				set gravity of {_projectile} to off
				projectileAI({_projectile}, "GUN")
			set velocity of {_entity} to {_v}
			add 5 to {_indexAI}
			add 10 to {_indexY}
			wait 10 ticks
	else if {_type} is "圣骑士" or "死灵法师" or "褴褛邪教徒法师" or "魔教徒" or "骷髅狙击手" or "骷髅特警":
		set {_indexAI} to 0
		set {_lastHealth} to health of {_entity} - 0.1
		set {_attrMap} to metadata "attrMap" of {_entity}
		if {_type} is "死灵法师" or "褴褛邪教徒法师" or "魔教徒":
			set {_moveSPD} to 0
			set {_needSight} to false
		else if {_type} is "骷髅特警":
			set {_moveSPD} to 0.3
			set {_needSight} to true
		else:
			set {_moveSPD} to 0.25
			set {_needSight} to true
		if {_type} is "圣骑士":
			set {_attrMapProjectile} to {_attrMap}.clone()
			{_attrMapProjectile}.put("damage", 360)
		else if {_type} is "死灵法师":
			set {_color} to new ArrayList(1)
			{_color}.add("255|125|255")
			set {_extra} to new HashMap(4)
			{_extra}.put("decay", 0.1)
			{_extra}.put("bounceWhenHitBlock", true)
		else if {_type} is "褴褛邪教徒法师":
			set {_attrMapProjectile} to {_attrMap}.clone()
			{_attrMapProjectile}.put("damage", 256)
		else if {_type} is "魔教徒":
			set {_attrMapProjectile} to {_attrMap}.clone()
			{_attrMapProjectile}.put("damage", 256)
			{_attrMapProjectile}.put("damage", 256)
		else if {_type} is "骷髅狙击手":
			set {_attrMapProjectile} to {_attrMap}.clone()
			{_attrMapProjectile}.put("damage", 640)
			set {_shootInterval} to 2
			set {_shootAmount} to 1
		else if {_type} is "骷髅特警":
			set {_attrMapProjectile} to {_attrMap}.clone()
			{_attrMapProjectile}.put("damage", 400)
			set {_shootInterval} to 1
			set {_shootAmount} to 6
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is set:
				if health of {_entity} < {_lastHealth}:
					{_type} is not "圣骑士"
					if {_type} is "死灵法师" or "褴褛邪教徒法师" or "魔教徒":
						loop 3 times:
							set {_targetLoc} to (location of {_entity}).add((a random number between -8 and 8), (a random number between -8 and 8), (a random number between -8 and 8))
							set {_block} to block at {_targetLoc}
							if {_block} is not solid:
								while y-coordinate of {_block} > 1:
									set {_block} to the block 1 below {_block}
									if {_block} is solid:
										stop loop
								teleport {_entity} to location of block 1 above {_block}
								stop loop
					set {_indexAI} to 4
				set {_lastHealth} to health of {_entity} - 0.1
				if {_indexAI} >= 6:
					if {_indexAI} = 6:
						{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0d)
					if {_type} is "圣骑士":
						if {_indexAI} is 8 or 10 or 12 or 14 or 16:
							mobSpecialProjectile({_entity}, {_target}, "paladinHammer", {_attrMapProjectile})
						else if {_indexAI} is 18:
							set {_indexAI} to -1
					else if {_type} is "死灵法师":
						if {_indexAI} is 8 or 10 or 12 or 14 or 16:
							set {_yaw} to vector yaw of {_dir}
							set {_pitch} to vector pitch of {_dir}
							handleStrikeLine({_entity}, {_yaw}, {_pitch}, 48, (a diamond), {_color}, new ArrayList(), false, {_extra})
						else:
							set {_dir} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
							if {_indexAI} is 18:
								set {_lastHealth} to health of {_entity} + 9999
					else if {_type} is "褴褛邪教徒法师":
						if {_indexAI} is 8 or 9 or 10:
							mobSpecialProjectile({_entity}, {_target}, "spectre", {_attrMapProjectile})
						else if {_indexAI} is 12:
							set {_lastHealth} to health of {_entity} + 9999
					else if {_type} is "魔教徒":
						if {_indexAI} is 8 or 10 or 12:
							mobSpecialProjectile({_entity}, {_target}, "fireball", {_attrMapProjectile})
						else if {_indexAI} is 16:
							set {_lastHealth} to health of {_entity} + 9999
					else if {_type} is "骷髅特警" or "骷髅狙击手":
						{_indexAI} >= 8
						mod({_indexAI}, {_shootInterval}) = 0
						set {_dir} to (eye location of {_target}).subtract(eye location of {_entity}).toVector()
						vector length of {_dir} > 0.01
						if {_type} is "骷髅特警":
							set vector length of {_dir} to 1
							play sound "entity.generic.explode" with volume 2 and pitch 1.2 at eye location of {_entity}
						else:
							set vector length of {_dir} to 5
							play sound "entity.generic.explode" with volume 4 and pitch 1.2 at eye location of {_entity}
						loop {_shootAmount} times:
							if {_type} is "骷髅特警":
								set {_velocity} to {_dir}.clone().add(vector((a random number between -0.1 and 0.1), (a random number between -0.1 and 0.1), (a random number between -0.1 and 0.1)))
								set vector length of {_velocity} to 2
							else:
								set {_velocity} to {_dir}
							set {_projectile} to mobProjectile({_entity}, {_velocity}, {_attrMapProjectile}, "火枪子弹")
							set gravity of {_projectile} to off
							projectileAI({_projectile}, "GUN")
				else:
					{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue({_moveSPD})
				if {_needSight} is true:
					if {_entity}.hasLineOfSight({_target}) is true:
						add 1 to {_indexAI}
					else:
						set {_indexAI} to 0
				else:
					add 1 to {_indexAI}
			else:
				set {_indexAI} to 0
			wait 10 ticks
	else if {_type} is "腐化宝箱怪" or "神圣宝箱怪":
		set {_indexAI} to 0
		set {_attrMap} to metadata "attrMap" of {_entity}
		{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.75d)
		while health of {_entity} > 0:
			if {_entity}.isDead() is true:
				stop loop
			if {_target} is set:
				if checkMobTarget({_target}, {_entity}) is false:
					set {_lastTarget} to {_target}
					clear {_target}
					set {_target} to mobRetarget({_entity}, {_lastTarget})
			else:
				set {_target} to mobRetarget({_entity}, {_target})
			if {_target} is not set:
				{_entity}.remove()
			else:
				if {_indexAI} = 20:
					{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0d)
					{_attrMap}.put("damage", 0)
					{_attrMap}.put("defence", 1000)
					add "reflectProjectile" to scoreboard tags of {_entity}
					wait 5 seconds
					{_entity}.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED).setBaseValue(0.75d)
					{_attrMap}.put("damage", 360)
					{_attrMap}.put("defence", 68)
					remove "reflectProjectile" from scoreboard tags of {_entity}
				else if {_indexAI} > 40:
					set gravity of {_entity} to off
					set {_entity}.getHandle().noclip to true
					if {_indexAI} is between 40 and 42:
						set {_v} to (eye location of {_target}).subtract(location of {_entity}).toVector()
						if vector length of {_v} = 0:
							set {_v} to vector(0, 1, 0)
						set vector length of {_v} to 1.5
						set velocity of {_entity} to {_v}
						if distance between location of {_entity} and location of {_target} <= 10:
							set gravity of {_entity} to on
							set {_entity}.getHandle().noclip to false
							wait 50 ticks
						else:
							subtract 1 from {_indexAI}
					else if {_indexAI} is 43:
						set {_destination} to (location of {_target}).add(0, 8, 0)
						set {_v} to {_destination}.clone().subtract(location of {_entity}).toVector()
						if vector length of {_v} = 0:
							set {_v} to vector(0, 1, 0)
						set vector length of {_v} to max(vector length of {_v} / 4, 0.75)
						set velocity of {_entity} to {_v}
						if distance between location of {_entity} and {_destination} <= 3:
							set {_targetLoc} to eye location of {_target}
						else:
							subtract 1 from {_indexAI}
					else if {_indexAI} is 44:
						set {_v} to {_targetLoc}.clone().subtract(location of {_entity}).toVector()
						if vector length of {_v} = 0:
							set {_v} to vector(0, -1, 0)
						set vector length of {_v} to 1.5
						set velocity of {_entity} to {_v}
					else:
						set gravity of {_entity} to on
						set {_entity}.getHandle().noclip to false
						set {_indexAI} to 0
			add 1 to {_indexAI}
			wait 4 ticks
	if {_isMonster} is true:
		while {_entity}.isDead() is false:
			wait 5 second
		set {_mobAmount} to metadata "mobAmount" of {_target}
		set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)

on inventory close:
	set {_holder} to (event-inventory).getHolder()
	{_holder} is a chest
	set {_contents} to (event-inventory).getStorageContents()
	loop ...{_contents}:
		clear {_item}
		set {_item} to loop-value
		{_item} is set
		set {_itemType} to trimText(name of {_item})
		if {_type} is not set:
			if {_itemType} is "夜光钥匙":
				set {_type} to "腐化宝箱怪"
			else if {_itemType} is "光明钥匙":
				set {_type} to "神圣宝箱怪"
			else:
				stop trigger
		else:
			stop trigger
	{_type} is set
	clear inventory of (block at location of {_holder})
	set (block at location of {_holder}) to air
	spawnMob({_type}, location of {_holder}, (event-player))

function validateMob(monster: entity, type: text):
	set {_cantSee} to 0
	set {_lastValid} to true
	while {_monster}.isDead() is false:
		wait 5 seconds
		clear {_target}
		set {_target} to metadata "target" of {_monster}
		set {_targetValid} to true
		if metadata "target" of {_monster} is not set:
			set {_targetValid} to false
		else:
			if checkMobTarget({_target}, {_monster}) is false:
				set {_targetValid} to false
			if {_monster}.hasLineOfSight({_target}) is false:
				add 1 to {_cantSee}
				if {_cantSee} > 8:
					set {_targetValid} to false
			else:
				set {_cantSee} to 0
		if {_targetValid} is false:
			if {_lastValid} is true:
				set {_lastValid} to false
			else:
				{_monster}.remove()
				stop trigger
		else:
			set {_lastValid} to true
function mobRetarget(monster: entity, target: entity) :: entity:
	clear metadata "target" of {_monster}
	set {_mobAmount} to metadata "mobAmount" of {_target}
	set metadata "mobAmount" of {_target} to max(0, {_mobAmount} - 1)
	loop all players in radius 64 of {_monster}:
		if checkMobTarget(loop-value, {_monster}) is true:
			{_monster}.hasLineOfSight(loop-value) is true
			set {_mobAmountNew} to metadata "mobAmount" of loop-value
			set metadata "mobAmount" of loop-value to max(0, {_mobAmountNew} + 1)
			set metadata "target" of {_monster} to loop-value
			makeTarget({_monster}, loop-value)
			return loop-value
	return {_null}

function spawnProjectile(shooter: entity, velocity: vector, attrMap: object, bulletName: text, loc: location) :: entity:
	set {_bulletE} to (world of {_shooter}).spawnEntity({_loc}, EntityType.SPLASH_POTION)
	
	{_bulletE}.setCustomName({_bulletName})
	{_bulletE}.setVelocity({_velocity})
	{_bulletE}.setShooter({_shooter})
	disguiseProjectile({_bulletE})
	
	set metadata "attrMap" of {_bulletE} to {_attrMap}.clone()
	set metadata "collided" of {_bulletE} to new ArrayList()
	return {_bulletE}
function mobProjectile(shooter: entity, velocity: vector, attrMap: object, bulletName: text) :: entity:
	return spawnProjectile({_shooter}, {_velocity}, {_attrMap}, {_bulletName}, (eye location of {_shooter}))
function mobSpecialProjectile(shooter: entity, target: entity, projectileType: text, attrMap: object):
	if {_projectileType} is "paladinHammer":
		spawn a slime at eye location of {_shooter}
		set {_projectile} to spawned entity
		set metadata "attrMap" of {_projectile} to {_attrMap}
		set gravity of {_projectile} to off
		set glowing of {_projectile} to on
		set {_projectile}.getHandle().noclip to true
		set name of {_projectile} to "圣骑士锤"
		set metadata "damageSourcePlayer" of {_projectile} to {_shooter}
		add "isMonster" to scoreboard tags of {_projectile}
		add "noDamage" to scoreboard tags of {_projectile}
		{_projectile}.setRemoveWhenFarAway(false)
		{_projectile}.setSize(3)
		set {_dir} to (eye location of {_target}).subtract(location of {_projectile}).toVector()
		if vector length of {_dir} < 0.01:
			set {_dir} to vector(0, 1, 0)
		set vector length of {_dir} to (vector length of {_dir}) / 12
		loop 6 times:
			if loop-number = 4:
				set {_dir} to (eye location of {_shooter}).subtract(location of {_projectile}).toVector()
				if vector length of {_dir} < 0.01:
					set {_dir} to vector(0, 1, 0)
				set vector length of {_dir} to (vector length of {_dir}) / 12
			set velocity of {_projectile} to {_dir}
			wait 4 ticks
		{_projectile}.remove()
	else if {_projectileType} is "fireball":
		set {_dir} to (eye location of {_target}).subtract(eye location of {_shooter}).toVector()
		set {_loopTime} to ceil((vector length of {_dir}) / 2)
		if {_loopTime} > 1:
			set vector length of {_dir} to 2
		set {_loc} to eye location of {_shooter}
		set {_targetLoc} to eye location of {_target}
		set {_particleColor} to new ArrayList(1)
		{_particleColor}.add("255|125|125")
		loop {_loopTime} times:
			if loop-number = {_loopTime}:
				set {_nextLoc} to {_targetLoc}
			else:
				set {_nextLoc} to {_loc}.clone().add({_dir})
			set {_v} to {_loc}.subtract({_nextLoc}).toVector()
			handleParticleLine({_v}, (vector length of {_v}), 0.1, {_nextLoc}, {_particleColor})
			set {_loc} to {_nextLoc}
			wait 3 ticks
		set {_projectile} to (world of {_loc}).spawnEntity({_loc}, EntityType.SPLASH_POTION)
		set name of {_projectile} to "狱火爆破弹"
		set shooter of {_projectile} to {_shooter}
		set metadata "attrMap" of {_projectile} to {_attrMap}
		handleEntityExplode({_projectile}, {_projectile})
		{_projectile}.remove()
	else if {_projectileType} is "spectre":
		spawn a slime at eye location of {_shooter}
		set {_projectile} to spawned entity
		set metadata "attrMap" of {_projectile} to {_attrMap}
		set gravity of {_projectile} to off
		set glowing of {_projectile} to on
		set {_projectile}.getHandle().noclip to true
		set name of {_projectile} to "幽灵"
		set metadata "damageSourcePlayer" of {_projectile} to {_shooter}
		add "isMonster" to scoreboard tags of {_projectile}
		add "noDamage" to scoreboard tags of {_projectile}
		{_projectile}.setRemoveWhenFarAway(false)
		{_projectile}.setSize(2)
		set {_dir} to (eye location of {_target}).subtract(location of {_projectile}).toVector()
		if vector length of {_dir} < 0.01:
			set {_dir} to vector(0, 1, 0)
		set {_speedMax} to 1.5
		set vector length of {_dir} to 1.5
		loop 15 times:
			set {_dV} to (eye location of {_target}).subtract(location of {_projectile}).toVector()
			if vector length of {_dV} > 0.01:
				set vector length of {_dV} to 0.35
				{_dir}.add({_dV})
				vector length of {_dir} > {_speedMax}
				set vector length of {_dir} to {_speedMax}
			set {_speedMax} to {_speedMax} * 0.95
			set velocity of {_projectile} to {_dir}
			wait 4 ticks
		{_projectile}.remove()
	else if {_projectileType} is "cursedSkull":
		spawn a slime at eye location of {_shooter}
		set {_projectile} to spawned entity
		set metadata "attrMap" of {_projectile} to {_attrMap}
		set gravity of {_projectile} to off
		set glowing of {_projectile} to on
		set {_projectile}.getHandle().noclip to true
		set name of {_projectile} to "诅咒骷髅头"
		add "isMonster" to scoreboard tags of {_projectile}
		add "noDamage" to scoreboard tags of {_projectile}
		{_projectile}.setRemoveWhenFarAway(false)
		{_projectile}.setSize(2)
		set {_dir} to (eye location of {_target}).subtract(location of {_projectile}).toVector()
		if vector length of {_dir} < 0.01:
			set {_dir} to vector(0, 1, 0)
		set vector length of {_dir} to 1.5
		loop 8 times:
			set velocity of {_projectile} to {_dir}
			wait 5 ticks
		{_projectile}.remove()