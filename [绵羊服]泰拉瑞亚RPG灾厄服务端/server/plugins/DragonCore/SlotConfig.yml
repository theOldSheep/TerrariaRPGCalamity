# 自定义的槽位必须填在此处，否则槽位将不允许点击操作

mount:
  attribute: true
  limit:
  - "lorecontains|[坐骑]"
accessory1:
  attribute: true
  limit:
  - "accessory_check|1"
accessory2:
  attribute: true
  limit:
  - "accessory_check|2"
accessory3:
  attribute: true
  limit:
  - "accessory_check|3"
accessory4:
  attribute: true
  limit:
  - "accessory_check|4"
accessory5:
  attribute: true
  limit:
  - "accessory_check|5"
accessory6:
  attribute: true
  limit:
  - "accessory_check|6"
accessory7:
  attribute: true
  limit:
  - "accessory_check|7"


# 脚本功能，不会改的不要乱改哦~
Script:
  # 判定饰品
  accessory_check: |-
    function isValid(itemStack){
      return itemStack != null && itemStack.getType().toString() != "AIR";
    }
    function isAccessory(itemStack){
      var lore = itemStack.getItemMeta().getLore();
      if(lore!=null){
        for(var i=0;i<lore.size();i++){
          var line = lore.get(i);
          if(line!=null && line.contains("[饰品]")){
            return true;
          }
        }
      }
      return false;
    }
    function getItemCategories(itemStack){
      var results = [];
      var nextIdx = 0;
      var lore = itemStack.getItemMeta().getLore();
      if(lore!=null){
        for(var i=0;i<lore.size();i++){
          var line = lore.get(i);
          if(line!=null && line.contains("▣算作")){
            results[nextIdx++] = line.split("▣算作")[1];
          }
        }
      }
      return results;
    }
    function hasAccessoryConflictSingle(currItem, otherAccessoryName){
      if (currItem == otherAccessoryName) return true;
      switch(currItem) {
        case "核子之源":
          if (otherAccessoryName == "玷星之源") return true;
          if (otherAccessoryName == "斯塔提斯的诅咒") return true;
          break;
        case "玷星之源":
          if (otherAccessoryName == "核子之源") return true;
          if (otherAccessoryName == "凝胶充能电池") return true;
          if (otherAccessoryName == "核燃料棒") return true;
          if (otherAccessoryName == "星爆核心") return true;
          break;
        case "斯塔提斯的诅咒":
          if (otherAccessoryName == "核子之源") return true;
          if (otherAccessoryName == "斯塔提斯的祝福") return true;
          if (otherAccessoryName == "始源暗影炎") return true;
          break;
        case "斯塔提斯的祝福":
        case "始源暗影炎":
          if (otherAccessoryName == "斯塔提斯的诅咒") return true;
          break;
        case "核子之源":
        case "凝胶充能电池":
        case "核燃料棒":
          if (otherAccessoryName == "玷星之源") return true;
          break;
        case "深渊潜游服":
          if (otherAccessoryName == "深渊潜游装") return true;
          break;
        case "深渊潜游装":
          if (otherAccessoryName == "深渊潜游服") return true;
          break;
      }
      return false;
    }
    function hasAccessoryConflict(currItem, otherAccessoryNames){
      for (var i = 0; i < otherAccessoryNames.length; i++) {
        if (hasAccessoryConflictSingle(currItem, otherAccessoryNames[i]) === true) {
          return true;
        }
      }
      return false;
    }
    function getOtherAccessories(player, currentSlot){
      var result = [];
      var nextIdx = 0;
      for (var idx = 1; idx <= 7; idx ++) {
        if ("" + idx == currentSlot) {
          continue;
        }
        var currItem = SlotAPI.static.getCacheSlotItem(player,"accessory"+idx);
        if (!isValid(currItem)) {
          continue;
        }
        result [nextIdx++] = currItem;
      }
      return result;
    }
    function trimText(textToTrim){
      var result = "";
      var colorInfo = -1;
      var resultSplit = textToTrim.toCharArray();
      for (var i = 0; i < resultSplit.length; i++) {
        var c = resultSplit[i];
        if (c == "§") {
          colorInfo = 1;
        } else if (colorInfo == 0 && c == "#") {
          colorInfo = 6;
        } else if (colorInfo < 0) {
          result += c;
        }
        colorInfo--;
      }
      return result;
    }
    function getItemName(itemStack){
      var itemName = itemStack.getItemMeta().getDisplayName();
      if (itemName.contains("的 ")) {
        return itemName.split("的 ")[1];
      } else {
        return trimText(itemName);
      }
      return "";
    }
    function execute(player, itemStack, slotIdentifier, limitString){
      // if the item is air etc, return true
      if (!isValid(itemStack)) return true;
      // if the item is not an accessory, return false
      if (isAccessory(itemStack) === false) return false;
      
      // setup item info and other accessory info
      var otherAccessories = getOtherAccessories(player, limitString);
      var itemName = getItemName(itemStack);
      var otherAccessoryNames = [];
      for (var i = 0; i < otherAccessories.length; i ++) {
        otherAccessoryNames[i] = getItemName(otherAccessories[i]);
      }
      // do not allow multiple accessories of the same type
      var currAccCategories = getItemCategories(itemStack);
      for (var i = 0; i < otherAccessories.length; i ++) {
        var otherAcc = otherAccessories[i];
        var otherAccCategories = getItemCategories(otherAcc);
        for (var j = 0; j < currAccCategories.length; j ++) {
          for (var k = 0; k < otherAccCategories.length; k ++) {
            if (currAccCategories[j] == otherAccCategories[k]) {
              return false;
            }
          }
        }
      }
      // do not allow conflicting accessories
      if (hasAccessoryConflict(itemName, otherAccessoryNames)) {
        return false;
      }
      return true;
    }
  # 用于判断物品的某行lore里是否包含了xxx
  lorecontains: |-
    function execute(player, itemStack, slotIdentifier, limitString){
      limitString = limitString.replaceAll("&","§");
      var lore = itemStack.getItemMeta().getLore();
      if(lore!=null){
        for(var i=0;i<lore.size();i++){
          var line = lore.get(i).replaceAll(" ","");
          if(line!=null && line.contains(limitString)){
             return true;
          }
        }
      }
      return false;
    }
  # 用于判断物品是否有一行lore为xxx
  lore: |-
    function execute(player, itemStack, slotIdentifier, limitString){
      limitString = limitString.replaceAll("&","§");
      var lore = itemStack.getItemMeta().getLore();
      var result = lore != null && lore.contains(limitString);
      if(!result){
    	player.sendMessage("§c该槽位需要Lore: "+limitString);
      }
      return result;
    }
  # 用于判断玩家是否拥有权限xxx
  permission: |-
    function execute(player, itemStack, slotIdentifier, limitString){
      var result = player.hasPermission(limitString);
      if(!result){
    	player.sendMessage("§6你需要有 §f"+limitString+" §6权限才可以使用该槽位")
      }
      return result;
    }
  # 用于判断玩家放入的时装是否为xx
  skin: |-
    function execute(player, itemStack, slotIdentifier, limitString) {
        var itemSkinType = DragonAPI.static.getItemSkinType(itemStack);
        if (itemSkinType != null) {
            itemSkinType = itemSkinType.toLowerCase();
        }
        var result = (itemSkinType === limitString) || (itemSkinType != null && limitString=="*");
        if (!result) {
            player.sendMessage("§c当前槽位需要时装类型: §f" + limitString + "§c  你放入的物品时装类型是: §f" + itemSkinType);
        }
        return result;
    }
  # 用于判断其他槽位内是否不存在物品
  emptyslot: |-
    function execute(player, itemStack, slotIdentifier, limitString) {
        var item = SlotAPI.static.getCacheSlotItem(player,limitString);
        var result = item == null || item.getType().toString() == "AIR";
        if(!result){
            if(limitString=="额外槽位1"){
               limitString = "英文名的话可以通过这个方式改成中文名提示玩家";
            }else if(limitString=="额外槽位2"){
               limitString = "英文名的话可以通过这个方式改成中文名提示玩家2333";
            }
            player.sendMessage("§c当前槽位与: §f" + limitString + "§c 冲突,您不能同时在两个槽位内放置物品");
        }
        return result;
    }
  # 用于返回true
  alwaysallow: |-
    function execute(player, itemStack, slotIdentifier, limitString) {
        return true;
    }